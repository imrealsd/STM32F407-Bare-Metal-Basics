
SDIO-Read-Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f0  080088f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080088f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000423c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200042ac  200042ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cd8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003162  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00039ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023586  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c6f  00000000  00000000  0005ef7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca203  00000000  00000000  00072bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cdf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c74  00000000  00000000  0013ce44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008320 	.word	0x08008320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008320 	.word	0x08008320

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff fe1f 	bl	80001e4 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <Send_Uart+0x28>)
 80005b2:	f002 fef3 	bl	800339c <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200021e8 	.word	0x200021e8

080005c4 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005cc:	2201      	movs	r2, #1
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <Mount_SD+0x38>)
 80005d2:	f006 fbd1 	bl	8006d78 <f_mount>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <Mount_SD+0x3c>)
 80005dc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <Mount_SD+0x3c>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d003      	beq.n	80005ee <Mount_SD+0x2a>
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <Mount_SD+0x40>)
 80005e8:	f7ff ffd6 	bl	8000598 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80005ec:	e002      	b.n	80005f4 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <Mount_SD+0x44>)
 80005f0:	f7ff ffd2 	bl	8000598 <Send_Uart>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000e8 	.word	0x200000e8
 8000600:	2000112c 	.word	0x2000112c
 8000604:	08008338 	.word	0x08008338
 8000608:	0800835c 	.word	0x0800835c

0800060c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	2000      	movs	r0, #0
 800061a:	f006 fbad 	bl	8006d78 <f_mount>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <Unmount_SD+0x38>)
 8000624:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <Unmount_SD+0x38>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d103      	bne.n	8000636 <Unmount_SD+0x2a>
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <Unmount_SD+0x3c>)
 8000630:	f7ff ffb2 	bl	8000598 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000634:	e002      	b.n	800063c <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <Unmount_SD+0x40>)
 8000638:	f7ff ffae 	bl	8000598 <Send_Uart>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000112c 	.word	0x2000112c
 8000648:	08008380 	.word	0x08008380
 800064c:	080083a8 	.word	0x080083a8

08000650 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8000656:	2014      	movs	r0, #20
 8000658:	f007 fa1c 	bl	8007a94 <malloc>
 800065c:	4603      	mov	r3, r0
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <Format_SD+0xb4>)
 8000662:	4929      	ldr	r1, [pc, #164]	; (8000708 <Format_SD+0xb8>)
 8000664:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000666:	f007 fae7 	bl	8007c38 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800066e:	4618      	mov	r0, r3
 8000670:	f006 ffd0 	bl	8007614 <f_opendir>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <Format_SD+0xbc>)
 800067a:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <Format_SD+0xbc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d136      	bne.n	80006f2 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4922      	ldr	r1, [pc, #136]	; (8000710 <Format_SD+0xc0>)
 8000688:	4618      	mov	r0, r3
 800068a:	f007 f85c 	bl	8007746 <f_readdir>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <Format_SD+0xbc>)
 8000694:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <Format_SD+0xbc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d125      	bne.n	80006ea <Format_SD+0x9a>
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <Format_SD+0xc0>)
 80006a0:	7a5b      	ldrb	r3, [r3, #9]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d021      	beq.n	80006ea <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <Format_SD+0xc0>)
 80006a8:	7a1b      	ldrb	r3, [r3, #8]
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d011      	beq.n	80006d6 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006b2:	4918      	ldr	r1, [pc, #96]	; (8000714 <Format_SD+0xc4>)
 80006b4:	4818      	ldr	r0, [pc, #96]	; (8000718 <Format_SD+0xc8>)
 80006b6:	f7ff fd8b 	bl	80001d0 <strcmp>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d012      	beq.n	80006e6 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <Format_SD+0xc4>)
 80006c2:	f007 f8b6 	bl	8007832 <f_unlink>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <Format_SD+0xbc>)
 80006cc:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <Format_SD+0xbc>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	e7d6      	b.n	8000684 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <Format_SD+0xc4>)
 80006d8:	f007 f8ab 	bl	8007832 <f_unlink>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <Format_SD+0xbc>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e7ce      	b.n	8000684 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006e6:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006e8:	e7cc      	b.n	8000684 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f007 f804 	bl	80076fa <f_closedir>
    }
    free(path);
 80006f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006f4:	f007 f9d6 	bl	8007aa4 <free>
    return fresult;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <Format_SD+0xbc>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3738      	adds	r7, #56	; 0x38
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080083fc 	.word	0x080083fc
 8000708:	080083cc 	.word	0x080083cc
 800070c:	2000112c 	.word	0x2000112c
 8000710:	200000d0 	.word	0x200000d0
 8000714:	200000d9 	.word	0x200000d9
 8000718:	080083d0 	.word	0x080083d0

0800071c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000724:	4943      	ldr	r1, [pc, #268]	; (8000834 <Create_File+0x118>)
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f007 f84a 	bl	80077c0 <f_stat>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <Create_File+0x11c>)
 8000732:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000734:	4b40      	ldr	r3, [pc, #256]	; (8000838 <Create_File+0x11c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d112      	bne.n	8000762 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f007 f9a9 	bl	8007a94 <malloc>
 8000742:	4603      	mov	r3, r0
 8000744:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	493c      	ldr	r1, [pc, #240]	; (800083c <Create_File+0x120>)
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f007 fa74 	bl	8007c38 <siprintf>
		Send_Uart(buf);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff ff21 	bl	8000598 <Send_Uart>
		free(buf);
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f007 f9a4 	bl	8007aa4 <free>
	    return fresult;
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <Create_File+0x11c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	e063      	b.n	800082a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000762:	220b      	movs	r2, #11
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	4836      	ldr	r0, [pc, #216]	; (8000840 <Create_File+0x124>)
 8000768:	f006 fb4c 	bl	8006e04 <f_open>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <Create_File+0x11c>)
 8000772:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <Create_File+0x11c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d015      	beq.n	80007a8 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 800077c:	2064      	movs	r0, #100	; 0x64
 800077e:	f007 f989 	bl	8007a94 <malloc>
 8000782:	4603      	mov	r3, r0
 8000784:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <Create_File+0x11c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	492d      	ldr	r1, [pc, #180]	; (8000844 <Create_File+0x128>)
 8000790:	6938      	ldr	r0, [r7, #16]
 8000792:	f007 fa51 	bl	8007c38 <siprintf>
			Send_Uart(buf);
 8000796:	6938      	ldr	r0, [r7, #16]
 8000798:	f7ff fefe 	bl	8000598 <Send_Uart>
			free(buf);
 800079c:	6938      	ldr	r0, [r7, #16]
 800079e:	f007 f981 	bl	8007aa4 <free>
		    return fresult;
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <Create_File+0x11c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	e040      	b.n	800082a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f007 f973 	bl	8007a94 <malloc>
 80007ae:	4603      	mov	r3, r0
 80007b0:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4924      	ldr	r1, [pc, #144]	; (8000848 <Create_File+0x12c>)
 80007b6:	69f8      	ldr	r0, [r7, #28]
 80007b8:	f007 fa3e 	bl	8007c38 <siprintf>
			Send_Uart(buf);
 80007bc:	69f8      	ldr	r0, [r7, #28]
 80007be:	f7ff feeb 	bl	8000598 <Send_Uart>
			free(buf);
 80007c2:	69f8      	ldr	r0, [r7, #28]
 80007c4:	f007 f96e 	bl	8007aa4 <free>
		}

		fresult = f_close(&fil);
 80007c8:	481d      	ldr	r0, [pc, #116]	; (8000840 <Create_File+0x124>)
 80007ca:	f006 fef9 	bl	80075c0 <f_close>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <Create_File+0x11c>)
 80007d4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <Create_File+0x11c>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d013      	beq.n	8000806 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 80007de:	2064      	movs	r0, #100	; 0x64
 80007e0:	f007 f958 	bl	8007a94 <malloc>
 80007e4:	4603      	mov	r3, r0
 80007e6:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <Create_File+0x11c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4916      	ldr	r1, [pc, #88]	; (800084c <Create_File+0x130>)
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f007 fa20 	bl	8007c38 <siprintf>
			Send_Uart(buf);
 80007f8:	6978      	ldr	r0, [r7, #20]
 80007fa:	f7ff fecd 	bl	8000598 <Send_Uart>
			free(buf);
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f007 f950 	bl	8007aa4 <free>
 8000804:	e00f      	b.n	8000826 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f007 f944 	bl	8007a94 <malloc>
 800080c:	4603      	mov	r3, r0
 800080e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	490f      	ldr	r1, [pc, #60]	; (8000850 <Create_File+0x134>)
 8000814:	69b8      	ldr	r0, [r7, #24]
 8000816:	f007 fa0f 	bl	8007c38 <siprintf>
			Send_Uart(buf);
 800081a:	69b8      	ldr	r0, [r7, #24]
 800081c:	f7ff febc 	bl	8000598 <Send_Uart>
			free(buf);
 8000820:	69b8      	ldr	r0, [r7, #24]
 8000822:	f007 f93f 	bl	8007aa4 <free>
		}
	}
    return fresult;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <Create_File+0x11c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000d0 	.word	0x200000d0
 8000838:	2000112c 	.word	0x2000112c
 800083c:	08008578 	.word	0x08008578
 8000840:	20001134 	.word	0x20001134
 8000844:	080085b0 	.word	0x080085b0
 8000848:	080085d8 	.word	0x080085d8
 800084c:	08008618 	.word	0x08008618
 8000850:	08008558 	.word	0x08008558

08000854 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800085e:	4956      	ldr	r1, [pc, #344]	; (80009b8 <Update_File+0x164>)
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f006 ffad 	bl	80077c0 <f_stat>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <Update_File+0x168>)
 800086c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800086e:	4b53      	ldr	r3, [pc, #332]	; (80009bc <Update_File+0x168>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d012      	beq.n	800089c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f007 f90c 	bl	8007a94 <malloc>
 800087c:	4603      	mov	r3, r0
 800087e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	494f      	ldr	r1, [pc, #316]	; (80009c0 <Update_File+0x16c>)
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f007 f9d7 	bl	8007c38 <siprintf>
		Send_Uart (buf);
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f7ff fe84 	bl	8000598 <Send_Uart>
		free(buf);
 8000890:	68b8      	ldr	r0, [r7, #8]
 8000892:	f007 f907 	bl	8007aa4 <free>
	    return fresult;
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <Update_File+0x168>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	e088      	b.n	80009ae <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800089c:	2232      	movs	r2, #50	; 0x32
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	4848      	ldr	r0, [pc, #288]	; (80009c4 <Update_File+0x170>)
 80008a2:	f006 faaf 	bl	8006e04 <f_open>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <Update_File+0x168>)
 80008ac:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <Update_File+0x168>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d015      	beq.n	80008e2 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f007 f8ec 	bl	8007a94 <malloc>
 80008bc:	4603      	mov	r3, r0
 80008be:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <Update_File+0x168>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	493f      	ldr	r1, [pc, #252]	; (80009c8 <Update_File+0x174>)
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f007 f9b4 	bl	8007c38 <siprintf>
	    	Send_Uart(buf);
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f7ff fe61 	bl	8000598 <Send_Uart>
	        free(buf);
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f007 f8e4 	bl	8007aa4 <free>
	        return fresult;
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <Update_File+0x168>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	e065      	b.n	80009ae <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80008e2:	6838      	ldr	r0, [r7, #0]
 80008e4:	f7ff fc7e 	bl	80001e4 <strlen>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <Update_File+0x178>)
 80008ec:	6839      	ldr	r1, [r7, #0]
 80008ee:	4835      	ldr	r0, [pc, #212]	; (80009c4 <Update_File+0x170>)
 80008f0:	f006 fc54 	bl	800719c <f_write>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b30      	ldr	r3, [pc, #192]	; (80009bc <Update_File+0x168>)
 80008fa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <Update_File+0x168>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d013      	beq.n	800092c <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f007 f8c5 	bl	8007a94 <malloc>
 800090a:	4603      	mov	r3, r0
 800090c:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <Update_File+0x168>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	492e      	ldr	r1, [pc, #184]	; (80009d0 <Update_File+0x17c>)
 8000918:	69b8      	ldr	r0, [r7, #24]
 800091a:	f007 f98d 	bl	8007c38 <siprintf>
	    	Send_Uart(buf);
 800091e:	69b8      	ldr	r0, [r7, #24]
 8000920:	f7ff fe3a 	bl	8000598 <Send_Uart>
	    	free(buf);
 8000924:	69b8      	ldr	r0, [r7, #24]
 8000926:	f007 f8bd 	bl	8007aa4 <free>
 800092a:	e00f      	b.n	800094c <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f007 f8b1 	bl	8007a94 <malloc>
 8000932:	4603      	mov	r3, r0
 8000934:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4926      	ldr	r1, [pc, #152]	; (80009d4 <Update_File+0x180>)
 800093a:	69f8      	ldr	r0, [r7, #28]
 800093c:	f007 f97c 	bl	8007c38 <siprintf>
	    	Send_Uart(buf);
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f7ff fe29 	bl	8000598 <Send_Uart>
	    	free(buf);
 8000946:	69f8      	ldr	r0, [r7, #28]
 8000948:	f007 f8ac 	bl	8007aa4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800094c:	481d      	ldr	r0, [pc, #116]	; (80009c4 <Update_File+0x170>)
 800094e:	f006 fe37 	bl	80075c0 <f_close>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <Update_File+0x168>)
 8000958:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <Update_File+0x168>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d013      	beq.n	800098a <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000962:	2064      	movs	r0, #100	; 0x64
 8000964:	f007 f896 	bl	8007a94 <malloc>
 8000968:	4603      	mov	r3, r0
 800096a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <Update_File+0x168>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4918      	ldr	r1, [pc, #96]	; (80009d8 <Update_File+0x184>)
 8000976:	6938      	ldr	r0, [r7, #16]
 8000978:	f007 f95e 	bl	8007c38 <siprintf>
	    	Send_Uart(buf);
 800097c:	6938      	ldr	r0, [r7, #16]
 800097e:	f7ff fe0b 	bl	8000598 <Send_Uart>
	    	free(buf);
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f007 f88e 	bl	8007aa4 <free>
 8000988:	e00f      	b.n	80009aa <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f007 f882 	bl	8007a94 <malloc>
 8000990:	4603      	mov	r3, r0
 8000992:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4911      	ldr	r1, [pc, #68]	; (80009dc <Update_File+0x188>)
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f007 f94d 	bl	8007c38 <siprintf>
	    	Send_Uart(buf);
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff fdfa 	bl	8000598 <Send_Uart>
	    	free(buf);
 80009a4:	6978      	ldr	r0, [r7, #20]
 80009a6:	f007 f87d 	bl	8007aa4 <free>
	     }
	}
    return fresult;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <Update_File+0x168>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000d0 	.word	0x200000d0
 80009bc:	2000112c 	.word	0x2000112c
 80009c0:	08008400 	.word	0x08008400
 80009c4:	20001134 	.word	0x20001134
 80009c8:	08008420 	.word	0x08008420
 80009cc:	20001124 	.word	0x20001124
 80009d0:	0800863c 	.word	0x0800863c
 80009d4:	08008664 	.word	0x08008664
 80009d8:	08008530 	.word	0x08008530
 80009dc:	08008558 	.word	0x08008558

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0x84>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_GPIO_Init+0x84>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0x84>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_GPIO_Init+0x84>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09a      	sub	sp, #104	; 0x68
 8000a6c:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a6e:	f000 fa77 	bl	8000f60 <HAL_Init>
	SystemClock_Config();
 8000a72:	f000 f835 	bl	8000ae0 <SystemClock_Config>
	MX_GPIO_Init();
 8000a76:	f7ff ffb3 	bl	80009e0 <MX_GPIO_Init>
	MX_SDIO_SD_Init();
 8000a7a:	f000 f8a1 	bl	8000bc0 <MX_SDIO_SD_Init>
	MX_USART1_UART_Init();
 8000a7e:	f000 f9cb 	bl	8000e18 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000a82:	f004 f919 	bl	8004cb8 <MX_FATFS_Init>

	char buffer[MAX_SIZE] = "Hello World";
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <main+0x6c>)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2258      	movs	r2, #88	; 0x58
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f007 f80b 	bl	8007ab4 <memset>

	Mount_SD("/");
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <main+0x70>)
 8000aa0:	f7ff fd90 	bl	80005c4 <Mount_SD>
	Format_SD();
 8000aa4:	f7ff fdd4 	bl	8000650 <Format_SD>
	Create_File("FILE1.TXT");
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <main+0x74>)
 8000aaa:	f7ff fe37 	bl	800071c <Create_File>
	Unmount_SD("/");
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <main+0x70>)
 8000ab0:	f7ff fdac 	bl	800060c <Unmount_SD>


	while (1){

		Mount_SD("/");
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <main+0x70>)
 8000ab6:	f7ff fd85 	bl	80005c4 <Mount_SD>
		Update_File("FILE1.TXT", buffer);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <main+0x74>)
 8000ac0:	f7ff fec8 	bl	8000854 <Update_File>
		Unmount_SD("/");
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <main+0x70>)
 8000ac6:	f7ff fda1 	bl	800060c <Unmount_SD>
		HAL_Delay(2000);
 8000aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ace:	f000 fab9 	bl	8001044 <HAL_Delay>
		Mount_SD("/");
 8000ad2:	e7ef      	b.n	8000ab4 <main+0x4c>
 8000ad4:	08008760 	.word	0x08008760
 8000ad8:	08008750 	.word	0x08008750
 8000adc:	08008754 	.word	0x08008754

08000ae0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f006 ffe0 	bl	8007ab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <SystemClock_Config+0xcc>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a27      	ldr	r2, [pc, #156]	; (8000bac <SystemClock_Config+0xcc>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b25      	ldr	r3, [pc, #148]	; (8000bac <SystemClock_Config+0xcc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2310      	movs	r3, #16
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b50:	2308      	movs	r3, #8
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000b54:	23a8      	movs	r3, #168	; 0xa8
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fdd1 	bl	800170c <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000b70:	f000 f820 	bl	8000bb4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b74:	230f      	movs	r3, #15
 8000b76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2105      	movs	r1, #5
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 f832 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000b9e:	f000 f809 	bl	8000bb4 <Error_Handler>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	; 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bc6:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <MX_SDIO_SD_Init+0x3c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <MX_SDIO_SD_Init+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20002164 	.word	0x20002164
 8000bfc:	40012c00 	.word	0x40012c00

08000c00 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <HAL_SD_MspInit+0xc0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d14a      	bne.n	8000cb8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_SD_MspInit+0xc4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c76:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c7a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <HAL_SD_MspInit+0xc8>)
 8000c94:	f000 fb9e 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <HAL_SD_MspInit+0xcc>)
 8000cb4:	f000 fb8e 	bl	80013d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f94a 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <USART1_IRQHandler+0x10>)
 8000d7a:	f002 fba1 	bl	80034c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200021e8 	.word	0x200021e8

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f006 fe42 	bl	8007a40 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	200042b0 	.word	0x200042b0

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_USART1_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f002 fa57 	bl	8003302 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f7ff feab 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200021e8 	.word	0x200021e8
 8000e68:	40011000 	.word	0x40011000

08000e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0x94>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d134      	bne.n	8000ef8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a1b      	ldr	r2, [pc, #108]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000e98:	f043 0310 	orr.w	r3, r3, #16
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_UART_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4809      	ldr	r0, [pc, #36]	; (8000f08 <HAL_UART_MspInit+0x9c>)
 8000ee4:	f000 fa76 	bl	80013d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	2025      	movs	r0, #37	; 0x25
 8000eee:	f000 f9a8 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ef2:	2025      	movs	r0, #37	; 0x25
 8000ef4:	f000 f9c1 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40011000 	.word	0x40011000
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ff5d 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f006 fd87 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fd93 	bl	8000a68 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f50:	080088f8 	.word	0x080088f8
  ldr r2, =_sbss
 8000f54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f58:	200042ac 	.word	0x200042ac

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f94f 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fe9c 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f967 	bl	8001296 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe0:	f000 f92f 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	2000222c 	.word	0x2000222c

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000222c 	.word	0x2000222c

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff3e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff8e 	bl	8001180 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff31 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa2 	bl	80011e8 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff feb6 	bl	800102c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e052      	b.n	8001386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0216 	bic.w	r2, r2, #22
 80012ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <HAL_DMA_Abort+0x62>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001330:	e013      	b.n	800135a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001332:	f7ff fe7b 	bl	800102c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b05      	cmp	r3, #5
 800133e:	d90c      	bls.n	800135a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e015      	b.n	8001386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e4      	bne.n	8001332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d004      	beq.n	80013ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00c      	b.n	80013c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2205      	movs	r2, #5
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e16b      	b.n	80016c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 815a 	bne.w	80016c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80b4 	beq.w	80016c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_GPIO_Init+0x310>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x314>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x226>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_GPIO_Init+0x318>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x31c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <HAL_GPIO_Init+0x320>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_GPIO_Init+0x324>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x328>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_GPIO_Init+0x32c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_GPIO_Init+0x330>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x20a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e00e      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00c      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e00a      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x310>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_GPIO_Init+0x334>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_GPIO_Init+0x334>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_GPIO_Init+0x334>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_GPIO_Init+0x334>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f ae90 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40021400 	.word	0x40021400
 8001700:	40021800 	.word	0x40021800
 8001704:	40021c00 	.word	0x40021c00
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e264      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800172a:	4ba3      	ldr	r3, [pc, #652]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4ba0      	ldr	r3, [pc, #640]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b9d      	ldr	r3, [pc, #628]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b99      	ldr	r3, [pc, #612]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e23f      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b91      	ldr	r3, [pc, #580]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b8b      	ldr	r3, [pc, #556]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a8a      	ldr	r2, [pc, #552]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a87      	ldr	r2, [pc, #540]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a83      	ldr	r2, [pc, #524]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc32 	bl	800102c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fc2e 	bl	800102c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e204      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b76      	ldr	r3, [pc, #472]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc1e 	bl	800102c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc1a 	bl	800102c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f0      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c4      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4952      	ldr	r1, [pc, #328]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b4f      	ldr	r3, [pc, #316]	; (80019bc <HAL_RCC_OscConfig+0x2b0>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fbd3 	bl	800102c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fbcf 	bl	800102c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a5      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b46      	ldr	r3, [pc, #280]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4940      	ldr	r1, [pc, #256]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_OscConfig+0x2b0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbb2 	bl	800102c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fbae 	bl	800102c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e184      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d030      	beq.n	8001958 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_RCC_OscConfig+0x2b4>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fb92 	bl	800102c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fb8e 	bl	800102c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e164      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x2b4>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb7b 	bl	800102c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fb77 	bl	800102c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e14d      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a0 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x2b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x2b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_RCC_OscConfig+0x2b8>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb3d 	bl	800102c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e011      	b.n	80019da <HAL_RCC_OscConfig+0x2ce>
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	42470000 	.word	0x42470000
 80019c0:	42470e80 	.word	0x42470e80
 80019c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fb30 	bl	800102c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e106      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x4e4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x2f0>
 80019ee:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	e01c      	b.n	8001a36 <HAL_RCC_OscConfig+0x32a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x312>
 8001a04:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x32a>
 8001a1e:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a74      	ldr	r2, [pc, #464]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff faf5 	bl	800102c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff faf1 	bl	800102c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0c5      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ee      	beq.n	8001a46 <HAL_RCC_OscConfig+0x33a>
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fadf 	bl	800102c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fadb 	bl	800102c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0af      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ee      	bne.n	8001a72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 809b 	beq.w	8001be6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d05c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d141      	bne.n	8001b48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff faaf 	bl	800102c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff faab 	bl	800102c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e081      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae4:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	019b      	lsls	r3, r3, #6
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fa84 	bl	800102c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff fa80 	bl	800102c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e056      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x41c>
 8001b46:	e04e      	b.n	8001be6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa6d 	bl	800102c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff fa69 	bl	800102c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03f      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x44a>
 8001b74:	e037      	b.n	8001be6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e032      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_RCC_OscConfig+0x4e8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d028      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d11a      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d111      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	42470060 	.word	0x42470060

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f99e 	bl	800102c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f99a 	bl	800102c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f8fe 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08008808 	.word	0x08008808
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80bd 	bhi.w	8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0b7      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dfe:	60bb      	str	r3, [r7, #8]
       break;
 8001e00:	e0b7      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e04:	60bb      	str	r3, [r7, #8]
      break;
 8001e06:	e0b4      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04d      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	461a      	mov	r2, r3
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	ea02 0800 	and.w	r8, r2, r0
 8001e36:	ea03 0901 	and.w	r9, r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	014b      	lsls	r3, r1, #5
 8001e48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e4c:	0142      	lsls	r2, r0, #5
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	ebb0 0008 	subs.w	r0, r0, r8
 8001e56:	eb61 0109 	sbc.w	r1, r1, r9
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	018b      	lsls	r3, r1, #6
 8001e64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e68:	0182      	lsls	r2, r0, #6
 8001e6a:	1a12      	subs	r2, r2, r0
 8001e6c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	00d9      	lsls	r1, r3, #3
 8001e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e7e:	00d0      	lsls	r0, r2, #3
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	eb12 0208 	adds.w	r2, r2, r8
 8001e88:	eb43 0309 	adc.w	r3, r3, r9
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	0259      	lsls	r1, r3, #9
 8001e96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e9a:	0250      	lsls	r0, r2, #9
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f7fe f9f8 	bl	80002a0 <__aeabi_uldivmod>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e04a      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	ea02 0400 	and.w	r4, r2, r0
 8001ed2:	ea03 0501 	and.w	r5, r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	014b      	lsls	r3, r1, #5
 8001ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee8:	0142      	lsls	r2, r0, #5
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	1b00      	subs	r0, r0, r4
 8001ef0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	018b      	lsls	r3, r1, #6
 8001efe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f02:	0182      	lsls	r2, r0, #6
 8001f04:	1a12      	subs	r2, r2, r0
 8001f06:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	00d9      	lsls	r1, r3, #3
 8001f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f18:	00d0      	lsls	r0, r2, #3
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	1912      	adds	r2, r2, r4
 8001f20:	eb45 0303 	adc.w	r3, r5, r3
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	0299      	lsls	r1, r3, #10
 8001f2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f32:	0290      	lsls	r0, r2, #10
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	f7fe f9ac 	bl	80002a0 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	60bb      	str	r3, [r7, #8]
      break;
 8001f6a:	e002      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f6e:	60bb      	str	r3, [r7, #8]
      break;
 8001f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f72:	68bb      	ldr	r3, [r7, #8]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08008818 	.word	0x08008818

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0b5b      	lsrs	r3, r3, #13
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08008818 	.word	0x08008818

08001ff4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe fdf1 	bl	8000c00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f814 	bl	8002054 <HAL_SD_InitCard>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00a      	b.n	800204c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002070:	2376      	movs	r3, #118	; 0x76
 8002072:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681d      	ldr	r5, [r3, #0]
 8002078:	466c      	mov	r4, sp
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800208c:	4628      	mov	r0, r5
 800208e:	f002 f89f 	bl	80041d0 <SDIO_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04c      	b.n	800213e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <HAL_SD_InitCard+0xf4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 f8d7 	bl	8004262 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_SD_InitCard+0xf4>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 ff02 	bl	8002ec4 <SD_PowerON>
 80020c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e02e      	b.n	800213e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fe23 	bl	8002d2c <SD_InitCard>
 80020e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e01b      	b.n	800213e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210e:	4618      	mov	r0, r3
 8002110:	f002 f93a 	bl	8004388 <SDMMC_CmdBlockLength>
 8002114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00f      	beq.n	800213c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_SD_InitCard+0xf8>)
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	422580a0 	.word	0x422580a0
 800214c:	004005ff 	.word	0x004005ff

08002150 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b092      	sub	sp, #72	; 0x48
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800215e:	f7fe ff65 	bl	800102c <HAL_GetTick>
 8002162:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1bd      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	f040 81b0 	bne.w	80024f0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	441a      	add	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d907      	bls.n	80021b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e1a4      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d002      	beq.n	80021d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	025b      	lsls	r3, r3, #9
 80021d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	025b      	lsls	r3, r3, #9
 80021dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80021de:	2390      	movs	r3, #144	; 0x90
 80021e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f107 0214 	add.w	r2, r7, #20
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 f899 	bl	8004330 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d90a      	bls.n	800221a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2202      	movs	r2, #2
 8002208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002210:	4618      	mov	r0, r3
 8002212:	f002 f8fd 	bl	8004410 <SDMMC_CmdReadMultiBlock>
 8002216:	6478      	str	r0, [r7, #68]	; 0x44
 8002218:	e009      	b.n	800222e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002226:	4618      	mov	r0, r3
 8002228:	f002 f8d0 	bl	80043cc <SDMMC_CmdReadSingleBlock>
 800222c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002242:	431a      	orrs	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e151      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800225e:	e061      	b.n	8002324 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03c      	beq.n	80022e8 <HAL_SD_ReadBlocks+0x198>
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d039      	beq.n	80022e8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002274:	2300      	movs	r3, #0
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
 8002278:	e033      	b.n	80022e2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f001 ffd1 	bl	8004226 <SDIO_ReadFIFO>
 8002284:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	b2da      	uxtb	r2, r3
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800228e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002290:	3301      	adds	r3, #1
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002296:	3b01      	subs	r3, #1
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	3301      	adds	r3, #1
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ac:	3b01      	subs	r3, #1
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	3301      	adds	r3, #1
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c2:	3b01      	subs	r3, #1
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	0e1b      	lsrs	r3, r3, #24
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	3301      	adds	r3, #1
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d8:	3b01      	subs	r3, #1
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80022dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022de:	3301      	adds	r3, #1
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
 80022e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d9c8      	bls.n	800227a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80022e8:	f7fe fea0 	bl	800102c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d902      	bls.n	80022fe <HAL_SD_ReadBlocks+0x1ae>
 80022f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d112      	bne.n	8002324 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0ec      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232a:	f240 332a 	movw	r3, #810	; 0x32a
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d095      	beq.n	8002260 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d022      	beq.n	8002388 <HAL_SD_ReadBlocks+0x238>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d91f      	bls.n	8002388 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	2b03      	cmp	r3, #3
 800234e:	d01b      	beq.n	8002388 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f002 f8c1 	bl	80044dc <SDMMC_CmdStopTransfer>
 800235a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0ba      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	f043 0208 	orr.w	r2, r3, #8
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0a0      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	f043 0202 	orr.w	r2, r3, #2
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e086      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_SD_ReadBlocks+0x2d4>)
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e06c      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
 8002424:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fefa 	bl	8004226 <SDIO_ReadFIFO>
 8002432:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	b2da      	uxtb	r2, r3
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	3301      	adds	r3, #1
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	3b01      	subs	r3, #1
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b2da      	uxtb	r2, r3
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	3301      	adds	r3, #1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	3b01      	subs	r3, #1
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2da      	uxtb	r2, r3
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	3301      	adds	r3, #1
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	3b01      	subs	r3, #1
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	0e1b      	lsrs	r3, r3, #24
 8002478:	b2da      	uxtb	r2, r3
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	3301      	adds	r3, #1
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002486:	3b01      	subs	r3, #1
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800248a:	f7fe fdcf 	bl	800102c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002496:	429a      	cmp	r2, r3
 8002498:	d902      	bls.n	80024a0 <HAL_SD_ReadBlocks+0x350>
 800249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249c:	2b00      	cmp	r3, #0
 800249e:	d112      	bne.n	80024c6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_SD_ReadBlocks+0x3b8>)
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e01b      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_SD_ReadBlocks+0x38a>
 80024d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1a6      	bne.n	8002428 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f240 523a 	movw	r2, #1338	; 0x53a
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e006      	b.n	80024fe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3748      	adds	r7, #72	; 0x48
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	004005ff 	.word	0x004005ff

0800250c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b092      	sub	sp, #72	; 0x48
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800251a:	f7fe fd87 	bl	800102c <HAL_GetTick>
 800251e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e166      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 8159 	bne.w	80027fe <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	441a      	add	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	429a      	cmp	r2, r3
 800255e:	d907      	bls.n	8002570 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e14d      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2203      	movs	r2, #3
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b01      	cmp	r3, #1
 8002586:	d002      	beq.n	800258e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	025b      	lsls	r3, r3, #9
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002592:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	025b      	lsls	r3, r3, #9
 8002598:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800259a:	2390      	movs	r3, #144	; 0x90
 800259c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f107 0218 	add.w	r2, r7, #24
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 febb 	bl	8004330 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d90a      	bls.n	80025d6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 ff63 	bl	8004498 <SDMMC_CmdWriteMultiBlock>
 80025d2:	6478      	str	r0, [r7, #68]	; 0x44
 80025d4:	e009      	b.n	80025ea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 ff36 	bl	8004454 <SDMMC_CmdWriteSingleBlock>
 80025e8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a87      	ldr	r2, [pc, #540]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0fa      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800261a:	e065      	b.n	80026e8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d040      	beq.n	80026ac <HAL_SD_WriteBlocks+0x1a0>
 800262a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03d      	beq.n	80026ac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002630:	2300      	movs	r3, #0
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
 8002634:	e037      	b.n	80026a6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263e:	3301      	adds	r3, #1
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002644:	3b01      	subs	r3, #1
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021a      	lsls	r2, r3, #8
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	3301      	adds	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	3b01      	subs	r3, #1
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800266c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266e:	3301      	adds	r3, #1
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002674:	3b01      	subs	r3, #1
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	061a      	lsls	r2, r3, #24
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	3301      	adds	r3, #1
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268c:	3b01      	subs	r3, #1
 800268e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f107 0214 	add.w	r2, r7, #20
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fdd0 	bl	8004240 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	3301      	adds	r3, #1
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
 80026a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	d9c4      	bls.n	8002636 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026ac:	f7fe fcbe 	bl	800102c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d902      	bls.n	80026c2 <HAL_SD_WriteBlocks+0x1b6>
 80026bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d112      	bne.n	80026e8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e091      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	f240 331a 	movw	r3, #794	; 0x31a
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d091      	beq.n	800261c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d022      	beq.n	800274c <HAL_SD_WriteBlocks+0x240>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d91f      	bls.n	800274c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	2b03      	cmp	r3, #3
 8002712:	d01b      	beq.n	800274c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f001 fedf 	bl	80044dc <SDMMC_CmdStopTransfer>
 800271e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	2b00      	cmp	r3, #0
 8002724:	d012      	beq.n	800274c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e05f      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	f043 0208 	orr.w	r2, r3, #8
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e045      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a20      	ldr	r2, [pc, #128]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	f043 0202 	orr.w	r2, r3, #2
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e02b      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_SD_WriteBlocks+0x308>)
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e011      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e006      	b.n	800280c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3748      	adds	r7, #72	; 0x48
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	004005ff 	.word	0x004005ff

08002818 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002826:	0f9b      	lsrs	r3, r3, #30
 8002828:	b2da      	uxtb	r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2da      	uxtb	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	b2da      	uxtb	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	b2da      	uxtb	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b2da      	uxtb	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	b2da      	uxtb	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002878:	0d1b      	lsrs	r3, r3, #20
 800287a:	b29a      	uxth	r2, r3
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2da      	uxtb	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002896:	0bdb      	lsrs	r3, r3, #15
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a8:	0b9b      	lsrs	r3, r3, #14
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ba:	0b5b      	lsrs	r3, r3, #13
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028cc:	0b1b      	lsrs	r3, r3, #12
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d163      	bne.n	80029b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	009a      	lsls	r2, r3, #2
 80028ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80028f8:	0f92      	lsrs	r2, r2, #30
 80028fa:	431a      	orrs	r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	0edb      	lsrs	r3, r3, #27
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	b2da      	uxtb	r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002916:	0e1b      	lsrs	r3, r3, #24
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	b2da      	uxtb	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002928:	0d5b      	lsrs	r3, r3, #21
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	b2da      	uxtb	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	b2da      	uxtb	r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294c:	0bdb      	lsrs	r3, r3, #15
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	b2da      	uxtb	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	3302      	adds	r3, #2
 8002970:	2201      	movs	r2, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800297a:	fb02 f203 	mul.w	r2, r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7a1b      	ldrb	r3, [r3, #8]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800299c:	0a52      	lsrs	r2, r2, #9
 800299e:	fb02 f203 	mul.w	r2, r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	661a      	str	r2, [r3, #96]	; 0x60
 80029ae:	e031      	b.n	8002a14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d11d      	bne.n	80029f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	3301      	adds	r3, #1
 80029d4:	029a      	lsls	r2, r3, #10
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	661a      	str	r2, [r3, #96]	; 0x60
 80029f2:	e00f      	b.n	8002a14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_SD_GetCardCSD+0x344>)
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e09d      	b.n	8002b50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	0b9b      	lsrs	r3, r3, #14
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a2a:	09db      	lsrs	r3, r3, #7
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	0fdb      	lsrs	r3, r3, #31
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	0f5b      	lsrs	r3, r3, #29
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	0d9b      	lsrs	r3, r3, #22
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	0d5b      	lsrs	r3, r3, #21
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	0c1b      	lsrs	r3, r3, #16
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	0bdb      	lsrs	r3, r3, #15
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	0b9b      	lsrs	r3, r3, #14
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	0b5b      	lsrs	r3, r3, #13
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	0b1b      	lsrs	r3, r3, #12
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	004005ff 	.word	0x004005ff

08002b60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af04      	add	r7, sp, #16
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d02e      	beq.n	8002c36 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bde:	d106      	bne.n	8002bee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
 8002bec:	e029      	b.n	8002c42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf4:	d10a      	bne.n	8002c0c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa1a 	bl	8003030 <SD_WideBus_Enable>
 8002bfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
 8002c0a:	e01a      	b.n	8002c42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa57 	bl	80030c6 <SD_WideBus_Disable>
 8002c18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
 8002c26:	e00c      	b.n	8002c42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
 8002c34:	e005      	b.n	8002c42 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c60:	e01f      	b.n	8002ca2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681d      	ldr	r5, [r3, #0]
 8002c88:	466c      	mov	r4, sp
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f001 fa97 	bl	80041d0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fb6c 	bl	8004388 <SDMMC_CmdBlockLength>
 8002cb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00c      	beq.n	8002cd2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	004005ff 	.word	0x004005ff

08002cec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f96e 	bl	8002fe0 <SD_SendStatus>
 8002d04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	0a5b      	lsrs	r3, r3, #9
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002d22:	693b      	ldr	r3, [r7, #16]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b094      	sub	sp, #80	; 0x50
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002d34:	2301      	movs	r3, #1
 8002d36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fa9f 	bl	8004280 <SDIO_GetPowerState>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d4c:	e0b6      	b.n	8002ebc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d02f      	beq.n	8002db6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fcc8 	bl	80046f0 <SDMMC_CmdSendCID>
 8002d60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <SD_InitCard+0x40>
    {
      return errorstate;
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	e0a7      	b.n	8002ebc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fac9 	bl	800430a <SDIO_GetResponse>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2104      	movs	r1, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 fac0 	bl	800430a <SDIO_GetResponse>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2108      	movs	r1, #8
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 fab7 	bl	800430a <SDIO_GetResponse>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	210c      	movs	r1, #12
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 faae 	bl	800430a <SDIO_GetResponse>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d00d      	beq.n	8002dda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f107 020e 	add.w	r2, r7, #14
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fcce 	bl	800476a <SDMMC_CmdSetRelAdd>
 8002dce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <SD_InitCard+0xae>
    {
      return errorstate;
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	e070      	b.n	8002ebc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d036      	beq.n	8002e50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f001 fc98 	bl	800472c <SDMMC_CmdSendCSD>
 8002dfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	e059      	b.n	8002ebc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 fa7b 	bl	800430a <SDIO_GetResponse>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2104      	movs	r1, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fa72 	bl	800430a <SDIO_GetResponse>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2108      	movs	r1, #8
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 fa69 	bl	800430a <SDIO_GetResponse>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	210c      	movs	r1, #12
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fa60 	bl	800430a <SDIO_GetResponse>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2104      	movs	r1, #4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 fa57 	bl	800430a <SDIO_GetResponse>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	0d1a      	lsrs	r2, r3, #20
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fcd4 	bl	8002818 <HAL_SD_GetCardCSD>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e7a:	e01f      	b.n	8002ebc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	461a      	mov	r2, r3
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	f001 fb47 	bl	8004520 <SDMMC_CmdSelDesel>
 8002e92:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <SD_InitCard+0x172>
  {
    return errorstate;
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	e00e      	b.n	8002ebc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	466c      	mov	r4, sp
 8002ea6:	f103 0210 	add.w	r2, r3, #16
 8002eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f001 f98b 	bl	80041d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3740      	adds	r7, #64	; 0x40
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}

08002ec4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fb42 	bl	8004566 <SDMMC_CmdGoIdleState>
 8002ee2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SD_PowerON+0x2a>
  {
    return errorstate;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	e072      	b.n	8002fd4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 fb55 	bl	80045a2 <SDMMC_CmdOperCond>
 8002ef8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00d      	beq.n	8002f1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fb2b 	bl	8004566 <SDMMC_CmdGoIdleState>
 8002f10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	e05b      	b.n	8002fd4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d137      	bne.n	8002f9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 fb55 	bl	80045e0 <SDMMC_CmdAppCommand>
 8002f36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02d      	beq.n	8002f9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f42:	e047      	b.n	8002fd4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb48 	bl	80045e0 <SDMMC_CmdAppCommand>
 8002f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SD_PowerON+0x98>
    {
      return errorstate;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e03b      	b.n	8002fd4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	491e      	ldr	r1, [pc, #120]	; (8002fdc <SD_PowerON+0x118>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fb5e 	bl	8004624 <SDMMC_CmdAppOperCommand>
 8002f68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f74:	e02e      	b.n	8002fd4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f9c4 	bl	800430a <SDIO_GetResponse>
 8002f82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0fdb      	lsrs	r3, r3, #31
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <SD_PowerON+0xcc>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <SD_PowerON+0xce>
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

    count++;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d802      	bhi.n	8002faa <SD_PowerON+0xe6>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0cc      	beq.n	8002f44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d902      	bls.n	8002fba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb8:	e00c      	b.n	8002fd4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fca:	e002      	b.n	8002fd2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	c1100000 	.word	0xc1100000

08002fe0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ff4:	e018      	b.n	8003028 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f001 fbd2 	bl	80047ac <SDMMC_CmdSendStatus>
 8003008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e009      	b.n	8003028 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f975 	bl	800430a <SDIO_GetResponse>
 8003020:	4602      	mov	r2, r0
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f001 f95f 	bl	800430a <SDIO_GetResponse>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003056:	d102      	bne.n	800305e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305c:	e02f      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f879 	bl	800315c <SD_FindSCR>
 800306a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	e023      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f001 faa7 	bl	80045e0 <SDMMC_CmdAppCommand>
 8003092:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e00f      	b.n	80030be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2102      	movs	r1, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fae0 	bl	800466a <SDMMC_CmdBusWidth>
 80030aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	e003      	b.n	80030be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e001      	b.n	80030be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80030ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f914 	bl	800430a <SDIO_GetResponse>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ec:	d102      	bne.n	80030f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80030ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f2:	e02f      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f82e 	bl	800315c <SD_FindSCR>
 8003100:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	e023      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01c      	beq.n	8003150 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f001 fa5c 	bl	80045e0 <SDMMC_CmdAppCommand>
 8003128:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	e00f      	b.n	8003154 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f001 fa95 	bl	800466a <SDMMC_CmdBusWidth>
 8003140:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	e003      	b.n	8003154 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800314c:	2300      	movs	r3, #0
 800314e:	e001      	b.n	8003154 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08f      	sub	sp, #60	; 0x3c
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003166:	f7fd ff61 	bl	800102c <HAL_GetTick>
 800316a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2108      	movs	r1, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f900 	bl	8004388 <SDMMC_CmdBlockLength>
 8003188:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	e0b2      	b.n	80032fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f001 fa1d 	bl	80045e0 <SDMMC_CmdAppCommand>
 80031a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	e0a3      	b.n	80032fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80031b8:	2308      	movs	r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80031bc:	2330      	movs	r3, #48	; 0x30
 80031be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f107 0210 	add.w	r2, r7, #16
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f8aa 	bl	8004330 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fa64 	bl	80046ae <SDMMC_CmdSendSCR>
 80031e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02a      	beq.n	8003244 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	e083      	b.n	80032fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00f      	beq.n	8003220 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f107 0208 	add.w	r2, r7, #8
 800320c:	18d4      	adds	r4, r2, r3
 800320e:	4608      	mov	r0, r1
 8003210:	f001 f809 	bl	8004226 <SDIO_ReadFIFO>
 8003214:	4603      	mov	r3, r0
 8003216:	6023      	str	r3, [r4, #0]
      index++;
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	3301      	adds	r3, #1
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	e006      	b.n	800322e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800322e:	f7fd fefd 	bl	800102c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800323c:	d102      	bne.n	8003244 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800323e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003242:	e05a      	b.n	80032fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0cf      	beq.n	80031f2 <SD_FindSCR+0x96>
 8003252:	e000      	b.n	8003256 <SD_FindSCR+0xfa>
      break;
 8003254:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800326c:	2308      	movs	r3, #8
 800326e:	e044      	b.n	80032fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003286:	2302      	movs	r3, #2
 8003288:	e037      	b.n	80032fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2220      	movs	r2, #32
 800329e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e02a      	b.n	80032fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	061a      	lsls	r2, r3, #24
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	601a      	str	r2, [r3, #0]
    scr++;
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	3304      	adds	r3, #4
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	061a      	lsls	r2, r3, #24
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	373c      	adds	r7, #60	; 0x3c
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}

08003302 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e03f      	b.n	8003394 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fd fd9f 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003344:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fd7a 	bl	8003e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d17c      	bne.n	80034b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Transmit+0x2c>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e075      	b.n	80034b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit+0x3e>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e06e      	b.n	80034b8 <HAL_UART_Transmit+0x11c>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2221      	movs	r2, #33	; 0x21
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f0:	f7fd fe1c 	bl	800102c <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d108      	bne.n	800341e <HAL_UART_Transmit+0x82>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e003      	b.n	8003426 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800342e:	e02a      	b.n	8003486 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 faf8 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e036      	b.n	80034b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	3302      	adds	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e007      	b.n	8003478 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1cf      	bne.n	8003430 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	2140      	movs	r1, #64	; 0x40
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fac8 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0ba      	sub	sp, #232	; 0xe8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_UART_IRQHandler+0x66>
 8003512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fbd3 	bl	8003cca <UART_Receive_IT>
      return;
 8003524:	e256      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80de 	beq.w	80036ec <HAL_UART_IRQHandler+0x22c>
 8003530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80d1 	beq.w	80036ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0xae>
 8003556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_UART_IRQHandler+0xd2>
 800357a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xf6>
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d011      	beq.n	80035e6 <HAL_UART_IRQHandler+0x126>
 80035c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0208 	orr.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 81ed 	beq.w	80039ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_UART_IRQHandler+0x14e>
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb5e 	bl	8003cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_UART_IRQHandler+0x17a>
 8003632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d04f      	beq.n	80036da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa66 	bl	8003b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d141      	bne.n	80036d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800367a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800367e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1d9      	bne.n	800364e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	4a7d      	ldr	r2, [pc, #500]	; (800389c <HAL_UART_IRQHandler+0x3dc>)
 80036a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fe6d 	bl	800138e <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c4:	4610      	mov	r0, r2
 80036c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	e00e      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f99a 	bl	8003a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00a      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f996 	bl	8003a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e006      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f992 	bl	8003a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036e6:	e170      	b.n	80039ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	bf00      	nop
    return;
 80036ea:	e16e      	b.n	80039ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 814a 	bne.w	800398a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8143 	beq.w	800398a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 813c 	beq.w	800398a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	f040 80b4 	bne.w	80038a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8140 	beq.w	80039ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003756:	429a      	cmp	r2, r3
 8003758:	f080 8139 	bcs.w	80039ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	f000 8088 	beq.w	8003882 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800379e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1d9      	bne.n	8003772 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e1      	bne.n	80037be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3314      	adds	r3, #20
 8003800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800381e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800382c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e3      	bne.n	80037fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	f023 0310 	bic.w	r3, r3, #16
 8003856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003864:	65ba      	str	r2, [r7, #88]	; 0x58
 8003866:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800386a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e3      	bne.n	8003840 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fd16 	bl	80012ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388a:	b29b      	uxth	r3, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8c0 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003898:	e099      	b.n	80039ce <HAL_UART_IRQHandler+0x50e>
 800389a:	bf00      	nop
 800389c:	08003bd3 	.word	0x08003bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 808b 	beq.w	80039d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8086 	beq.w	80039d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ea:	647a      	str	r2, [r7, #68]	; 0x44
 80038ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e3      	bne.n	80038c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3314      	adds	r3, #20
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	623b      	str	r3, [r7, #32]
   return(result);
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003922:	633a      	str	r2, [r7, #48]	; 0x30
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e3      	bne.n	80038fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	60fb      	str	r3, [r7, #12]
   return(result);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0310 	bic.w	r3, r3, #16
 800395a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003968:	61fa      	str	r2, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	617b      	str	r3, [r7, #20]
   return(result);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e3      	bne.n	8003944 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800397c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f848 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003988:	e023      	b.n	80039d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_UART_IRQHandler+0x4ea>
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f929 	bl	8003bfa <UART_Transmit_IT>
    return;
 80039a8:	e014      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00e      	beq.n	80039d4 <HAL_UART_IRQHandler+0x514>
 80039b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f969 	bl	8003c9a <UART_EndTransmit_IT>
    return;
 80039c8:	e004      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
    return;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
      return;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
      return;
 80039d2:	bf00      	nop
  }
}
 80039d4:	37e8      	adds	r7, #232	; 0xe8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop

080039dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a40:	e050      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a48:	d04c      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a50:	f7fd faec 	bl	800102c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d241      	bcs.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a80:	637a      	str	r2, [r7, #52]	; 0x34
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab4:	623a      	str	r2, [r7, #32]
 8003ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00f      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d09f      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3740      	adds	r7, #64	; 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b095      	sub	sp, #84	; 0x54
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b34:	643a      	str	r2, [r7, #64]	; 0x40
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba4:	61ba      	str	r2, [r7, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bc6:	bf00      	nop
 8003bc8:	3754      	adds	r7, #84	; 0x54
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff ff09 	bl	8003a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b21      	cmp	r3, #33	; 0x21
 8003c0c:	d13e      	bne.n	8003c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d114      	bne.n	8003c42 <UART_Transmit_IT+0x48>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	1c9a      	adds	r2, r3, #2
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	621a      	str	r2, [r3, #32]
 8003c40:	e008      	b.n	8003c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6211      	str	r1, [r2, #32]
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4619      	mov	r1, r3
 8003c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10f      	bne.n	8003c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe8e 	bl	80039dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08c      	sub	sp, #48	; 0x30
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	f040 80ab 	bne.w	8003e36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d117      	bne.n	8003d1a <UART_Receive_IT+0x50>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
 8003d18:	e026      	b.n	8003d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d007      	beq.n	8003d3e <UART_Receive_IT+0x74>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <UART_Receive_IT+0x82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e008      	b.n	8003d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d15a      	bne.n	8003e32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0220 	bic.w	r2, r2, #32
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d135      	bne.n	8003e28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f023 0310 	bic.w	r3, r3, #16
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	623a      	str	r2, [r7, #32]
 8003de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	69f9      	ldr	r1, [r7, #28]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e5      	bne.n	8003dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d10a      	bne.n	8003e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff fdf9 	bl	8003a18 <HAL_UARTEx_RxEventCallback>
 8003e26:	e002      	b.n	8003e2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff fde1 	bl	80039f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e002      	b.n	8003e38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	b09f      	sub	sp, #124	; 0x7c
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	68d9      	ldr	r1, [r3, #12]
 8003e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	ea40 0301 	orr.w	r3, r0, r1
 8003e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e84:	f021 010c 	bic.w	r1, r1, #12
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	6999      	ldr	r1, [r3, #24]
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	ea40 0301 	orr.w	r3, r0, r1
 8003ea8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4bc5      	ldr	r3, [pc, #788]	; (80041c4 <UART_SetConfig+0x384>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d004      	beq.n	8003ebe <UART_SetConfig+0x7e>
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4bc3      	ldr	r3, [pc, #780]	; (80041c8 <UART_SetConfig+0x388>)
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d103      	bne.n	8003ec6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ebe:	f7fe f885 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8003ec2:	6778      	str	r0, [r7, #116]	; 0x74
 8003ec4:	e002      	b.n	8003ecc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ec6:	f7fe f86d 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8003eca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	f040 80b6 	bne.w	8004044 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eda:	461c      	mov	r4, r3
 8003edc:	f04f 0500 	mov.w	r5, #0
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	1891      	adds	r1, r2, r2
 8003ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ee8:	415b      	adcs	r3, r3
 8003eea:	647b      	str	r3, [r7, #68]	; 0x44
 8003eec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef0:	1912      	adds	r2, r2, r4
 8003ef2:	eb45 0303 	adc.w	r3, r5, r3
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	00d9      	lsls	r1, r3, #3
 8003f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f04:	00d0      	lsls	r0, r2, #3
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	1911      	adds	r1, r2, r4
 8003f0c:	6639      	str	r1, [r7, #96]	; 0x60
 8003f0e:	416b      	adcs	r3, r5
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f20:	415b      	adcs	r3, r3
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f2c:	f7fc f9b8 	bl	80002a0 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4ba5      	ldr	r3, [pc, #660]	; (80041cc <UART_SetConfig+0x38c>)
 8003f36:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	011e      	lsls	r6, r3, #4
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f40:	461c      	mov	r4, r3
 8003f42:	f04f 0500 	mov.w	r5, #0
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	1891      	adds	r1, r2, r2
 8003f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f4e:	415b      	adcs	r3, r3
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f56:	1912      	adds	r2, r2, r4
 8003f58:	eb45 0303 	adc.w	r3, r5, r3
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	00d9      	lsls	r1, r3, #3
 8003f66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f6a:	00d0      	lsls	r0, r2, #3
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	1911      	adds	r1, r2, r4
 8003f72:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f74:	416b      	adcs	r3, r5
 8003f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	1891      	adds	r1, r2, r2
 8003f84:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f86:	415b      	adcs	r3, r3
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f92:	f7fc f985 	bl	80002a0 <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4b8c      	ldr	r3, [pc, #560]	; (80041cc <UART_SetConfig+0x38c>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a87      	ldr	r2, [pc, #540]	; (80041cc <UART_SetConfig+0x38c>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fbc:	441e      	add	r6, r3
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	1894      	adds	r4, r2, r2
 8003fcc:	623c      	str	r4, [r7, #32]
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fd6:	1812      	adds	r2, r2, r0
 8003fd8:	eb41 0303 	adc.w	r3, r1, r3
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	f04f 0500 	mov.w	r5, #0
 8003fe4:	00dd      	lsls	r5, r3, #3
 8003fe6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fea:	00d4      	lsls	r4, r2, #3
 8003fec:	4622      	mov	r2, r4
 8003fee:	462b      	mov	r3, r5
 8003ff0:	1814      	adds	r4, r2, r0
 8003ff2:	653c      	str	r4, [r7, #80]	; 0x50
 8003ff4:	414b      	adcs	r3, r1
 8003ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	1891      	adds	r1, r2, r2
 8004004:	61b9      	str	r1, [r7, #24]
 8004006:	415b      	adcs	r3, r3
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004012:	f7fc f945 	bl	80002a0 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <UART_SetConfig+0x38c>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a67      	ldr	r2, [pc, #412]	; (80041cc <UART_SetConfig+0x38c>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 0207 	and.w	r2, r3, #7
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4432      	add	r2, r6
 8004040:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004042:	e0b9      	b.n	80041b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004046:	461c      	mov	r4, r3
 8004048:	f04f 0500 	mov.w	r5, #0
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	1891      	adds	r1, r2, r2
 8004052:	6139      	str	r1, [r7, #16]
 8004054:	415b      	adcs	r3, r3
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800405c:	1912      	adds	r2, r2, r4
 800405e:	eb45 0303 	adc.w	r3, r5, r3
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	00d9      	lsls	r1, r3, #3
 800406c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004070:	00d0      	lsls	r0, r2, #3
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	eb12 0804 	adds.w	r8, r2, r4
 800407a:	eb43 0905 	adc.w	r9, r3, r5
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004096:	0082      	lsls	r2, r0, #2
 8004098:	4640      	mov	r0, r8
 800409a:	4649      	mov	r1, r9
 800409c:	f7fc f900 	bl	80002a0 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <UART_SetConfig+0x38c>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011e      	lsls	r6, r3, #4
 80040ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b0:	4618      	mov	r0, r3
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	1894      	adds	r4, r2, r2
 80040bc:	60bc      	str	r4, [r7, #8]
 80040be:	415b      	adcs	r3, r3
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c6:	1812      	adds	r2, r2, r0
 80040c8:	eb41 0303 	adc.w	r3, r1, r3
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	f04f 0500 	mov.w	r5, #0
 80040d4:	00dd      	lsls	r5, r3, #3
 80040d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040da:	00d4      	lsls	r4, r2, #3
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	1814      	adds	r4, r2, r0
 80040e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80040e4:	414b      	adcs	r3, r1
 80040e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004100:	0082      	lsls	r2, r0, #2
 8004102:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004106:	f7fc f8cb 	bl	80002a0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <UART_SetConfig+0x38c>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <UART_SetConfig+0x38c>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	441e      	add	r6, r3
 8004130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004132:	4618      	mov	r0, r3
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	1894      	adds	r4, r2, r2
 800413e:	603c      	str	r4, [r7, #0]
 8004140:	415b      	adcs	r3, r3
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004148:	1812      	adds	r2, r2, r0
 800414a:	eb41 0303 	adc.w	r3, r1, r3
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	f04f 0500 	mov.w	r5, #0
 8004156:	00dd      	lsls	r5, r3, #3
 8004158:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800415c:	00d4      	lsls	r4, r2, #3
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	eb12 0a00 	adds.w	sl, r2, r0
 8004166:	eb43 0b01 	adc.w	fp, r3, r1
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004182:	0082      	lsls	r2, r0, #2
 8004184:	4650      	mov	r0, sl
 8004186:	4659      	mov	r1, fp
 8004188:	f7fc f88a 	bl	80002a0 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <UART_SetConfig+0x38c>)
 8004192:	fba3 1302 	umull	r1, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	2164      	movs	r1, #100	; 0x64
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	3332      	adds	r3, #50	; 0x32
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <UART_SetConfig+0x38c>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	f003 020f 	and.w	r2, r3, #15
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4432      	add	r2, r6
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	bf00      	nop
 80041ba:	377c      	adds	r7, #124	; 0x7c
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c2:	bf00      	nop
 80041c4:	40011000 	.word	0x40011000
 80041c8:	40011400 	.word	0x40011400
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80041d0:	b084      	sub	sp, #16
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	f107 001c 	add.w	r0, r7, #28
 80041de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80041e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80041e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80041ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80041ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80041f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80041f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80041fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800420a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	b004      	add	sp, #16
 8004224:	4770      	bx	lr

08004226 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004270:	2002      	movs	r0, #2
 8004272:	f7fc fee7 	bl	8001044 <HAL_Delay>
  
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0303 	and.w	r3, r3, #3
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80042c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80042c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80042d6:	f023 030f 	bic.w	r3, r3, #15
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	b2db      	uxtb	r3, r3
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3314      	adds	r3, #20
 8004318:	461a      	mov	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4413      	add	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
}  
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004356:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800435c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004362:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800437a:	2300      	movs	r3, #0

}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004396:	2310      	movs	r3, #16
 8004398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800439a:	2340      	movs	r3, #64	; 0x40
 800439c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043a8:	f107 0308 	add.w	r3, r7, #8
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ff74 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	2110      	movs	r1, #16
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa44 	bl	8004848 <SDMMC_GetCmdResp1>
 80043c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043c2:	69fb      	ldr	r3, [r7, #28]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80043da:	2311      	movs	r3, #17
 80043dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043de:	2340      	movs	r3, #64	; 0x40
 80043e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff ff52 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	2111      	movs	r1, #17
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa22 	bl	8004848 <SDMMC_GetCmdResp1>
 8004404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004406:	69fb      	ldr	r3, [r7, #28]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800441e:	2312      	movs	r3, #18
 8004420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800442a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff30 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	2112      	movs	r1, #18
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa00 	bl	8004848 <SDMMC_GetCmdResp1>
 8004448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800444a:	69fb      	ldr	r3, [r7, #28]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004462:	2318      	movs	r3, #24
 8004464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800446e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ff0e 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	2118      	movs	r1, #24
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9de 	bl	8004848 <SDMMC_GetCmdResp1>
 800448c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800448e:	69fb      	ldr	r3, [r7, #28]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044a6:	2319      	movs	r3, #25
 80044a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044aa:	2340      	movs	r3, #64	; 0x40
 80044ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff feec 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80044c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c8:	2119      	movs	r1, #25
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9bc 	bl	8004848 <SDMMC_GetCmdResp1>
 80044d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044d2:	69fb      	ldr	r3, [r7, #28]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044e8:	230c      	movs	r3, #12
 80044ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044ec:	2340      	movs	r3, #64	; 0x40
 80044ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fecb 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004506:	4a05      	ldr	r2, [pc, #20]	; (800451c <SDMMC_CmdStopTransfer+0x40>)
 8004508:	210c      	movs	r1, #12
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f99c 	bl	8004848 <SDMMC_GetCmdResp1>
 8004510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004512:	69fb      	ldr	r3, [r7, #28]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	05f5e100 	.word	0x05f5e100

08004520 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004530:	2307      	movs	r3, #7
 8004532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800453c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004540:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004542:	f107 0310 	add.w	r3, r7, #16
 8004546:	4619      	mov	r1, r3
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fea7 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	2107      	movs	r1, #7
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f977 	bl	8004848 <SDMMC_GetCmdResp1>
 800455a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fe86 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f92d 	bl	80047f0 <SDMMC_GetCmdError>
 8004596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004598:	69fb      	ldr	r3, [r7, #28]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80045aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80045ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80045b0:	2308      	movs	r3, #8
 80045b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045b4:	2340      	movs	r3, #64	; 0x40
 80045b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fe67 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fb24 	bl	8004c1c <SDMMC_GetCmdResp7>
 80045d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045d6:	69fb      	ldr	r3, [r7, #28]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80045ee:	2337      	movs	r3, #55	; 0x37
 80045f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004600:	f107 0308 	add.w	r3, r7, #8
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fe48 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	2137      	movs	r1, #55	; 0x37
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f918 	bl	8004848 <SDMMC_GetCmdResp1>
 8004618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800461a:	69fb      	ldr	r3, [r7, #28]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800463a:	2329      	movs	r3, #41	; 0x29
 800463c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800463e:	2340      	movs	r3, #64	; 0x40
 8004640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800464c:	f107 0308 	add.w	r3, r7, #8
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fe22 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa2b 	bl	8004ab4 <SDMMC_GetCmdResp3>
 800465e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004660:	69fb      	ldr	r3, [r7, #28]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004678:	2306      	movs	r3, #6
 800467a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004688:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fe03 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	2106      	movs	r1, #6
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f8d3 	bl	8004848 <SDMMC_GetCmdResp1>
 80046a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046a4:	69fb      	ldr	r3, [r7, #28]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80046ba:	2333      	movs	r3, #51	; 0x33
 80046bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046be:	2340      	movs	r3, #64	; 0x40
 80046c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fde2 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	2133      	movs	r1, #51	; 0x33
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8b2 	bl	8004848 <SDMMC_GetCmdResp1>
 80046e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80046fc:	2302      	movs	r3, #2
 80046fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004700:	23c0      	movs	r3, #192	; 0xc0
 8004702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800470e:	f107 0308 	add.w	r3, r7, #8
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fdc1 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f982 	bl	8004a24 <SDMMC_GetCmdResp2>
 8004720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004722:	69fb      	ldr	r3, [r7, #28]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3720      	adds	r7, #32
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800473a:	2309      	movs	r3, #9
 800473c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800473e:	23c0      	movs	r3, #192	; 0xc0
 8004740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800474c:	f107 0308 	add.w	r3, r7, #8
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fda2 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f963 	bl	8004a24 <SDMMC_GetCmdResp2>
 800475e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004760:	69fb      	ldr	r3, [r7, #28]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b088      	sub	sp, #32
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004778:	2303      	movs	r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff fd83 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	2103      	movs	r1, #3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9c8 	bl	8004b30 <SDMMC_GetCmdResp6>
 80047a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047a2:	69fb      	ldr	r3, [r7, #28]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80047ba:	230d      	movs	r3, #13
 80047bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fd62 	bl	800429c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	210d      	movs	r1, #13
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f832 	bl	8004848 <SDMMC_GetCmdResp1>
 80047e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047e6:	69fb      	ldr	r3, [r7, #28]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047f8:	4b11      	ldr	r3, [pc, #68]	; (8004840 <SDMMC_GetCmdError+0x50>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <SDMMC_GetCmdError+0x54>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0a5b      	lsrs	r3, r3, #9
 8004804:	f241 3288 	movw	r2, #5000	; 0x1388
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	60fa      	str	r2, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800481c:	e009      	b.n	8004832 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f1      	beq.n	800480e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	22c5      	movs	r2, #197	; 0xc5
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	460b      	mov	r3, r1
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <SDMMC_GetCmdResp1+0x1d0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a70      	ldr	r2, [pc, #448]	; (8004a1c <SDMMC_GetCmdResp1+0x1d4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	0a5a      	lsrs	r2, r3, #9
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	fb02 f303 	mul.w	r3, r2, r3
 8004868:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	1e5a      	subs	r2, r3, #1
 800486e:	61fa      	str	r2, [r7, #28]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004878:	e0c9      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0ef      	beq.n	800486a <SDMMC_GetCmdResp1+0x22>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ea      	bne.n	800486a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2204      	movs	r2, #4
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048a6:	2304      	movs	r3, #4
 80048a8:	e0b1      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0a6      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	22c5      	movs	r2, #197	; 0xc5
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fd12 	bl	80042f0 <SDIO_GetCommandResponse>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d001      	beq.n	80048da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e099      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80048da:	2100      	movs	r1, #0
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fd14 	bl	800430a <SDIO_GetResponse>
 80048e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4b4e      	ldr	r3, [pc, #312]	; (8004a20 <SDMMC_GetCmdResp1+0x1d8>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e08d      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da02      	bge.n	80048fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80048f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fc:	e087      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004908:	2340      	movs	r3, #64	; 0x40
 800490a:	e080      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	e079      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004928:	e071      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004938:	e069      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004948:	e061      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004958:	e059      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004968:	e051      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004978:	e049      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004988:	e041      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004998:	e039      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80049a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a8:	e031      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80049b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049b8:	e029      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80049c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049c8:	e021      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80049d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049d8:	e019      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80049e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049e8:	e011      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80049f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049f8:	e009      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004a04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004a08:	e001      	b.n	8004a0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	10624dd3 	.word	0x10624dd3
 8004a20:	fdffe008 	.word	0xfdffe008

08004a24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <SDMMC_GetCmdResp2+0x88>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <SDMMC_GetCmdResp2+0x8c>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a5b      	lsrs	r3, r3, #9
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a50:	e026      	b.n	8004aa0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <SDMMC_GetCmdResp2+0x1e>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ea      	bne.n	8004a42 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a7e:	2304      	movs	r3, #4
 8004a80:	e00e      	b.n	8004aa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e003      	b.n	8004aa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	22c5      	movs	r2, #197	; 0xc5
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <SDMMC_GetCmdResp3+0x74>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <SDMMC_GetCmdResp3+0x78>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a5b      	lsrs	r3, r3, #9
 8004ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1e5a      	subs	r2, r3, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ae0:	e01b      	b.n	8004b1a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ef      	beq.n	8004ad2 <SDMMC_GetCmdResp3+0x1e>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ea      	bne.n	8004ad2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b0e:	2304      	movs	r3, #4
 8004b10:	e003      	b.n	8004b1a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	22c5      	movs	r2, #197	; 0xc5
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	10624dd3 	.word	0x10624dd3

08004b30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b3e:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <SDMMC_GetCmdResp6+0xe4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a35      	ldr	r2, [pc, #212]	; (8004c18 <SDMMC_GetCmdResp6+0xe8>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b62:	e052      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <SDMMC_GetCmdResp6+0x24>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ea      	bne.n	8004b54 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b90:	2304      	movs	r3, #4
 8004b92:	e03a      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e02f      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff fba0 	bl	80042f0 <SDIO_GetCommandResponse>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d001      	beq.n	8004bbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e025      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	22c5      	movs	r2, #197	; 0xc5
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff fb9f 	bl	800430a <SDIO_GetResponse>
 8004bcc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e011      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bf4:	e009      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c04:	e001      	b.n	8004c0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000
 8004c18:	10624dd3 	.word	0x10624dd3

08004c1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <SDMMC_GetCmdResp7+0x94>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <SDMMC_GetCmdResp7+0x98>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	0a5b      	lsrs	r3, r3, #9
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1e5a      	subs	r2, r3, #1
 8004c3e:	60fa      	str	r2, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c48:	e02c      	b.n	8004ca4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <SDMMC_GetCmdResp7+0x1e>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ea      	bne.n	8004c3a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2204      	movs	r2, #4
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c76:	2304      	movs	r3, #4
 8004c78:	e014      	b.n	8004ca4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e009      	b.n	8004ca4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
  
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	10624dd3 	.word	0x10624dd3

08004cb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004cbc:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <MX_FATFS_Init+0x18>)
 8004cbe:	4805      	ldr	r0, [pc, #20]	; (8004cd4 <MX_FATFS_Init+0x1c>)
 8004cc0:	f002 feae 	bl	8007a20 <FATFS_LinkDriver>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <MX_FATFS_Init+0x20>)
 8004cca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20002234 	.word	0x20002234
 8004cd4:	08008820 	.word	0x08008820
 8004cd8:	20002230 	.word	0x20002230

08004cdc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ce0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004cf6:	f000 f879 	bl	8004dec <BSP_SD_IsDetected>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d001      	beq.n	8004d04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e012      	b.n	8004d2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004d04:	480b      	ldr	r0, [pc, #44]	; (8004d34 <BSP_SD_Init+0x48>)
 8004d06:	f7fd f975 	bl	8001ff4 <HAL_SD_Init>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d18:	4806      	ldr	r0, [pc, #24]	; (8004d34 <BSP_SD_Init+0x48>)
 8004d1a:	f7fd ff4d 	bl	8002bb8 <HAL_SD_ConfigWideBusOperation>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004d28:	79fb      	ldrb	r3, [r7, #7]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20002164 	.word	0x20002164

08004d38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	4806      	ldr	r0, [pc, #24]	; (8004d70 <BSP_SD_ReadBlocks+0x38>)
 8004d56:	f7fd f9fb 	bl	8002150 <HAL_SD_ReadBlocks>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20002164 	.word	0x20002164

08004d74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <BSP_SD_WriteBlocks+0x38>)
 8004d92:	f7fd fbbb 	bl	800250c <HAL_SD_WriteBlocks>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20002164 	.word	0x20002164

08004db0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004db4:	4805      	ldr	r0, [pc, #20]	; (8004dcc <BSP_SD_GetCardState+0x1c>)
 8004db6:	f7fd ff99 	bl	8002cec <HAL_SD_GetCardState>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20002164 	.word	0x20002164

08004dd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4803      	ldr	r0, [pc, #12]	; (8004de8 <BSP_SD_GetCardInfo+0x18>)
 8004ddc:	f7fd fec0 	bl	8002b60 <HAL_SD_GetCardInfo>
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20002164 	.word	0x20002164

08004dec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004df2:	2301      	movs	r3, #1
 8004df4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	b2db      	uxtb	r3, r3
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <SD_CheckStatus+0x38>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004e18:	f7ff ffca 	bl	8004db0 <BSP_SD_GetCardState>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <SD_CheckStatus+0x38>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <SD_CheckStatus+0x38>)
 8004e30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004e32:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <SD_CheckStatus+0x38>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000009 	.word	0x20000009

08004e44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <SD_initialize+0x38>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004e54:	f7ff ff4a 	bl	8004cec <BSP_SD_Init>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d107      	bne.n	8004e6e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff ffd1 	bl	8004e08 <SD_CheckStatus>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <SD_initialize+0x38>)
 8004e6c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <SD_initialize+0x38>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b2db      	uxtb	r3, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000009 	.word	0x20000009

08004e80 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ffbb 	bl	8004e08 <SD_CheckStatus>
 8004e92:	4603      	mov	r3, r0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f7ff ff3d 	bl	8004d38 <BSP_SD_ReadBlocks>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004ec4:	bf00      	nop
 8004ec6:	f7ff ff73 	bl	8004db0 <BSP_SD_GetCardState>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1fa      	bne.n	8004ec6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f7ff ff3a 	bl	8004d74 <BSP_SD_WriteBlocks>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004f06:	bf00      	nop
 8004f08:	f7ff ff52 	bl	8004db0 <BSP_SD_GetCardState>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1fa      	bne.n	8004f08 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	603a      	str	r2, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004f36:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <SD_ioctl+0xac>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <SD_ioctl+0x28>
 8004f44:	2303      	movs	r3, #3
 8004f46:	e03c      	b.n	8004fc2 <SD_ioctl+0xa2>

  switch (cmd)
 8004f48:	79bb      	ldrb	r3, [r7, #6]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d834      	bhi.n	8004fb8 <SD_ioctl+0x98>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <SD_ioctl+0x34>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f6d 	.word	0x08004f6d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f9f 	.word	0x08004f9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f6a:	e028      	b.n	8004fbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ff2d 	bl	8004dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f82:	e01c      	b.n	8004fbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f84:	f107 030c 	add.w	r3, r7, #12
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff21 	bl	8004dd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004f9c:	e00f      	b.n	8004fbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff ff14 	bl	8004dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	0a5a      	lsrs	r2, r3, #9
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004fb6:	e002      	b.n	8004fbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004fb8:	2304      	movs	r3, #4
 8004fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3730      	adds	r7, #48	; 0x30
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000009 	.word	0x20000009

08004fd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <disk_status+0x30>)
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	79fa      	ldrb	r2, [r7, #7]
 8004fe8:	4905      	ldr	r1, [pc, #20]	; (8005000 <disk_status+0x30>)
 8004fea:	440a      	add	r2, r1
 8004fec:	7a12      	ldrb	r2, [r2, #8]
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4798      	blx	r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	200000b8 	.word	0x200000b8

08005004 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	4a0d      	ldr	r2, [pc, #52]	; (800504c <disk_initialize+0x48>)
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d111      	bne.n	8005040 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	4a0b      	ldr	r2, [pc, #44]	; (800504c <disk_initialize+0x48>)
 8005020:	2101      	movs	r1, #1
 8005022:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <disk_initialize+0x48>)
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	79fa      	ldrb	r2, [r7, #7]
 8005032:	4906      	ldr	r1, [pc, #24]	; (800504c <disk_initialize+0x48>)
 8005034:	440a      	add	r2, r1
 8005036:	7a12      	ldrb	r2, [r2, #8]
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200000b8 	.word	0x200000b8

08005050 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <disk_read+0x3c>)
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	689c      	ldr	r4, [r3, #8]
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <disk_read+0x3c>)
 8005070:	4413      	add	r3, r2
 8005072:	7a18      	ldrb	r0, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	47a0      	blx	r4
 800507c:	4603      	mov	r3, r0
 800507e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
}
 8005082:	4618      	mov	r0, r3
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	bf00      	nop
 800508c:	200000b8 	.word	0x200000b8

08005090 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <disk_write+0x3c>)
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68dc      	ldr	r4, [r3, #12]
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	4a07      	ldr	r2, [pc, #28]	; (80050cc <disk_write+0x3c>)
 80050b0:	4413      	add	r3, r2
 80050b2:	7a18      	ldrb	r0, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	47a0      	blx	r4
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
  return res;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd90      	pop	{r4, r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200000b8 	.word	0x200000b8

080050d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	603a      	str	r2, [r7, #0]
 80050da:	71fb      	strb	r3, [r7, #7]
 80050dc:	460b      	mov	r3, r1
 80050de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <disk_ioctl+0x38>)
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	79fa      	ldrb	r2, [r7, #7]
 80050ee:	4906      	ldr	r1, [pc, #24]	; (8005108 <disk_ioctl+0x38>)
 80050f0:	440a      	add	r2, r1
 80050f2:	7a10      	ldrb	r0, [r2, #8]
 80050f4:	79b9      	ldrb	r1, [r7, #6]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	4798      	blx	r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200000b8 	.word	0x200000b8

0800510c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3301      	adds	r3, #1
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	b21a      	sxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b21b      	sxth	r3, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	b21b      	sxth	r3, r3
 800512c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800512e:	89fb      	ldrh	r3, [r7, #14]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3303      	adds	r3, #3
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	3202      	adds	r2, #2
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	3201      	adds	r2, #1
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
	return rv;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	887a      	ldrh	r2, [r7, #2]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	1c53      	adds	r3, r2, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	6179      	str	r1, [r7, #20]
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3b01      	subs	r3, #1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f1      	bne.n	800522a <mem_cpy+0x1a>
	}
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	617a      	str	r2, [r7, #20]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f3      	bne.n	8005262 <mem_set+0x10>
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	61fa      	str	r2, [r7, #28]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	61ba      	str	r2, [r7, #24]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	1acb      	subs	r3, r1, r3
 80052b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <mem_cmp+0x40>
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0eb      	beq.n	80052a0 <mem_cmp+0x18>

	return r;
 80052c8:	697b      	ldr	r3, [r7, #20]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80052e0:	e002      	b.n	80052e8 <chk_chr+0x12>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3301      	adds	r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <chk_chr+0x26>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d1f2      	bne.n	80052e2 <chk_chr+0xc>
	return *str;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	781b      	ldrb	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e029      	b.n	8005374 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <chk_lock+0xb4>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	4413      	add	r3, r2
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01d      	beq.n	800536a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800532e:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <chk_lock+0xb4>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	4413      	add	r3, r2
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d116      	bne.n	800536e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <chk_lock+0xb4>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4413      	add	r3, r2
 8005348:	3304      	adds	r3, #4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005350:	429a      	cmp	r2, r3
 8005352:	d10c      	bne.n	800536e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005354:	4a1a      	ldr	r2, [pc, #104]	; (80053c0 <chk_lock+0xb4>)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	4413      	add	r3, r2
 800535c:	3308      	adds	r3, #8
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005364:	429a      	cmp	r2, r3
 8005366:	d102      	bne.n	800536e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005368:	e007      	b.n	800537a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800536a:	2301      	movs	r3, #1
 800536c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d9d2      	bls.n	8005320 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d109      	bne.n	8005394 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <chk_lock+0x80>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d101      	bne.n	8005390 <chk_lock+0x84>
 800538c:	2300      	movs	r3, #0
 800538e:	e010      	b.n	80053b2 <chk_lock+0xa6>
 8005390:	2312      	movs	r3, #18
 8005392:	e00e      	b.n	80053b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <chk_lock+0xa0>
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <chk_lock+0xb4>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	4413      	add	r3, r2
 80053a2:	330c      	adds	r3, #12
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d101      	bne.n	80053b0 <chk_lock+0xa4>
 80053ac:	2310      	movs	r3, #16
 80053ae:	e000      	b.n	80053b2 <chk_lock+0xa6>
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000098 	.word	0x20000098

080053c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	e002      	b.n	80053d6 <enq_lock+0x12>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3301      	adds	r3, #1
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d806      	bhi.n	80053ea <enq_lock+0x26>
 80053dc:	4a09      	ldr	r2, [pc, #36]	; (8005404 <enq_lock+0x40>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	4413      	add	r3, r2
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000098 	.word	0x20000098

08005408 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e01f      	b.n	8005458 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005418:	4a41      	ldr	r2, [pc, #260]	; (8005520 <inc_lock+0x118>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d113      	bne.n	8005452 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800542a:	4a3d      	ldr	r2, [pc, #244]	; (8005520 <inc_lock+0x118>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800543a:	429a      	cmp	r2, r3
 800543c:	d109      	bne.n	8005452 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800543e:	4a38      	ldr	r2, [pc, #224]	; (8005520 <inc_lock+0x118>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	4413      	add	r3, r2
 8005446:	3308      	adds	r3, #8
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800544e:	429a      	cmp	r2, r3
 8005450:	d006      	beq.n	8005460 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d9dc      	bls.n	8005418 <inc_lock+0x10>
 800545e:	e000      	b.n	8005462 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005460:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d132      	bne.n	80054ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e002      	b.n	8005474 <inc_lock+0x6c>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d806      	bhi.n	8005488 <inc_lock+0x80>
 800547a:	4a29      	ldr	r2, [pc, #164]	; (8005520 <inc_lock+0x118>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	4413      	add	r3, r2
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f2      	bne.n	800546e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d101      	bne.n	8005492 <inc_lock+0x8a>
 800548e:	2300      	movs	r3, #0
 8005490:	e040      	b.n	8005514 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4922      	ldr	r1, [pc, #136]	; (8005520 <inc_lock+0x118>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	440b      	add	r3, r1
 800549e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	491e      	ldr	r1, [pc, #120]	; (8005520 <inc_lock+0x118>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	440b      	add	r3, r1
 80054ac:	3304      	adds	r3, #4
 80054ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	491a      	ldr	r1, [pc, #104]	; (8005520 <inc_lock+0x118>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	440b      	add	r3, r1
 80054bc:	3308      	adds	r3, #8
 80054be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <inc_lock+0x118>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	4413      	add	r3, r2
 80054c8:	330c      	adds	r3, #12
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <inc_lock+0xe0>
 80054d4:	4a12      	ldr	r2, [pc, #72]	; (8005520 <inc_lock+0x118>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	4413      	add	r3, r2
 80054dc:	330c      	adds	r3, #12
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <inc_lock+0xe0>
 80054e4:	2300      	movs	r3, #0
 80054e6:	e015      	b.n	8005514 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <inc_lock+0xf8>
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <inc_lock+0x118>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	4413      	add	r3, r2
 80054f6:	330c      	adds	r3, #12
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	e001      	b.n	8005504 <inc_lock+0xfc>
 8005500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005504:	4906      	ldr	r1, [pc, #24]	; (8005520 <inc_lock+0x118>)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	440b      	add	r3, r1
 800550c:	330c      	adds	r3, #12
 800550e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	20000098 	.word	0x20000098

08005524 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d825      	bhi.n	8005584 <dec_lock+0x60>
		n = Files[i].ctr;
 8005538:	4a17      	ldr	r2, [pc, #92]	; (8005598 <dec_lock+0x74>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	4413      	add	r3, r2
 8005540:	330c      	adds	r3, #12
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554c:	d101      	bne.n	8005552 <dec_lock+0x2e>
 800554e:	2300      	movs	r3, #0
 8005550:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <dec_lock+0x3a>
 8005558:	89fb      	ldrh	r3, [r7, #14]
 800555a:	3b01      	subs	r3, #1
 800555c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800555e:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <dec_lock+0x74>)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	4413      	add	r3, r2
 8005566:	330c      	adds	r3, #12
 8005568:	89fa      	ldrh	r2, [r7, #14]
 800556a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <dec_lock+0x5a>
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <dec_lock+0x74>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	4413      	add	r3, r2
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	737b      	strb	r3, [r7, #13]
 8005582:	e001      	b.n	8005588 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005584:	2302      	movs	r3, #2
 8005586:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005588:	7b7b      	ldrb	r3, [r7, #13]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000098 	.word	0x20000098

0800559c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e010      	b.n	80055cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055aa:	4a0d      	ldr	r2, [pc, #52]	; (80055e0 <clear_lock+0x44>)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4413      	add	r3, r2
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d105      	bne.n	80055c6 <clear_lock+0x2a>
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <clear_lock+0x44>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	4413      	add	r3, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d9eb      	bls.n	80055aa <clear_lock+0xe>
	}
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000098 	.word	0x20000098

080055e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	78db      	ldrb	r3, [r3, #3]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d034      	beq.n	8005662 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7858      	ldrb	r0, [r3, #1]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005608:	2301      	movs	r3, #1
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	f7ff fd40 	bl	8005090 <disk_write>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	e022      	b.n	8005662 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	1ad2      	subs	r2, r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	429a      	cmp	r2, r3
 8005630:	d217      	bcs.n	8005662 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	789b      	ldrb	r3, [r3, #2]
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e010      	b.n	800565c <sync_window+0x78>
					wsect += fs->fsize;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4413      	add	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7858      	ldrb	r0, [r3, #1]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800564e:	2301      	movs	r3, #1
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	f7ff fd1d 	bl	8005090 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3b01      	subs	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d8eb      	bhi.n	800563a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005662:	7bfb      	ldrb	r3, [r7, #15]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d01b      	beq.n	80056bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ffad 	bl	80055e4 <sync_window>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d113      	bne.n	80056bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	7858      	ldrb	r0, [r3, #1]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800569e:	2301      	movs	r3, #1
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	f7ff fcd5 	bl	8005050 <disk_read>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff87 	bl	80055e4 <sync_window>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d159      	bne.n	8005794 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d149      	bne.n	800577c <sync_fs+0xb4>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	791b      	ldrb	r3, [r3, #4]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d145      	bne.n	800577c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	899b      	ldrh	r3, [r3, #12]
 80056fa:	461a      	mov	r2, r3
 80056fc:	2100      	movs	r1, #0
 80056fe:	f7ff fda8 	bl	8005252 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3334      	adds	r3, #52	; 0x34
 8005706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800570a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fd37 	bl	8005182 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3334      	adds	r3, #52	; 0x34
 8005718:	4921      	ldr	r1, [pc, #132]	; (80057a0 <sync_fs+0xd8>)
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fd4c 	bl	80051b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3334      	adds	r3, #52	; 0x34
 8005724:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005728:	491e      	ldr	r1, [pc, #120]	; (80057a4 <sync_fs+0xdc>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fd44 	bl	80051b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3334      	adds	r3, #52	; 0x34
 8005734:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	4610      	mov	r0, r2
 8005740:	f7ff fd3a 	bl	80051b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3334      	adds	r3, #52	; 0x34
 8005748:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f7ff fd30 	bl	80051b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7858      	ldrb	r0, [r3, #1]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005770:	2301      	movs	r3, #1
 8005772:	f7ff fc8d 	bl	8005090 <disk_write>
			fs->fsi_flag = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2200      	movs	r2, #0
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fca3 	bl	80050d0 <disk_ioctl>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <sync_fs+0xcc>
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	41615252 	.word	0x41615252
 80057a4:	61417272 	.word	0x61417272

080057a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3b02      	subs	r3, #2
 80057b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	3b02      	subs	r3, #2
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d301      	bcc.n	80057c8 <clust2sect+0x20>
 80057c4:	2300      	movs	r3, #0
 80057c6:	e008      	b.n	80057da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	895b      	ldrh	r3, [r3, #10]
 80057cc:	461a      	mov	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	fb03 f202 	mul.w	r2, r3, r2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4413      	add	r3, r2
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d904      	bls.n	8005806 <get_fat+0x20>
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e0bb      	b.n	8005984 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800580c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005810:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b03      	cmp	r3, #3
 8005818:	f000 8083 	beq.w	8005922 <get_fat+0x13c>
 800581c:	2b03      	cmp	r3, #3
 800581e:	f300 80a7 	bgt.w	8005970 <get_fat+0x18a>
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <get_fat+0x46>
 8005826:	2b02      	cmp	r3, #2
 8005828:	d056      	beq.n	80058d8 <get_fat+0xf2>
 800582a:	e0a1      	b.n	8005970 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	899b      	ldrh	r3, [r3, #12]
 8005842:	4619      	mov	r1, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	fbb3 f3f1 	udiv	r3, r3, r1
 800584a:	4413      	add	r3, r2
 800584c:	4619      	mov	r1, r3
 800584e:	6938      	ldr	r0, [r7, #16]
 8005850:	f7ff ff0c 	bl	800566c <move_window>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	f040 808d 	bne.w	8005976 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	60fa      	str	r2, [r7, #12]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	8992      	ldrh	r2, [r2, #12]
 8005866:	fbb3 f1f2 	udiv	r1, r3, r2
 800586a:	fb02 f201 	mul.w	r2, r2, r1
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4413      	add	r3, r2
 8005874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005878:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	899b      	ldrh	r3, [r3, #12]
 8005882:	4619      	mov	r1, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	fbb3 f3f1 	udiv	r3, r3, r1
 800588a:	4413      	add	r3, r2
 800588c:	4619      	mov	r1, r3
 800588e:	6938      	ldr	r0, [r7, #16]
 8005890:	f7ff feec 	bl	800566c <move_window>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16f      	bne.n	800597a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	899b      	ldrh	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80058a6:	fb02 f201 	mul.w	r2, r2, r1
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	461a      	mov	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <get_fat+0xe8>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	e002      	b.n	80058d4 <get_fat+0xee>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	617b      	str	r3, [r7, #20]
			break;
 80058d6:	e055      	b.n	8005984 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	899b      	ldrh	r3, [r3, #12]
 80058e0:	085b      	lsrs	r3, r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	4619      	mov	r1, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ec:	4413      	add	r3, r2
 80058ee:	4619      	mov	r1, r3
 80058f0:	6938      	ldr	r0, [r7, #16]
 80058f2:	f7ff febb 	bl	800566c <move_window>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d140      	bne.n	800597e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	8992      	ldrh	r2, [r2, #12]
 800590a:	fbb3 f0f2 	udiv	r0, r3, r2
 800590e:	fb02 f200 	mul.w	r2, r2, r0
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	440b      	add	r3, r1
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fbf8 	bl	800510c <ld_word>
 800591c:	4603      	mov	r3, r0
 800591e:	617b      	str	r3, [r7, #20]
			break;
 8005920:	e030      	b.n	8005984 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	899b      	ldrh	r3, [r3, #12]
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	b29b      	uxth	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	fbb3 f3f1 	udiv	r3, r3, r1
 8005936:	4413      	add	r3, r2
 8005938:	4619      	mov	r1, r3
 800593a:	6938      	ldr	r0, [r7, #16]
 800593c:	f7ff fe96 	bl	800566c <move_window>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11d      	bne.n	8005982 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	8992      	ldrh	r2, [r2, #12]
 8005954:	fbb3 f0f2 	udiv	r0, r3, r2
 8005958:	fb02 f200 	mul.w	r2, r2, r0
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	440b      	add	r3, r1
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fbeb 	bl	800513c <ld_dword>
 8005966:	4603      	mov	r3, r0
 8005968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596c:	617b      	str	r3, [r7, #20]
			break;
 800596e:	e009      	b.n	8005984 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e006      	b.n	8005984 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005982:	bf00      	nop
		}
	}

	return val;
 8005984:	697b      	ldr	r3, [r7, #20]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800598e:	b590      	push	{r4, r7, lr}
 8005990:	b089      	sub	sp, #36	; 0x24
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800599a:	2302      	movs	r3, #2
 800599c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f240 8102 	bls.w	8005baa <put_fat+0x21c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f080 80fc 	bcs.w	8005baa <put_fat+0x21c>
		switch (fs->fs_type) {
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	f000 80b6 	beq.w	8005b28 <put_fat+0x19a>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	f300 80fd 	bgt.w	8005bbc <put_fat+0x22e>
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d003      	beq.n	80059ce <put_fat+0x40>
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	f000 8083 	beq.w	8005ad2 <put_fat+0x144>
 80059cc:	e0f6      	b.n	8005bbc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4413      	add	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	899b      	ldrh	r3, [r3, #12]
 80059e4:	4619      	mov	r1, r3
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ec:	4413      	add	r3, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff fe3b 	bl	800566c <move_window>
 80059f6:	4603      	mov	r3, r0
 80059f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059fa:	7ffb      	ldrb	r3, [r7, #31]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f040 80d6 	bne.w	8005bae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	61ba      	str	r2, [r7, #24]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	8992      	ldrh	r2, [r2, #12]
 8005a12:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a16:	fb02 f200 	mul.w	r2, r2, r0
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <put_fat+0xb8>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	b25a      	sxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e001      	b.n	8005a4a <put_fat+0xbc>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	899b      	ldrh	r3, [r3, #12]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a64:	4413      	add	r3, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff fdff 	bl	800566c <move_window>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a72:	7ffb      	ldrb	r3, [r7, #31]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 809c 	bne.w	8005bb2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	899b      	ldrh	r3, [r3, #12]
 8005a84:	461a      	mov	r2, r3
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a8c:	fb02 f200 	mul.w	r2, r2, r0
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	440b      	add	r3, r1
 8005a94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <put_fat+0x11a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e00e      	b.n	8005ac6 <put_fat+0x138>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	f023 030f 	bic.w	r3, r3, #15
 8005ab2:	b25a      	sxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0a1b      	lsrs	r3, r3, #8
 8005ab8:	b25b      	sxtb	r3, r3
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	70da      	strb	r2, [r3, #3]
			break;
 8005ad0:	e074      	b.n	8005bbc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	899b      	ldrh	r3, [r3, #12]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fdbe 	bl	800566c <move_window>
 8005af0:	4603      	mov	r3, r0
 8005af2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005af4:	7ffb      	ldrb	r3, [r7, #31]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d15d      	bne.n	8005bb6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	8992      	ldrh	r2, [r2, #12]
 8005b08:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b0c:	fb02 f200 	mul.w	r2, r2, r0
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	440b      	add	r3, r1
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	b292      	uxth	r2, r2
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fb31 	bl	8005182 <st_word>
			fs->wflag = 1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	70da      	strb	r2, [r3, #3]
			break;
 8005b26:	e049      	b.n	8005bbc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	899b      	ldrh	r3, [r3, #12]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4619      	mov	r1, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff fd93 	bl	800566c <move_window>
 8005b46:	4603      	mov	r3, r0
 8005b48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b4a:	7ffb      	ldrb	r3, [r7, #31]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d134      	bne.n	8005bba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	8992      	ldrh	r2, [r2, #12]
 8005b64:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b68:	fb02 f200 	mul.w	r2, r2, r0
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	440b      	add	r3, r1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fae3 	bl	800513c <ld_dword>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b7c:	4323      	orrs	r3, r4
 8005b7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	8992      	ldrh	r2, [r2, #12]
 8005b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b92:	fb02 f200 	mul.w	r2, r2, r0
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fb0b 	bl	80051b8 <st_dword>
			fs->wflag = 1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	70da      	strb	r2, [r3, #3]
			break;
 8005ba8:	e008      	b.n	8005bbc <put_fat+0x22e>
		}
	}
 8005baa:	bf00      	nop
 8005bac:	e006      	b.n	8005bbc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005bae:	bf00      	nop
 8005bb0:	e004      	b.n	8005bbc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005bb2:	bf00      	nop
 8005bb4:	e002      	b.n	8005bbc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005bb6:	bf00      	nop
 8005bb8:	e000      	b.n	8005bbc <put_fat+0x22e>
			if (res != FR_OK) break;
 8005bba:	bf00      	nop
	return res;
 8005bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	; 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}

08005bc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b088      	sub	sp, #32
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d904      	bls.n	8005bec <remove_chain+0x26>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d301      	bcc.n	8005bf0 <remove_chain+0x2a>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e04b      	b.n	8005c88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	69b8      	ldr	r0, [r7, #24]
 8005bfe:	f7ff fec6 	bl	800598e <put_fat>
 8005c02:	4603      	mov	r3, r0
 8005c04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <remove_chain+0x4a>
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
 8005c0e:	e03b      	b.n	8005c88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fde7 	bl	80057e6 <get_fat>
 8005c18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d031      	beq.n	8005c84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <remove_chain+0x64>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e02e      	b.n	8005c88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c30:	d101      	bne.n	8005c36 <remove_chain+0x70>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e028      	b.n	8005c88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c36:	2200      	movs	r2, #0
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	f7ff fea7 	bl	800598e <put_fat>
 8005c40:	4603      	mov	r3, r0
 8005c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <remove_chain+0x88>
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
 8005c4c:	e01c      	b.n	8005c88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	3b02      	subs	r3, #2
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d20b      	bcs.n	8005c74 <remove_chain+0xae>
			fs->free_clst++;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	791b      	ldrb	r3, [r3, #4]
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3c6      	bcc.n	8005c10 <remove_chain+0x4a>
 8005c82:	e000      	b.n	8005c86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <create_chain+0x2c>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d31b      	bcc.n	8005cf4 <create_chain+0x64>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	e018      	b.n	8005cf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fd8e 	bl	80057e6 <get_fat>
 8005cca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d801      	bhi.n	8005cd6 <create_chain+0x46>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e070      	b.n	8005db8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cdc:	d101      	bne.n	8005ce2 <create_chain+0x52>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	e06a      	b.n	8005db8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d201      	bcs.n	8005cf0 <create_chain+0x60>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e063      	b.n	8005db8 <create_chain+0x128>
		scl = clst;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d307      	bcc.n	8005d18 <create_chain+0x88>
				ncl = 2;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d901      	bls.n	8005d18 <create_chain+0x88>
 8005d14:	2300      	movs	r3, #0
 8005d16:	e04f      	b.n	8005db8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d18:	69f9      	ldr	r1, [r7, #28]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fd63 	bl	80057e6 <get_fat>
 8005d20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d003      	beq.n	8005d36 <create_chain+0xa6>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d34:	d101      	bne.n	8005d3a <create_chain+0xaa>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	e03e      	b.n	8005db8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d1da      	bne.n	8005cf8 <create_chain+0x68>
 8005d42:	2300      	movs	r3, #0
 8005d44:	e038      	b.n	8005db8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005d46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d4c:	69f9      	ldr	r1, [r7, #28]
 8005d4e:	6938      	ldr	r0, [r7, #16]
 8005d50:	f7ff fe1d 	bl	800598e <put_fat>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <create_chain+0xe2>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d006      	beq.n	8005d72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6938      	ldr	r0, [r7, #16]
 8005d6a:	f7ff fe10 	bl	800598e <put_fat>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <create_chain+0x116>
		fs->last_clst = ncl;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	3b02      	subs	r3, #2
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d804      	bhi.n	8005d96 <create_chain+0x106>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	791b      	ldrb	r3, [r3, #4]
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	711a      	strb	r2, [r3, #4]
 8005da4:	e007      	b.n	8005db6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <create_chain+0x122>
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db0:	e000      	b.n	8005db4 <create_chain+0x124>
 8005db2:	2301      	movs	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005db6:	69fb      	ldr	r3, [r7, #28]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	899b      	ldrh	r3, [r3, #12]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	8952      	ldrh	r2, [r2, #10]
 8005de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	613a      	str	r2, [r7, #16]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <clmt_clust+0x42>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e010      	b.n	8005e24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d307      	bcc.n	8005e1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3304      	adds	r3, #4
 8005e16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e18:	e7e9      	b.n	8005dee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005e1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e46:	d204      	bcs.n	8005e52 <dir_sdi+0x22>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005e52:	2302      	movs	r3, #2
 8005e54:	e071      	b.n	8005f3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <dir_sdi+0x46>
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d902      	bls.n	8005e76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10c      	bne.n	8005e96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	8912      	ldrh	r2, [r2, #8]
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d301      	bcc.n	8005e8c <dir_sdi+0x5c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e056      	b.n	8005f3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	61da      	str	r2, [r3, #28]
 8005e94:	e02d      	b.n	8005ef2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	895b      	ldrh	r3, [r3, #10]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	899b      	ldrh	r3, [r3, #12]
 8005ea0:	fb03 f302 	mul.w	r3, r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ea6:	e019      	b.n	8005edc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6979      	ldr	r1, [r7, #20]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fc9a 	bl	80057e6 <get_fat>
 8005eb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eba:	d101      	bne.n	8005ec0 <dir_sdi+0x90>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e03c      	b.n	8005f3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d904      	bls.n	8005ed0 <dir_sdi+0xa0>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d301      	bcc.n	8005ed4 <dir_sdi+0xa4>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e032      	b.n	8005f3a <dir_sdi+0x10a>
			ofs -= csz;
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d2e1      	bcs.n	8005ea8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	f7ff fc5e 	bl	80057a8 <clust2sect>
 8005eec:	4602      	mov	r2, r0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <dir_sdi+0xd4>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e01a      	b.n	8005f3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	899b      	ldrh	r3, [r3, #12]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	899b      	ldrh	r3, [r3, #12]
 8005f24:	461a      	mov	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f2c:	fb02 f200 	mul.w	r2, r2, r0
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	18ca      	adds	r2, r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	3320      	adds	r3, #32
 8005f58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <dir_next+0x28>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f68:	d301      	bcc.n	8005f6e <dir_next+0x2c>
 8005f6a:	2304      	movs	r3, #4
 8005f6c:	e0bb      	b.n	80060e6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	899b      	ldrh	r3, [r3, #12]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f7a:	fb02 f201 	mul.w	r2, r2, r1
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f040 809d 	bne.w	80060c0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	8912      	ldrh	r2, [r2, #8]
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f0c0 808d 	bcc.w	80060c0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61da      	str	r2, [r3, #28]
 8005fac:	2304      	movs	r3, #4
 8005fae:	e09a      	b.n	80060e6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	899b      	ldrh	r3, [r3, #12]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	8952      	ldrh	r2, [r2, #10]
 8005fc0:	3a01      	subs	r2, #1
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d17b      	bne.n	80060c0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f7ff fc08 	bl	80057e6 <get_fat>
 8005fd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d801      	bhi.n	8005fe2 <dir_next+0xa0>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e081      	b.n	80060e6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d101      	bne.n	8005fee <dir_next+0xac>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07b      	b.n	80060e6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d359      	bcc.n	80060ac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d104      	bne.n	8006008 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	61da      	str	r2, [r3, #28]
 8006004:	2304      	movs	r3, #4
 8006006:	e06e      	b.n	80060e6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7ff fe3d 	bl	8005c90 <create_chain>
 8006016:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <dir_next+0xe0>
 800601e:	2307      	movs	r3, #7
 8006020:	e061      	b.n	80060e6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <dir_next+0xea>
 8006028:	2302      	movs	r3, #2
 800602a:	e05c      	b.n	80060e6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006032:	d101      	bne.n	8006038 <dir_next+0xf6>
 8006034:	2301      	movs	r3, #1
 8006036:	e056      	b.n	80060e6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff fad3 	bl	80055e4 <sync_window>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <dir_next+0x106>
 8006044:	2301      	movs	r3, #1
 8006046:	e04e      	b.n	80060e6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	899b      	ldrh	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	2100      	movs	r1, #0
 8006056:	f7ff f8fc 	bl	8005252 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fba1 	bl	80057a8 <clust2sect>
 8006066:	4602      	mov	r2, r0
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
 800606c:	e012      	b.n	8006094 <dir_next+0x152>
						fs->wflag = 1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fab5 	bl	80055e4 <sync_window>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <dir_next+0x142>
 8006080:	2301      	movs	r3, #1
 8006082:	e030      	b.n	80060e6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	3301      	adds	r3, #1
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	895b      	ldrh	r3, [r3, #10]
 8006098:	461a      	mov	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4293      	cmp	r3, r2
 800609e:	d3e6      	bcc.n	800606e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80060b2:	6979      	ldr	r1, [r7, #20]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff fb77 	bl	80057a8 <clust2sect>
 80060ba:	4602      	mov	r2, r0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	899b      	ldrh	r3, [r3, #12]
 80060d0:	461a      	mov	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80060d8:	fb02 f200 	mul.w	r2, r2, r0
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	18ca      	adds	r2, r1, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80060fe:	2100      	movs	r1, #0
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fe95 	bl	8005e30 <dir_sdi>
 8006106:	4603      	mov	r3, r0
 8006108:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d12b      	bne.n	8006168 <dir_alloc+0x7a>
		n = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	4619      	mov	r1, r3
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff faa6 	bl	800566c <move_window>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d11d      	bne.n	8006166 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2be5      	cmp	r3, #229	; 0xe5
 8006132:	d004      	beq.n	800613e <dir_alloc+0x50>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d107      	bne.n	800614e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3301      	adds	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d102      	bne.n	8006152 <dir_alloc+0x64>
 800614c:	e00c      	b.n	8006168 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006152:	2101      	movs	r1, #1
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff fef4 	bl	8005f42 <dir_next>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0d7      	beq.n	8006114 <dir_alloc+0x26>
 8006164:	e000      	b.n	8006168 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006166:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d101      	bne.n	8006172 <dir_alloc+0x84>
 800616e:	2307      	movs	r3, #7
 8006170:	75fb      	strb	r3, [r7, #23]
	return res;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	331a      	adds	r3, #26
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe ffbe 	bl	800510c <ld_word>
 8006190:	4603      	mov	r3, r0
 8006192:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d109      	bne.n	80061b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3314      	adds	r3, #20
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe ffb3 	bl	800510c <ld_word>
 80061a6:	4603      	mov	r3, r0
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	331a      	adds	r3, #26
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	b292      	uxth	r2, r2
 80061ce:	4611      	mov	r1, r2
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe ffd6 	bl	8005182 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d109      	bne.n	80061f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f103 0214 	add.w	r2, r3, #20
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fe ffc8 	bl	8005182 <st_word>
	}
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006204:	2304      	movs	r3, #4
 8006206:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800620e:	e03c      	b.n	800628a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4619      	mov	r1, r3
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f7ff fa28 	bl	800566c <move_window>
 800621c:	4603      	mov	r3, r0
 800621e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d136      	bne.n	8006294 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006234:	2304      	movs	r3, #4
 8006236:	75fb      	strb	r3, [r7, #23]
 8006238:	e031      	b.n	800629e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	330b      	adds	r3, #11
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006246:	73bb      	strb	r3, [r7, #14]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	7bba      	ldrb	r2, [r7, #14]
 800624c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	2be5      	cmp	r3, #229	; 0xe5
 8006252:	d011      	beq.n	8006278 <dir_read+0x7e>
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b2e      	cmp	r3, #46	; 0x2e
 8006258:	d00e      	beq.n	8006278 <dir_read+0x7e>
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d00b      	beq.n	8006278 <dir_read+0x7e>
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	f023 0320 	bic.w	r3, r3, #32
 8006266:	2b08      	cmp	r3, #8
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	4293      	cmp	r3, r2
 8006276:	d00f      	beq.n	8006298 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006278:	2100      	movs	r1, #0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fe61 	bl	8005f42 <dir_next>
 8006280:	4603      	mov	r3, r0
 8006282:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d108      	bne.n	800629c <dir_read+0xa2>
	while (dp->sect) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1be      	bne.n	8006210 <dir_read+0x16>
 8006292:	e004      	b.n	800629e <dir_read+0xa4>
		if (res != FR_OK) break;
 8006294:	bf00      	nop
 8006296:	e002      	b.n	800629e <dir_read+0xa4>
				break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <dir_read+0xa4>
		if (res != FR_OK) break;
 800629c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <dir_read+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	61da      	str	r2, [r3, #28]
	return res;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062c2:	2100      	movs	r1, #0
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fdb3 	bl	8005e30 <dir_sdi>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <dir_find+0x24>
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	e03e      	b.n	8006356 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	4619      	mov	r1, r3
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f7ff f9c4 	bl	800566c <move_window>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d12f      	bne.n	800634e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <dir_find+0x4e>
 80062fc:	2304      	movs	r3, #4
 80062fe:	75fb      	strb	r3, [r7, #23]
 8006300:	e028      	b.n	8006354 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	330b      	adds	r3, #11
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	330b      	adds	r3, #11
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <dir_find+0x86>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a18      	ldr	r0, [r3, #32]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3324      	adds	r3, #36	; 0x24
 800632c:	220b      	movs	r2, #11
 800632e:	4619      	mov	r1, r3
 8006330:	f7fe ffaa 	bl	8005288 <mem_cmp>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800633a:	2100      	movs	r1, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fe00 	bl	8005f42 <dir_next>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0c5      	beq.n	80062d8 <dir_find+0x24>
 800634c:	e002      	b.n	8006354 <dir_find+0xa0>
		if (res != FR_OK) break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006352:	bf00      	nop

	return res;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800636c:	2101      	movs	r1, #1
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff febd 	bl	80060ee <dir_alloc>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d11c      	bne.n	80063b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	4619      	mov	r1, r3
 8006384:	68b8      	ldr	r0, [r7, #8]
 8006386:	f7ff f971 	bl	800566c <move_window>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d111      	bne.n	80063b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	2220      	movs	r2, #32
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe ff58 	bl	8005252 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a18      	ldr	r0, [r3, #32]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3324      	adds	r3, #36	; 0x24
 80063aa:	220b      	movs	r2, #11
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fe ff2f 	bl	8005210 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2201      	movs	r2, #1
 80063b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4619      	mov	r1, r3
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f7ff f948 	bl	800566c <move_window>
 80063dc:	4603      	mov	r3, r0
 80063de:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	22e5      	movs	r2, #229	; 0xe5
 80063ec:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80063f4:	7afb      	ldrb	r3, [r7, #11]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d04e      	beq.n	80064b4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800641e:	e021      	b.n	8006464 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	6179      	str	r1, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b20      	cmp	r3, #32
 8006434:	d100      	bne.n	8006438 <get_fileinfo+0x3a>
 8006436:	e015      	b.n	8006464 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b05      	cmp	r3, #5
 800643c:	d101      	bne.n	8006442 <get_fileinfo+0x44>
 800643e:	23e5      	movs	r3, #229	; 0xe5
 8006440:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b09      	cmp	r3, #9
 8006446:	d106      	bne.n	8006456 <get_fileinfo+0x58>
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	613a      	str	r2, [r7, #16]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4413      	add	r3, r2
 8006452:	222e      	movs	r2, #46	; 0x2e
 8006454:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	613a      	str	r2, [r7, #16]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	4413      	add	r3, r2
 8006460:	7bfa      	ldrb	r2, [r7, #15]
 8006462:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b0a      	cmp	r3, #10
 8006468:	d9da      	bls.n	8006420 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	3309      	adds	r3, #9
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	7ada      	ldrb	r2, [r3, #11]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	331c      	adds	r3, #28
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fe58 	bl	800513c <ld_dword>
 800648c:	4602      	mov	r2, r0
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	3316      	adds	r3, #22
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fe4f 	bl	800513c <ld_dword>
 800649e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	80da      	strh	r2, [r3, #6]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	809a      	strh	r2, [r3, #4]
 80064b2:	e000      	b.n	80064b6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80064b4:	bf00      	nop
}
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3324      	adds	r3, #36	; 0x24
 80064d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80064d2:	220b      	movs	r2, #11
 80064d4:	2120      	movs	r1, #32
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f7fe febb 	bl	8005252 <mem_set>
	si = i = 0; ni = 8;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	2308      	movs	r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	61fa      	str	r2, [r7, #28]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064f6:	7efb      	ldrb	r3, [r7, #27]
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d94e      	bls.n	800659a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80064fc:	7efb      	ldrb	r3, [r7, #27]
 80064fe:	2b2f      	cmp	r3, #47	; 0x2f
 8006500:	d006      	beq.n	8006510 <create_name+0x54>
 8006502:	7efb      	ldrb	r3, [r7, #27]
 8006504:	2b5c      	cmp	r3, #92	; 0x5c
 8006506:	d110      	bne.n	800652a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006508:	e002      	b.n	8006510 <create_name+0x54>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b2f      	cmp	r3, #47	; 0x2f
 800651a:	d0f6      	beq.n	800650a <create_name+0x4e>
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b5c      	cmp	r3, #92	; 0x5c
 8006526:	d0f0      	beq.n	800650a <create_name+0x4e>
			break;
 8006528:	e038      	b.n	800659c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800652a:	7efb      	ldrb	r3, [r7, #27]
 800652c:	2b2e      	cmp	r3, #46	; 0x2e
 800652e:	d003      	beq.n	8006538 <create_name+0x7c>
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	429a      	cmp	r2, r3
 8006536:	d30c      	bcc.n	8006552 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2b0b      	cmp	r3, #11
 800653c:	d002      	beq.n	8006544 <create_name+0x88>
 800653e:	7efb      	ldrb	r3, [r7, #27]
 8006540:	2b2e      	cmp	r3, #46	; 0x2e
 8006542:	d001      	beq.n	8006548 <create_name+0x8c>
 8006544:	2306      	movs	r3, #6
 8006546:	e044      	b.n	80065d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006548:	2308      	movs	r3, #8
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	230b      	movs	r3, #11
 800654e:	617b      	str	r3, [r7, #20]
			continue;
 8006550:	e022      	b.n	8006598 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006552:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006556:	2b00      	cmp	r3, #0
 8006558:	da04      	bge.n	8006564 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800655a:	7efb      	ldrb	r3, [r7, #27]
 800655c:	3b80      	subs	r3, #128	; 0x80
 800655e:	4a1f      	ldr	r2, [pc, #124]	; (80065dc <create_name+0x120>)
 8006560:	5cd3      	ldrb	r3, [r2, r3]
 8006562:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006564:	7efb      	ldrb	r3, [r7, #27]
 8006566:	4619      	mov	r1, r3
 8006568:	481d      	ldr	r0, [pc, #116]	; (80065e0 <create_name+0x124>)
 800656a:	f7fe feb4 	bl	80052d6 <chk_chr>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <create_name+0xbc>
 8006574:	2306      	movs	r3, #6
 8006576:	e02c      	b.n	80065d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006578:	7efb      	ldrb	r3, [r7, #27]
 800657a:	2b60      	cmp	r3, #96	; 0x60
 800657c:	d905      	bls.n	800658a <create_name+0xce>
 800657e:	7efb      	ldrb	r3, [r7, #27]
 8006580:	2b7a      	cmp	r3, #122	; 0x7a
 8006582:	d802      	bhi.n	800658a <create_name+0xce>
 8006584:	7efb      	ldrb	r3, [r7, #27]
 8006586:	3b20      	subs	r3, #32
 8006588:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	613a      	str	r2, [r7, #16]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	4413      	add	r3, r2
 8006594:	7efa      	ldrb	r2, [r7, #27]
 8006596:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006598:	e7a6      	b.n	80064e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800659a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	441a      	add	r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <create_name+0xf4>
 80065ac:	2306      	movs	r3, #6
 80065ae:	e010      	b.n	80065d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2be5      	cmp	r3, #229	; 0xe5
 80065b6:	d102      	bne.n	80065be <create_name+0x102>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2205      	movs	r2, #5
 80065bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80065be:	7efb      	ldrb	r3, [r7, #27]
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d801      	bhi.n	80065c8 <create_name+0x10c>
 80065c4:	2204      	movs	r2, #4
 80065c6:	e000      	b.n	80065ca <create_name+0x10e>
 80065c8:	2200      	movs	r2, #0
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	330b      	adds	r3, #11
 80065ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80065d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	08008834 	.word	0x08008834
 80065e0:	080087c4 	.word	0x080087c4

080065e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065f8:	e002      	b.n	8006600 <follow_path+0x1c>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b2f      	cmp	r3, #47	; 0x2f
 8006606:	d0f8      	beq.n	80065fa <follow_path+0x16>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b5c      	cmp	r3, #92	; 0x5c
 800660e:	d0f4      	beq.n	80065fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2200      	movs	r2, #0
 8006614:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b1f      	cmp	r3, #31
 800661c:	d80a      	bhi.n	8006634 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006626:	2100      	movs	r1, #0
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff fc01 	bl	8005e30 <dir_sdi>
 800662e:	4603      	mov	r3, r0
 8006630:	75fb      	strb	r3, [r7, #23]
 8006632:	e048      	b.n	80066c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006634:	463b      	mov	r3, r7
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff3f 	bl	80064bc <create_name>
 800663e:	4603      	mov	r3, r0
 8006640:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d139      	bne.n	80066bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fe33 	bl	80062b4 <dir_find>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006658:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d12c      	bne.n	80066c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d127      	bne.n	80066c0 <follow_path+0xdc>
 8006670:	2305      	movs	r3, #5
 8006672:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006674:	e024      	b.n	80066c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d121      	bne.n	80066c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	799b      	ldrb	r3, [r3, #6]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800668c:	2305      	movs	r3, #5
 800668e:	75fb      	strb	r3, [r7, #23]
 8006690:	e019      	b.n	80066c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	8992      	ldrh	r2, [r2, #12]
 80066a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80066a4:	fb02 f200 	mul.w	r2, r2, r0
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	440b      	add	r3, r1
 80066ac:	4619      	mov	r1, r3
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fd64 	bl	800617c <ld_clust>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066ba:	e7bb      	b.n	8006634 <follow_path+0x50>
			if (res != FR_OK) break;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <follow_path+0xe2>
				break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80066c4:	bf00      	nop
			}
		}
	}

	return res;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d031      	beq.n	800674a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e002      	b.n	80066f4 <get_ldnumber+0x24>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	3301      	adds	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d903      	bls.n	8006704 <get_ldnumber+0x34>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b3a      	cmp	r3, #58	; 0x3a
 8006702:	d1f4      	bne.n	80066ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b3a      	cmp	r3, #58	; 0x3a
 800670a:	d11c      	bne.n	8006746 <get_ldnumber+0x76>
			tp = *path;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	60fa      	str	r2, [r7, #12]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3b30      	subs	r3, #48	; 0x30
 800671c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b09      	cmp	r3, #9
 8006722:	d80e      	bhi.n	8006742 <get_ldnumber+0x72>
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	429a      	cmp	r2, r3
 800672a:	d10a      	bne.n	8006742 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <get_ldnumber+0x72>
					vol = (int)i;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	3301      	adds	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	e002      	b.n	800674c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800674a:	693b      	ldr	r3, [r7, #16]
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	70da      	strb	r2, [r3, #3]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fe ff7a 	bl	800566c <move_window>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <check_fs+0x2a>
 800677e:	2304      	movs	r3, #4
 8006780:	e038      	b.n	80067f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3334      	adds	r3, #52	; 0x34
 8006786:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fcbe 	bl	800510c <ld_word>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006798:	429a      	cmp	r2, r3
 800679a:	d001      	beq.n	80067a0 <check_fs+0x48>
 800679c:	2303      	movs	r3, #3
 800679e:	e029      	b.n	80067f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067a6:	2be9      	cmp	r3, #233	; 0xe9
 80067a8:	d009      	beq.n	80067be <check_fs+0x66>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067b0:	2beb      	cmp	r3, #235	; 0xeb
 80067b2:	d11e      	bne.n	80067f2 <check_fs+0x9a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067ba:	2b90      	cmp	r3, #144	; 0x90
 80067bc:	d119      	bne.n	80067f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3334      	adds	r3, #52	; 0x34
 80067c2:	3336      	adds	r3, #54	; 0x36
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fcb9 	bl	800513c <ld_dword>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <check_fs+0xa4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <check_fs+0x82>
 80067d6:	2300      	movs	r3, #0
 80067d8:	e00c      	b.n	80067f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3334      	adds	r3, #52	; 0x34
 80067de:	3352      	adds	r3, #82	; 0x52
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe fcab 	bl	800513c <ld_dword>
 80067e6:	4603      	mov	r3, r0
 80067e8:	4a05      	ldr	r2, [pc, #20]	; (8006800 <check_fs+0xa8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d101      	bne.n	80067f2 <check_fs+0x9a>
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067f2:	2302      	movs	r3, #2
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	00544146 	.word	0x00544146
 8006800:	33544146 	.word	0x33544146

08006804 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b096      	sub	sp, #88	; 0x58
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff ff59 	bl	80066d0 <get_ldnumber>
 800681e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	da01      	bge.n	800682a <find_volume+0x26>
 8006826:	230b      	movs	r3, #11
 8006828:	e265      	b.n	8006cf6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800682a:	4ab0      	ldr	r2, [pc, #704]	; (8006aec <find_volume+0x2e8>)
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <find_volume+0x3a>
 800683a:	230c      	movs	r3, #12
 800683c:	e25b      	b.n	8006cf6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006842:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	f023 0301 	bic.w	r3, r3, #1
 800684a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fbb9 	bl	8004fd0 <disk_status>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10c      	bne.n	800688a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <find_volume+0x82>
 8006876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006882:	230a      	movs	r3, #10
 8006884:	e237      	b.n	8006cf6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006886:	2300      	movs	r3, #0
 8006888:	e235      	b.n	8006cf6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	b2da      	uxtb	r2, r3
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fbb1 	bl	8005004 <disk_initialize>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80068a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068b4:	2303      	movs	r3, #3
 80068b6:	e21e      	b.n	8006cf6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <find_volume+0xca>
 80068be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80068ca:	230a      	movs	r3, #10
 80068cc:	e213      	b.n	8006cf6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	7858      	ldrb	r0, [r3, #1]
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	330c      	adds	r3, #12
 80068d6:	461a      	mov	r2, r3
 80068d8:	2102      	movs	r1, #2
 80068da:	f7fe fbf9 	bl	80050d0 <disk_ioctl>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <find_volume+0xe4>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e206      	b.n	8006cf6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	899b      	ldrh	r3, [r3, #12]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d80d      	bhi.n	800690e <find_volume+0x10a>
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	899b      	ldrh	r3, [r3, #12]
 80068f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fa:	d308      	bcc.n	800690e <find_volume+0x10a>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	899b      	ldrh	r3, [r3, #12]
 8006900:	461a      	mov	r2, r3
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	899b      	ldrh	r3, [r3, #12]
 8006906:	3b01      	subs	r3, #1
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <find_volume+0x10e>
 800690e:	2301      	movs	r3, #1
 8006910:	e1f1      	b.n	8006cf6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800691a:	f7ff ff1d 	bl	8006758 <check_fs>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006928:	2b02      	cmp	r3, #2
 800692a:	d14b      	bne.n	80069c4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800692c:	2300      	movs	r3, #0
 800692e:	643b      	str	r3, [r7, #64]	; 0x40
 8006930:	e01f      	b.n	8006972 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006940:	4413      	add	r3, r2
 8006942:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	3304      	adds	r3, #4
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d006      	beq.n	800695c <find_volume+0x158>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	3308      	adds	r3, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fbf2 	bl	800513c <ld_dword>
 8006958:	4602      	mov	r2, r0
 800695a:	e000      	b.n	800695e <find_volume+0x15a>
 800695c:	2200      	movs	r2, #0
 800695e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006966:	440b      	add	r3, r1
 8006968:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800696c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696e:	3301      	adds	r3, #1
 8006970:	643b      	str	r3, [r7, #64]	; 0x40
 8006972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006974:	2b03      	cmp	r3, #3
 8006976:	d9dc      	bls.n	8006932 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006978:	2300      	movs	r3, #0
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <find_volume+0x184>
 8006982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006984:	3b01      	subs	r3, #1
 8006986:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006990:	4413      	add	r3, r2
 8006992:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006996:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <find_volume+0x1a6>
 800699e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069a2:	f7ff fed9 	bl	8006758 <check_fs>
 80069a6:	4603      	mov	r3, r0
 80069a8:	e000      	b.n	80069ac <find_volume+0x1a8>
 80069aa:	2303      	movs	r3, #3
 80069ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80069b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d905      	bls.n	80069c4 <find_volume+0x1c0>
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	3301      	adds	r3, #1
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d9e1      	bls.n	8006988 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d101      	bne.n	80069d0 <find_volume+0x1cc>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e192      	b.n	8006cf6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80069d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d901      	bls.n	80069dc <find_volume+0x1d8>
 80069d8:	230d      	movs	r3, #13
 80069da:	e18c      	b.n	8006cf6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	3334      	adds	r3, #52	; 0x34
 80069e0:	330b      	adds	r3, #11
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fb92 	bl	800510c <ld_word>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	899b      	ldrh	r3, [r3, #12]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d001      	beq.n	80069f8 <find_volume+0x1f4>
 80069f4:	230d      	movs	r3, #13
 80069f6:	e17e      	b.n	8006cf6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	3334      	adds	r3, #52	; 0x34
 80069fc:	3316      	adds	r3, #22
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fb84 	bl	800510c <ld_word>
 8006a04:	4603      	mov	r3, r0
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <find_volume+0x218>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	3334      	adds	r3, #52	; 0x34
 8006a12:	3324      	adds	r3, #36	; 0x24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fb91 	bl	800513c <ld_dword>
 8006a1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	789b      	ldrb	r3, [r3, #2]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d005      	beq.n	8006a40 <find_volume+0x23c>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	789b      	ldrb	r3, [r3, #2]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d001      	beq.n	8006a40 <find_volume+0x23c>
 8006a3c:	230d      	movs	r3, #13
 8006a3e:	e15a      	b.n	8006cf6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	789b      	ldrb	r3, [r3, #2]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	895b      	ldrh	r3, [r3, #10]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <find_volume+0x270>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	461a      	mov	r2, r3
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	895b      	ldrh	r3, [r3, #10]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <find_volume+0x274>
 8006a74:	230d      	movs	r3, #13
 8006a76:	e13e      	b.n	8006cf6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	3334      	adds	r3, #52	; 0x34
 8006a7c:	3311      	adds	r3, #17
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fb44 	bl	800510c <ld_word>
 8006a84:	4603      	mov	r3, r0
 8006a86:	461a      	mov	r2, r3
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	891b      	ldrh	r3, [r3, #8]
 8006a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a92:	8992      	ldrh	r2, [r2, #12]
 8006a94:	0952      	lsrs	r2, r2, #5
 8006a96:	b292      	uxth	r2, r2
 8006a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a9c:	fb02 f201 	mul.w	r2, r2, r1
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <find_volume+0x2a8>
 8006aa8:	230d      	movs	r3, #13
 8006aaa:	e124      	b.n	8006cf6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	3334      	adds	r3, #52	; 0x34
 8006ab0:	3313      	adds	r3, #19
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fb2a 	bl	800510c <ld_word>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <find_volume+0x2cc>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	3334      	adds	r3, #52	; 0x34
 8006ac6:	3320      	adds	r3, #32
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fb37 	bl	800513c <ld_dword>
 8006ace:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	3334      	adds	r3, #52	; 0x34
 8006ad4:	330e      	adds	r3, #14
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fb18 	bl	800510c <ld_word>
 8006adc:	4603      	mov	r3, r0
 8006ade:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d104      	bne.n	8006af0 <find_volume+0x2ec>
 8006ae6:	230d      	movs	r3, #13
 8006ae8:	e105      	b.n	8006cf6 <find_volume+0x4f2>
 8006aea:	bf00      	nop
 8006aec:	20000090 	.word	0x20000090

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006af0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	4413      	add	r3, r2
 8006af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af8:	8911      	ldrh	r1, [r2, #8]
 8006afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006afc:	8992      	ldrh	r2, [r2, #12]
 8006afe:	0952      	lsrs	r2, r2, #5
 8006b00:	b292      	uxth	r2, r2
 8006b02:	fbb1 f2f2 	udiv	r2, r1, r2
 8006b06:	b292      	uxth	r2, r2
 8006b08:	4413      	add	r3, r2
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d201      	bcs.n	8006b18 <find_volume+0x314>
 8006b14:	230d      	movs	r3, #13
 8006b16:	e0ee      	b.n	8006cf6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b20:	8952      	ldrh	r2, [r2, #10]
 8006b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <find_volume+0x32e>
 8006b2e:	230d      	movs	r3, #13
 8006b30:	e0e1      	b.n	8006cf6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006b32:	2303      	movs	r3, #3
 8006b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d802      	bhi.n	8006b48 <find_volume+0x344>
 8006b42:	2302      	movs	r3, #2
 8006b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d802      	bhi.n	8006b58 <find_volume+0x354>
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b64:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6a:	441a      	add	r2, r3
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006b70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	441a      	add	r2, r3
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d11e      	bne.n	8006bc0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	3334      	adds	r3, #52	; 0x34
 8006b86:	332a      	adds	r3, #42	; 0x2a
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe fabf 	bl	800510c <ld_word>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <find_volume+0x394>
 8006b94:	230d      	movs	r3, #13
 8006b96:	e0ae      	b.n	8006cf6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	891b      	ldrh	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <find_volume+0x3a0>
 8006ba0:	230d      	movs	r3, #13
 8006ba2:	e0a8      	b.n	8006cf6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	3334      	adds	r3, #52	; 0x34
 8006ba8:	332c      	adds	r3, #44	; 0x2c
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fac6 	bl	800513c <ld_dword>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bbe:	e01f      	b.n	8006c00 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	891b      	ldrh	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <find_volume+0x3c8>
 8006bc8:	230d      	movs	r3, #13
 8006bca:	e094      	b.n	8006cf6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	441a      	add	r2, r3
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d103      	bne.n	8006be8 <find_volume+0x3e4>
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	e00a      	b.n	8006bfe <find_volume+0x3fa>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	085a      	lsrs	r2, r3, #1
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bfe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	69da      	ldr	r2, [r3, #28]
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	899b      	ldrh	r3, [r3, #12]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c12:	8989      	ldrh	r1, [r1, #12]
 8006c14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d201      	bcs.n	8006c20 <find_volume+0x41c>
 8006c1c:	230d      	movs	r3, #13
 8006c1e:	e06a      	b.n	8006cf6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c26:	615a      	str	r2, [r3, #20]
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	695a      	ldr	r2, [r3, #20]
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d149      	bne.n	8006cd2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	3334      	adds	r3, #52	; 0x34
 8006c42:	3330      	adds	r3, #48	; 0x30
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fa61 	bl	800510c <ld_word>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d140      	bne.n	8006cd2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c52:	3301      	adds	r3, #1
 8006c54:	4619      	mov	r1, r3
 8006c56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c58:	f7fe fd08 	bl	800566c <move_window>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d137      	bne.n	8006cd2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	2200      	movs	r2, #0
 8006c66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	3334      	adds	r3, #52	; 0x34
 8006c6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fa4b 	bl	800510c <ld_word>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d127      	bne.n	8006cd2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	3334      	adds	r3, #52	; 0x34
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fa58 	bl	800513c <ld_dword>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	4a1c      	ldr	r2, [pc, #112]	; (8006d00 <find_volume+0x4fc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d11e      	bne.n	8006cd2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	3334      	adds	r3, #52	; 0x34
 8006c98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fa4d 	bl	800513c <ld_dword>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <find_volume+0x500>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d113      	bne.n	8006cd2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	3334      	adds	r3, #52	; 0x34
 8006cae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe fa42 	bl	800513c <ld_dword>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	3334      	adds	r3, #52	; 0x34
 8006cc2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fa38 	bl	800513c <ld_dword>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006cd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <find_volume+0x504>)
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <find_volume+0x504>)
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <find_volume+0x504>)
 8006ce8:	881a      	ldrh	r2, [r3, #0]
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006cee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cf0:	f7fe fc54 	bl	800559c <clear_lock>
#endif
	return FR_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3758      	adds	r7, #88	; 0x58
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	41615252 	.word	0x41615252
 8006d04:	61417272 	.word	0x61417272
 8006d08:	20000094 	.word	0x20000094

08006d0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d16:	2309      	movs	r3, #9
 8006d18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01c      	beq.n	8006d5a <validate+0x4e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d018      	beq.n	8006d5a <validate+0x4e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d013      	beq.n	8006d5a <validate+0x4e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	889a      	ldrh	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	88db      	ldrh	r3, [r3, #6]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d10c      	bne.n	8006d5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f942 	bl	8004fd0 <disk_status>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <validate+0x4e>
			res = FR_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <validate+0x5a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	e000      	b.n	8006d68 <validate+0x5c>
 8006d66:	2300      	movs	r3, #0
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	6013      	str	r3, [r2, #0]
	return res;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fc9e 	bl	80066d0 <get_ldnumber>
 8006d94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da01      	bge.n	8006da0 <f_mount+0x28>
 8006d9c:	230b      	movs	r3, #11
 8006d9e:	e02b      	b.n	8006df8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006da0:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <f_mount+0x88>)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006db0:	69b8      	ldr	r0, [r7, #24]
 8006db2:	f7fe fbf3 	bl	800559c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	490d      	ldr	r1, [pc, #52]	; (8006e00 <f_mount+0x88>)
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <f_mount+0x66>
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d001      	beq.n	8006de2 <f_mount+0x6a>
 8006dde:	2300      	movs	r3, #0
 8006de0:	e00a      	b.n	8006df8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006de2:	f107 010c 	add.w	r1, r7, #12
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	2200      	movs	r2, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fd09 	bl	8006804 <find_volume>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000090 	.word	0x20000090

08006e04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b098      	sub	sp, #96	; 0x60
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <f_open+0x18>
 8006e18:	2309      	movs	r3, #9
 8006e1a:	e1bb      	b.n	8007194 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e24:	79fa      	ldrb	r2, [r7, #7]
 8006e26:	f107 0110 	add.w	r1, r7, #16
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fce8 	bl	8006804 <find_volume>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f040 819f 	bne.w	8007182 <f_open+0x37e>
		dj.obj.fs = fs;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	f107 0314 	add.w	r3, r7, #20
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fbc7 	bl	80065e4 <follow_path>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11a      	bne.n	8006e9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e68:	b25b      	sxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da03      	bge.n	8006e76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006e6e:	2306      	movs	r3, #6
 8006e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e74:	e011      	b.n	8006e9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf14      	ite	ne
 8006e80:	2301      	movne	r3, #1
 8006e82:	2300      	moveq	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fa3c 	bl	800530c <chk_lock>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	f003 031c 	and.w	r3, r3, #28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d07f      	beq.n	8006fa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006eac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d10e      	bne.n	8006ed2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006eb4:	f7fe fa86 	bl	80053c4 <enq_lock>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <f_open+0xc8>
 8006ebe:	f107 0314 	add.w	r3, r7, #20
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fa4b 	bl	800635e <dir_register>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	e000      	b.n	8006ece <f_open+0xca>
 8006ecc:	2312      	movs	r3, #18
 8006ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	f043 0308 	orr.w	r3, r3, #8
 8006ed8:	71fb      	strb	r3, [r7, #7]
 8006eda:	e010      	b.n	8006efe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006edc:	7ebb      	ldrb	r3, [r7, #26]
 8006ede:	f003 0311 	and.w	r3, r3, #17
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <f_open+0xea>
					res = FR_DENIED;
 8006ee6:	2307      	movs	r3, #7
 8006ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006eec:	e007      	b.n	8006efe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <f_open+0xfa>
 8006ef8:	2308      	movs	r3, #8
 8006efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d168      	bne.n	8006fd8 <f_open+0x1d4>
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d063      	beq.n	8006fd8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f10:	f7fd fee4 	bl	8004cdc <get_fattime>
 8006f14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	330e      	adds	r3, #14
 8006f1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe f94b 	bl	80051b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f24:	3316      	adds	r3, #22
 8006f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe f945 	bl	80051b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	330b      	adds	r3, #11
 8006f32:	2220      	movs	r2, #32
 8006f34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f91d 	bl	800617c <ld_clust>
 8006f42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f48:	2200      	movs	r2, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff f935 	bl	80061ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	331c      	adds	r3, #28
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe f92e 	bl	80051b8 <st_dword>
					fs->wflag = 1;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d037      	beq.n	8006fd8 <f_open+0x1d4>
						dw = fs->winsect;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006f6e:	f107 0314 	add.w	r3, r7, #20
 8006f72:	2200      	movs	r2, #0
 8006f74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fe25 	bl	8005bc6 <remove_chain>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d126      	bne.n	8006fd8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fb6c 	bl	800566c <move_window>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	611a      	str	r2, [r3, #16]
 8006fa2:	e019      	b.n	8006fd8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d115      	bne.n	8006fd8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006fac:	7ebb      	ldrb	r3, [r7, #26]
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <f_open+0x1ba>
					res = FR_NO_FILE;
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fbc:	e00c      	b.n	8006fd8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <f_open+0x1d4>
 8006fc8:	7ebb      	ldrb	r3, [r7, #26]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <f_open+0x1d4>
						res = FR_DENIED;
 8006fd2:	2307      	movs	r3, #7
 8006fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d128      	bne.n	8007032 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	461a      	mov	r2, r3
 8007012:	f107 0314 	add.w	r3, r7, #20
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f9f5 	bl	8005408 <inc_lock>
 800701e:	4602      	mov	r2, r0
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d102      	bne.n	8007032 <f_open+0x22e>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80a3 	bne.w	8007182 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f89a 	bl	800617c <ld_clust>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	331c      	adds	r3, #28
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe f872 	bl	800513c <ld_dword>
 8007058:	4602      	mov	r2, r0
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	88da      	ldrh	r2, [r3, #6]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	79fa      	ldrb	r2, [r7, #7]
 8007076:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3330      	adds	r3, #48	; 0x30
 800708e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe f8dc 	bl	8005252 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d06e      	beq.n	8007182 <f_open+0x37e>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d06a      	beq.n	8007182 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	895b      	ldrh	r3, [r3, #10]
 80070b8:	461a      	mov	r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	899b      	ldrh	r3, [r3, #12]
 80070be:	fb03 f302 	mul.w	r3, r3, r2
 80070c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	657b      	str	r3, [r7, #84]	; 0x54
 80070d0:	e016      	b.n	8007100 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fb85 	bl	80057e6 <get_fat>
 80070dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80070de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d802      	bhi.n	80070ea <f_open+0x2e6>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f0:	d102      	bne.n	80070f8 <f_open+0x2f4>
 80070f2:	2301      	movs	r3, #1
 80070f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d103      	bne.n	8007110 <f_open+0x30c>
 8007108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800710a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710c:	429a      	cmp	r2, r3
 800710e:	d8e0      	bhi.n	80070d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007114:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800711a:	2b00      	cmp	r3, #0
 800711c:	d131      	bne.n	8007182 <f_open+0x37e>
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	899b      	ldrh	r3, [r3, #12]
 8007122:	461a      	mov	r2, r3
 8007124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007126:	fbb3 f1f2 	udiv	r1, r3, r2
 800712a:	fb02 f201 	mul.w	r2, r2, r1
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d026      	beq.n	8007182 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fb35 	bl	80057a8 <clust2sect>
 800713e:	6478      	str	r0, [r7, #68]	; 0x44
 8007140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <f_open+0x34a>
						res = FR_INT_ERR;
 8007146:	2302      	movs	r3, #2
 8007148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800714c:	e019      	b.n	8007182 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	899b      	ldrh	r3, [r3, #12]
 8007152:	461a      	mov	r2, r3
 8007154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007156:	fbb3 f2f2 	udiv	r2, r3, r2
 800715a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715c:	441a      	add	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	7858      	ldrb	r0, [r3, #1]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a1a      	ldr	r2, [r3, #32]
 8007170:	2301      	movs	r3, #1
 8007172:	f7fd ff6d 	bl	8005050 <disk_read>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <f_open+0x37e>
 800717c:	2301      	movs	r3, #1
 800717e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <f_open+0x38c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007194:	4618      	mov	r0, r3
 8007196:	3760      	adds	r7, #96	; 0x60
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08c      	sub	sp, #48	; 0x30
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f107 0210 	add.w	r2, r7, #16
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fda5 	bl	8006d0c <validate>
 80071c2:	4603      	mov	r3, r0
 80071c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <f_write+0x44>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	7d5b      	ldrb	r3, [r3, #21]
 80071d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80071d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <f_write+0x4a>
 80071e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071e4:	e16a      	b.n	80074bc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <f_write+0x5a>
 80071f2:	2307      	movs	r3, #7
 80071f4:	e162      	b.n	80074bc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	429a      	cmp	r2, r3
 8007204:	f080 814c 	bcs.w	80074a0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	43db      	mvns	r3, r3
 800720e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007210:	e146      	b.n	80074a0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	8992      	ldrh	r2, [r2, #12]
 800721a:	fbb3 f1f2 	udiv	r1, r3, r2
 800721e:	fb02 f201 	mul.w	r2, r2, r1
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80f1 	bne.w	800740c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	8992      	ldrh	r2, [r2, #12]
 8007232:	fbb3 f3f2 	udiv	r3, r3, r2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	8952      	ldrh	r2, [r2, #10]
 800723a:	3a01      	subs	r2, #1
 800723c:	4013      	ands	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d143      	bne.n	80072ce <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10c      	bne.n	8007268 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d11a      	bne.n	8007290 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe fd16 	bl	8005c90 <create_chain>
 8007264:	62b8      	str	r0, [r7, #40]	; 0x28
 8007266:	e013      	b.n	8007290 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fe fda2 	bl	8005dc0 <clmt_clust>
 800727c:	62b8      	str	r0, [r7, #40]	; 0x28
 800727e:	e007      	b.n	8007290 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7fe fd01 	bl	8005c90 <create_chain>
 800728e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8109 	beq.w	80074aa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b01      	cmp	r3, #1
 800729c:	d104      	bne.n	80072a8 <f_write+0x10c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2202      	movs	r2, #2
 80072a2:	755a      	strb	r2, [r3, #21]
 80072a4:	2302      	movs	r3, #2
 80072a6:	e109      	b.n	80074bc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ae:	d104      	bne.n	80072ba <f_write+0x11e>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	755a      	strb	r2, [r3, #21]
 80072b6:	2301      	movs	r3, #1
 80072b8:	e100      	b.n	80074bc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <f_write+0x132>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	7d1b      	ldrb	r3, [r3, #20]
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da18      	bge.n	800730a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	7858      	ldrb	r0, [r3, #1]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	2301      	movs	r3, #1
 80072e8:	f7fd fed2 	bl	8005090 <disk_write>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <f_write+0x160>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	755a      	strb	r2, [r3, #21]
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0df      	b.n	80074bc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7d1b      	ldrb	r3, [r3, #20]
 8007300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7fe fa48 	bl	80057a8 <clust2sect>
 8007318:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d104      	bne.n	800732a <f_write+0x18e>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2202      	movs	r2, #2
 8007324:	755a      	strb	r2, [r3, #21]
 8007326:	2302      	movs	r3, #2
 8007328:	e0c8      	b.n	80074bc <f_write+0x320>
			sect += csect;
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	4413      	add	r3, r2
 8007330:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	899b      	ldrh	r3, [r3, #12]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	fbb3 f3f2 	udiv	r3, r3, r2
 800733e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d043      	beq.n	80073ce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	4413      	add	r3, r2
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	8952      	ldrh	r2, [r2, #10]
 8007350:	4293      	cmp	r3, r2
 8007352:	d905      	bls.n	8007360 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	461a      	mov	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	7858      	ldrb	r0, [r3, #1]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	69f9      	ldr	r1, [r7, #28]
 800736a:	f7fd fe91 	bl	8005090 <disk_write>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <f_write+0x1e2>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	755a      	strb	r2, [r3, #21]
 800737a:	2301      	movs	r3, #1
 800737c:	e09e      	b.n	80074bc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	429a      	cmp	r2, r3
 800738a:	d918      	bls.n	80073be <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	8992      	ldrh	r2, [r2, #12]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	18d1      	adds	r1, r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	899b      	ldrh	r3, [r3, #12]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f7fd ff30 	bl	8005210 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	7d1b      	ldrb	r3, [r3, #20]
 80073b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	899b      	ldrh	r3, [r3, #12]
 80073c2:	461a      	mov	r2, r3
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80073cc:	e04b      	b.n	8007466 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d016      	beq.n	8007406 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d210      	bcs.n	8007406 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	7858      	ldrb	r0, [r3, #1]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073ee:	2301      	movs	r3, #1
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	f7fd fe2d 	bl	8005050 <disk_read>
 80073f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	755a      	strb	r2, [r3, #21]
 8007402:	2301      	movs	r3, #1
 8007404:	e05a      	b.n	80074bc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	899b      	ldrh	r3, [r3, #12]
 8007410:	4618      	mov	r0, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	8992      	ldrh	r2, [r2, #12]
 800741a:	fbb3 f1f2 	udiv	r1, r3, r2
 800741e:	fb02 f201 	mul.w	r2, r2, r1
 8007422:	1a9b      	subs	r3, r3, r2
 8007424:	1ac3      	subs	r3, r0, r3
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d901      	bls.n	8007434 <f_write+0x298>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	8992      	ldrh	r2, [r2, #12]
 8007442:	fbb3 f0f2 	udiv	r0, r3, r2
 8007446:	fb02 f200 	mul.w	r2, r2, r0
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	440b      	add	r3, r1
 800744e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007450:	69f9      	ldr	r1, [r7, #28]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fedc 	bl	8005210 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	7d1b      	ldrb	r3, [r3, #20]
 800745c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	4413      	add	r3, r2
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	441a      	add	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	619a      	str	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	429a      	cmp	r2, r3
 8007484:	bf38      	it	cc
 8007486:	461a      	movcc	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	60da      	str	r2, [r3, #12]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	441a      	add	r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f47f aeb5 	bne.w	8007212 <f_write+0x76>
 80074a8:	e000      	b.n	80074ac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7d1b      	ldrb	r3, [r3, #20]
 80074b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3730      	adds	r7, #48	; 0x30
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f107 0208 	add.w	r2, r7, #8
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fc19 	bl	8006d0c <validate>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d168      	bne.n	80075b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	7d1b      	ldrb	r3, [r3, #20]
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d062      	beq.n	80075b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7d1b      	ldrb	r3, [r3, #20]
 80074f4:	b25b      	sxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da15      	bge.n	8007526 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	7858      	ldrb	r0, [r3, #1]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a1a      	ldr	r2, [r3, #32]
 8007508:	2301      	movs	r3, #1
 800750a:	f7fd fdc1 	bl	8005090 <disk_write>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <f_sync+0x54>
 8007514:	2301      	movs	r3, #1
 8007516:	e04f      	b.n	80075b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7d1b      	ldrb	r3, [r3, #20]
 800751c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007526:	f7fd fbd9 	bl	8004cdc <get_fattime>
 800752a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fe f899 	bl	800566c <move_window>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d138      	bne.n	80075b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	330b      	adds	r3, #11
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	330b      	adds	r3, #11
 8007554:	f042 0220 	orr.w	r2, r2, #32
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	461a      	mov	r2, r3
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	f7fe fe27 	bl	80061ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f103 021c 	add.w	r2, r3, #28
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7fd fe1d 	bl	80051b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3316      	adds	r3, #22
 8007582:	6939      	ldr	r1, [r7, #16]
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd fe17 	bl	80051b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3312      	adds	r3, #18
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f7fd fdf6 	bl	8005182 <st_word>
					fs->wflag = 1;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2201      	movs	r2, #1
 800759a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe f892 	bl	80056c8 <sync_fs>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7d1b      	ldrb	r3, [r3, #20]
 80075ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff ff7b 	bl	80074c4 <f_sync>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d118      	bne.n	800760a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f107 0208 	add.w	r2, r7, #8
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fb93 	bl	8006d0c <validate>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10c      	bne.n	800760a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fd ff95 	bl	8005524 <dec_lock>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <f_opendir+0x14>
 8007624:	2309      	movs	r3, #9
 8007626:	e064      	b.n	80076f2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800762c:	f107 010c 	add.w	r1, r7, #12
 8007630:	463b      	mov	r3, r7
 8007632:	2200      	movs	r2, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff f8e5 	bl	8006804 <find_volume>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d14f      	bne.n	80076e4 <f_opendir+0xd0>
		obj->fs = fs;
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fe ffc8 	bl	80065e4 <follow_path>
 8007654:	4603      	mov	r3, r0
 8007656:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d13d      	bne.n	80076da <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007664:	b25b      	sxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	db12      	blt.n	8007690 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	799b      	ldrb	r3, [r3, #6]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7fe fd7c 	bl	800617c <ld_clust>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	609a      	str	r2, [r3, #8]
 800768a:	e001      	b.n	8007690 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800768c:	2305      	movs	r3, #5
 800768e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d121      	bne.n	80076da <f_opendir+0xc6>
				obj->id = fs->id;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	88da      	ldrh	r2, [r3, #6]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fe fbc5 	bl	8005e30 <dir_sdi>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d114      	bne.n	80076da <f_opendir+0xc6>
					if (obj->sclust) {
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00d      	beq.n	80076d4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fd fea4 	bl	8005408 <inc_lock>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <f_opendir+0xc6>
 80076ce:	2312      	movs	r3, #18
 80076d0:	75fb      	strb	r3, [r7, #23]
 80076d2:	e002      	b.n	80076da <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2200      	movs	r2, #0
 80076d8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d101      	bne.n	80076e4 <f_opendir+0xd0>
 80076e0:	2305      	movs	r3, #5
 80076e2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <f_opendir+0xdc>
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f107 0208 	add.w	r2, r7, #8
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fafe 	bl	8006d0c <validate>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d110      	bne.n	800773c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d006      	beq.n	8007730 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd fefc 	bl	8005524 <dec_lock>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f107 0208 	add.w	r2, r7, #8
 8007756:	4611      	mov	r1, r2
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff fad7 	bl	8006d0c <validate>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d126      	bne.n	80077b6 <f_readdir+0x70>
		if (!fno) {
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fe fb5d 	bl	8005e30 <dir_sdi>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
 800777a:	e01c      	b.n	80077b6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fe fd3b 	bl	80061fa <dir_read>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b04      	cmp	r3, #4
 800778c:	d101      	bne.n	8007792 <f_readdir+0x4c>
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10e      	bne.n	80077b6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fe fe2f 	bl	80063fe <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fe fbcd 	bl	8005f42 <dir_next>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d101      	bne.n	80077b6 <f_readdir+0x70>
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b090      	sub	sp, #64	; 0x40
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80077ca:	f107 010c 	add.w	r1, r7, #12
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	2200      	movs	r2, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff f816 	bl	8006804 <find_volume>
 80077d8:	4603      	mov	r3, r0
 80077da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80077de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d11f      	bne.n	8007826 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4611      	mov	r1, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fef8 	bl	80065e4 <follow_path>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80077fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d111      	bne.n	8007826 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007802:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007806:	b25b      	sxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	da03      	bge.n	8007814 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800780c:	2306      	movs	r3, #6
 800780e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007812:	e008      	b.n	8007826 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <f_stat+0x66>
 800781a:	f107 030c 	add.w	r3, r7, #12
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fdec 	bl	80063fe <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800782a:	4618      	mov	r0, r3
 800782c:	3740      	adds	r7, #64	; 0x40
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b09e      	sub	sp, #120	; 0x78
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800783e:	f107 010c 	add.w	r1, r7, #12
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	2202      	movs	r2, #2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe ffdc 	bl	8006804 <find_volume>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8007856:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 808e 	bne.w	800797c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe febb 	bl	80065e4 <follow_path>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007874:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007878:	2b00      	cmp	r3, #0
 800787a:	d108      	bne.n	800788e <f_unlink+0x5c>
 800787c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007880:	2102      	movs	r1, #2
 8007882:	4618      	mov	r0, r3
 8007884:	f7fd fd42 	bl	800530c <chk_lock>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800788e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007892:	2b00      	cmp	r3, #0
 8007894:	d172      	bne.n	800797c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007896:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800789a:	b25b      	sxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	da03      	bge.n	80078a8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80078a0:	2306      	movs	r3, #6
 80078a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80078a6:	e008      	b.n	80078ba <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80078a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80078b4:	2307      	movs	r3, #7
 80078b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80078ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d134      	bne.n	800792c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fc57 	bl	800617c <ld_clust>
 80078ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80078d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d027      	beq.n	800792c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80078e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078e2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80078e4:	f107 0310 	add.w	r3, r7, #16
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe faa0 	bl	8005e30 <dir_sdi>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80078f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d116      	bne.n	800792c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fc78 	bl	80061fa <dir_read>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007910:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <f_unlink+0xec>
 8007918:	2307      	movs	r3, #7
 800791a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800791e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007922:	2b04      	cmp	r3, #4
 8007924:	d102      	bne.n	800792c <f_unlink+0xfa>
 8007926:	2300      	movs	r3, #0
 8007928:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800792c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007930:	2b00      	cmp	r3, #0
 8007932:	d123      	bne.n	800797c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fd42 	bl	80063c2 <dir_remove>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007944:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <f_unlink+0x134>
 800794c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007956:	2200      	movs	r2, #0
 8007958:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f933 	bl	8005bc6 <remove_chain>
 8007960:	4603      	mov	r3, r0
 8007962:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007966:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800796a:	2b00      	cmp	r3, #0
 800796c:	d106      	bne.n	800797c <f_unlink+0x14a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4618      	mov	r0, r3
 8007972:	f7fd fea9 	bl	80056c8 <sync_fs>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800797c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007980:	4618      	mov	r0, r3
 8007982:	3778      	adds	r7, #120	; 0x78
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800799e:	4b1f      	ldr	r3, [pc, #124]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079a0:	7a5b      	ldrb	r3, [r3, #9]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d131      	bne.n	8007a0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80079a8:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079aa:	7a5b      	ldrb	r3, [r3, #9]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079b2:	2100      	movs	r1, #0
 80079b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80079b6:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079b8:	7a5b      	ldrb	r3, [r3, #9]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4a17      	ldr	r2, [pc, #92]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079c8:	7a5b      	ldrb	r3, [r3, #9]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079d0:	4413      	add	r3, r2
 80079d2:	79fa      	ldrb	r2, [r7, #7]
 80079d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079d8:	7a5b      	ldrb	r3, [r3, #9]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	b2d1      	uxtb	r1, r2
 80079e0:	4a0e      	ldr	r2, [pc, #56]	; (8007a1c <FATFS_LinkDriverEx+0x94>)
 80079e2:	7251      	strb	r1, [r2, #9]
 80079e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	3330      	adds	r3, #48	; 0x30
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3301      	adds	r3, #1
 80079f4:	223a      	movs	r2, #58	; 0x3a
 80079f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	3302      	adds	r3, #2
 80079fc:	222f      	movs	r2, #47	; 0x2f
 80079fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3303      	adds	r3, #3
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	200000b8 	.word	0x200000b8

08007a20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff ffaa 	bl	8007988 <FATFS_LinkDriverEx>
 8007a34:	4603      	mov	r3, r0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <__errno>:
 8007a40:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <__errno+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	2000000c 	.word	0x2000000c

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	; (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	; (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	; (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	; (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 fc5e 	bl	8008320 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	080088f0 	.word	0x080088f0
 8007a88:	080088f0 	.word	0x080088f0
 8007a8c:	080088f0 	.word	0x080088f0
 8007a90:	080088f4 	.word	0x080088f4

08007a94 <malloc>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <malloc+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f000 b863 	b.w	8007b64 <_malloc_r>
 8007a9e:	bf00      	nop
 8007aa0:	2000000c 	.word	0x2000000c

08007aa4 <free>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <free+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 b80b 	b.w	8007ac4 <_free_r>
 8007aae:	bf00      	nop
 8007ab0:	2000000c 	.word	0x2000000c

08007ab4 <memset>:
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d100      	bne.n	8007abe <memset+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac2:	e7f9      	b.n	8007ab8 <memset+0x4>

08007ac4 <_free_r>:
 8007ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ac6:	2900      	cmp	r1, #0
 8007ac8:	d048      	beq.n	8007b5c <_free_r+0x98>
 8007aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ace:	9001      	str	r0, [sp, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ad6:	bfb8      	it	lt
 8007ad8:	18e4      	addlt	r4, r4, r3
 8007ada:	f000 f8cd 	bl	8007c78 <__malloc_lock>
 8007ade:	4a20      	ldr	r2, [pc, #128]	; (8007b60 <_free_r+0x9c>)
 8007ae0:	9801      	ldr	r0, [sp, #4]
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	b933      	cbnz	r3, 8007af6 <_free_r+0x32>
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	6014      	str	r4, [r2, #0]
 8007aec:	b003      	add	sp, #12
 8007aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007af2:	f000 b8c7 	b.w	8007c84 <__malloc_unlock>
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	d90b      	bls.n	8007b12 <_free_r+0x4e>
 8007afa:	6821      	ldr	r1, [r4, #0]
 8007afc:	1862      	adds	r2, r4, r1
 8007afe:	4293      	cmp	r3, r2
 8007b00:	bf04      	itt	eq
 8007b02:	681a      	ldreq	r2, [r3, #0]
 8007b04:	685b      	ldreq	r3, [r3, #4]
 8007b06:	6063      	str	r3, [r4, #4]
 8007b08:	bf04      	itt	eq
 8007b0a:	1852      	addeq	r2, r2, r1
 8007b0c:	6022      	streq	r2, [r4, #0]
 8007b0e:	602c      	str	r4, [r5, #0]
 8007b10:	e7ec      	b.n	8007aec <_free_r+0x28>
 8007b12:	461a      	mov	r2, r3
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	b10b      	cbz	r3, 8007b1c <_free_r+0x58>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d9fa      	bls.n	8007b12 <_free_r+0x4e>
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	1855      	adds	r5, r2, r1
 8007b20:	42a5      	cmp	r5, r4
 8007b22:	d10b      	bne.n	8007b3c <_free_r+0x78>
 8007b24:	6824      	ldr	r4, [r4, #0]
 8007b26:	4421      	add	r1, r4
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	6011      	str	r1, [r2, #0]
 8007b2e:	d1dd      	bne.n	8007aec <_free_r+0x28>
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6053      	str	r3, [r2, #4]
 8007b36:	4421      	add	r1, r4
 8007b38:	6011      	str	r1, [r2, #0]
 8007b3a:	e7d7      	b.n	8007aec <_free_r+0x28>
 8007b3c:	d902      	bls.n	8007b44 <_free_r+0x80>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	e7d3      	b.n	8007aec <_free_r+0x28>
 8007b44:	6825      	ldr	r5, [r4, #0]
 8007b46:	1961      	adds	r1, r4, r5
 8007b48:	428b      	cmp	r3, r1
 8007b4a:	bf04      	itt	eq
 8007b4c:	6819      	ldreq	r1, [r3, #0]
 8007b4e:	685b      	ldreq	r3, [r3, #4]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	bf04      	itt	eq
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	6054      	str	r4, [r2, #4]
 8007b5a:	e7c7      	b.n	8007aec <_free_r+0x28>
 8007b5c:	b003      	add	sp, #12
 8007b5e:	bd30      	pop	{r4, r5, pc}
 8007b60:	200000c4 	.word	0x200000c4

08007b64 <_malloc_r>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	1ccd      	adds	r5, r1, #3
 8007b68:	f025 0503 	bic.w	r5, r5, #3
 8007b6c:	3508      	adds	r5, #8
 8007b6e:	2d0c      	cmp	r5, #12
 8007b70:	bf38      	it	cc
 8007b72:	250c      	movcc	r5, #12
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	4606      	mov	r6, r0
 8007b78:	db01      	blt.n	8007b7e <_malloc_r+0x1a>
 8007b7a:	42a9      	cmp	r1, r5
 8007b7c:	d903      	bls.n	8007b86 <_malloc_r+0x22>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	2000      	movs	r0, #0
 8007b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b86:	f000 f877 	bl	8007c78 <__malloc_lock>
 8007b8a:	4921      	ldr	r1, [pc, #132]	; (8007c10 <_malloc_r+0xac>)
 8007b8c:	680a      	ldr	r2, [r1, #0]
 8007b8e:	4614      	mov	r4, r2
 8007b90:	b99c      	cbnz	r4, 8007bba <_malloc_r+0x56>
 8007b92:	4f20      	ldr	r7, [pc, #128]	; (8007c14 <_malloc_r+0xb0>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b923      	cbnz	r3, 8007ba2 <_malloc_r+0x3e>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f000 f83c 	bl	8007c18 <_sbrk_r>
 8007ba0:	6038      	str	r0, [r7, #0]
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 f837 	bl	8007c18 <_sbrk_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d123      	bne.n	8007bf6 <_malloc_r+0x92>
 8007bae:	230c      	movs	r3, #12
 8007bb0:	6033      	str	r3, [r6, #0]
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f000 f866 	bl	8007c84 <__malloc_unlock>
 8007bb8:	e7e3      	b.n	8007b82 <_malloc_r+0x1e>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	1b5b      	subs	r3, r3, r5
 8007bbe:	d417      	bmi.n	8007bf0 <_malloc_r+0x8c>
 8007bc0:	2b0b      	cmp	r3, #11
 8007bc2:	d903      	bls.n	8007bcc <_malloc_r+0x68>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	441c      	add	r4, r3
 8007bc8:	6025      	str	r5, [r4, #0]
 8007bca:	e004      	b.n	8007bd6 <_malloc_r+0x72>
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	42a2      	cmp	r2, r4
 8007bd0:	bf0c      	ite	eq
 8007bd2:	600b      	streq	r3, [r1, #0]
 8007bd4:	6053      	strne	r3, [r2, #4]
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f854 	bl	8007c84 <__malloc_unlock>
 8007bdc:	f104 000b 	add.w	r0, r4, #11
 8007be0:	1d23      	adds	r3, r4, #4
 8007be2:	f020 0007 	bic.w	r0, r0, #7
 8007be6:	1ac2      	subs	r2, r0, r3
 8007be8:	d0cc      	beq.n	8007b84 <_malloc_r+0x20>
 8007bea:	1a1b      	subs	r3, r3, r0
 8007bec:	50a3      	str	r3, [r4, r2]
 8007bee:	e7c9      	b.n	8007b84 <_malloc_r+0x20>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	6864      	ldr	r4, [r4, #4]
 8007bf4:	e7cc      	b.n	8007b90 <_malloc_r+0x2c>
 8007bf6:	1cc4      	adds	r4, r0, #3
 8007bf8:	f024 0403 	bic.w	r4, r4, #3
 8007bfc:	42a0      	cmp	r0, r4
 8007bfe:	d0e3      	beq.n	8007bc8 <_malloc_r+0x64>
 8007c00:	1a21      	subs	r1, r4, r0
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 f808 	bl	8007c18 <_sbrk_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x64>
 8007c0c:	e7cf      	b.n	8007bae <_malloc_r+0x4a>
 8007c0e:	bf00      	nop
 8007c10:	200000c4 	.word	0x200000c4
 8007c14:	200000c8 	.word	0x200000c8

08007c18 <_sbrk_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d06      	ldr	r5, [pc, #24]	; (8007c34 <_sbrk_r+0x1c>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	602b      	str	r3, [r5, #0]
 8007c24:	f7f9 f8b0 	bl	8000d88 <_sbrk>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_sbrk_r+0x1a>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_sbrk_r+0x1a>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	2000429c 	.word	0x2000429c

08007c38 <siprintf>:
 8007c38:	b40e      	push	{r1, r2, r3}
 8007c3a:	b500      	push	{lr}
 8007c3c:	b09c      	sub	sp, #112	; 0x70
 8007c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c40:	9002      	str	r0, [sp, #8]
 8007c42:	9006      	str	r0, [sp, #24]
 8007c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c48:	4809      	ldr	r0, [pc, #36]	; (8007c70 <siprintf+0x38>)
 8007c4a:	9107      	str	r1, [sp, #28]
 8007c4c:	9104      	str	r1, [sp, #16]
 8007c4e:	4909      	ldr	r1, [pc, #36]	; (8007c74 <siprintf+0x3c>)
 8007c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c54:	9105      	str	r1, [sp, #20]
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	a902      	add	r1, sp, #8
 8007c5c:	f000 f874 	bl	8007d48 <_svfiprintf_r>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	b01c      	add	sp, #112	; 0x70
 8007c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c6c:	b003      	add	sp, #12
 8007c6e:	4770      	bx	lr
 8007c70:	2000000c 	.word	0x2000000c
 8007c74:	ffff0208 	.word	0xffff0208

08007c78 <__malloc_lock>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__malloc_lock+0x8>)
 8007c7a:	f000 baf9 	b.w	8008270 <__retarget_lock_acquire_recursive>
 8007c7e:	bf00      	nop
 8007c80:	200042a4 	.word	0x200042a4

08007c84 <__malloc_unlock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_unlock+0x8>)
 8007c86:	f000 baf4 	b.w	8008272 <__retarget_lock_release_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	200042a4 	.word	0x200042a4

08007c90 <__ssputs_r>:
 8007c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	688e      	ldr	r6, [r1, #8]
 8007c96:	429e      	cmp	r6, r3
 8007c98:	4682      	mov	sl, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4690      	mov	r8, r2
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	d838      	bhi.n	8007d14 <__ssputs_r+0x84>
 8007ca2:	898a      	ldrh	r2, [r1, #12]
 8007ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ca8:	d032      	beq.n	8007d10 <__ssputs_r+0x80>
 8007caa:	6825      	ldr	r5, [r4, #0]
 8007cac:	6909      	ldr	r1, [r1, #16]
 8007cae:	eba5 0901 	sub.w	r9, r5, r1
 8007cb2:	6965      	ldr	r5, [r4, #20]
 8007cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	444b      	add	r3, r9
 8007cc0:	106d      	asrs	r5, r5, #1
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	bf38      	it	cc
 8007cc6:	461d      	movcc	r5, r3
 8007cc8:	0553      	lsls	r3, r2, #21
 8007cca:	d531      	bpl.n	8007d30 <__ssputs_r+0xa0>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	f7ff ff49 	bl	8007b64 <_malloc_r>
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	b950      	cbnz	r0, 8007cec <__ssputs_r+0x5c>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	f8ca 3000 	str.w	r3, [sl]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	464a      	mov	r2, r9
 8007cf0:	f000 fac0 	bl	8008274 <memcpy>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	6126      	str	r6, [r4, #16]
 8007d02:	6165      	str	r5, [r4, #20]
 8007d04:	444e      	add	r6, r9
 8007d06:	eba5 0509 	sub.w	r5, r5, r9
 8007d0a:	6026      	str	r6, [r4, #0]
 8007d0c:	60a5      	str	r5, [r4, #8]
 8007d0e:	463e      	mov	r6, r7
 8007d10:	42be      	cmp	r6, r7
 8007d12:	d900      	bls.n	8007d16 <__ssputs_r+0x86>
 8007d14:	463e      	mov	r6, r7
 8007d16:	4632      	mov	r2, r6
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	4641      	mov	r1, r8
 8007d1c:	f000 fab8 	bl	8008290 <memmove>
 8007d20:	68a3      	ldr	r3, [r4, #8]
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	1b9b      	subs	r3, r3, r6
 8007d26:	4432      	add	r2, r6
 8007d28:	60a3      	str	r3, [r4, #8]
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e7db      	b.n	8007ce8 <__ssputs_r+0x58>
 8007d30:	462a      	mov	r2, r5
 8007d32:	f000 fac7 	bl	80082c4 <_realloc_r>
 8007d36:	4606      	mov	r6, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1e1      	bne.n	8007d00 <__ssputs_r+0x70>
 8007d3c:	6921      	ldr	r1, [r4, #16]
 8007d3e:	4650      	mov	r0, sl
 8007d40:	f7ff fec0 	bl	8007ac4 <_free_r>
 8007d44:	e7c7      	b.n	8007cd6 <__ssputs_r+0x46>
	...

08007d48 <_svfiprintf_r>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	4698      	mov	r8, r3
 8007d4e:	898b      	ldrh	r3, [r1, #12]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	b09d      	sub	sp, #116	; 0x74
 8007d54:	4607      	mov	r7, r0
 8007d56:	460d      	mov	r5, r1
 8007d58:	4614      	mov	r4, r2
 8007d5a:	d50e      	bpl.n	8007d7a <_svfiprintf_r+0x32>
 8007d5c:	690b      	ldr	r3, [r1, #16]
 8007d5e:	b963      	cbnz	r3, 8007d7a <_svfiprintf_r+0x32>
 8007d60:	2140      	movs	r1, #64	; 0x40
 8007d62:	f7ff feff 	bl	8007b64 <_malloc_r>
 8007d66:	6028      	str	r0, [r5, #0]
 8007d68:	6128      	str	r0, [r5, #16]
 8007d6a:	b920      	cbnz	r0, 8007d76 <_svfiprintf_r+0x2e>
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d74:	e0d1      	b.n	8007f1a <_svfiprintf_r+0x1d2>
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	616b      	str	r3, [r5, #20]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7e:	2320      	movs	r3, #32
 8007d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d88:	2330      	movs	r3, #48	; 0x30
 8007d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f34 <_svfiprintf_r+0x1ec>
 8007d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d92:	f04f 0901 	mov.w	r9, #1
 8007d96:	4623      	mov	r3, r4
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9e:	b10a      	cbz	r2, 8007da4 <_svfiprintf_r+0x5c>
 8007da0:	2a25      	cmp	r2, #37	; 0x25
 8007da2:	d1f9      	bne.n	8007d98 <_svfiprintf_r+0x50>
 8007da4:	ebba 0b04 	subs.w	fp, sl, r4
 8007da8:	d00b      	beq.n	8007dc2 <_svfiprintf_r+0x7a>
 8007daa:	465b      	mov	r3, fp
 8007dac:	4622      	mov	r2, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ff6d 	bl	8007c90 <__ssputs_r>
 8007db6:	3001      	adds	r0, #1
 8007db8:	f000 80aa 	beq.w	8007f10 <_svfiprintf_r+0x1c8>
 8007dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dbe:	445a      	add	r2, fp
 8007dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80a2 	beq.w	8007f10 <_svfiprintf_r+0x1c8>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd6:	f10a 0a01 	add.w	sl, sl, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de2:	931a      	str	r3, [sp, #104]	; 0x68
 8007de4:	4654      	mov	r4, sl
 8007de6:	2205      	movs	r2, #5
 8007de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dec:	4851      	ldr	r0, [pc, #324]	; (8007f34 <_svfiprintf_r+0x1ec>)
 8007dee:	f7f8 fa07 	bl	8000200 <memchr>
 8007df2:	9a04      	ldr	r2, [sp, #16]
 8007df4:	b9d8      	cbnz	r0, 8007e2e <_svfiprintf_r+0xe6>
 8007df6:	06d0      	lsls	r0, r2, #27
 8007df8:	bf44      	itt	mi
 8007dfa:	2320      	movmi	r3, #32
 8007dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e00:	0711      	lsls	r1, r2, #28
 8007e02:	bf44      	itt	mi
 8007e04:	232b      	movmi	r3, #43	; 0x2b
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e10:	d015      	beq.n	8007e3e <_svfiprintf_r+0xf6>
 8007e12:	9a07      	ldr	r2, [sp, #28]
 8007e14:	4654      	mov	r4, sl
 8007e16:	2000      	movs	r0, #0
 8007e18:	f04f 0c0a 	mov.w	ip, #10
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e22:	3b30      	subs	r3, #48	; 0x30
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d94e      	bls.n	8007ec6 <_svfiprintf_r+0x17e>
 8007e28:	b1b0      	cbz	r0, 8007e58 <_svfiprintf_r+0x110>
 8007e2a:	9207      	str	r2, [sp, #28]
 8007e2c:	e014      	b.n	8007e58 <_svfiprintf_r+0x110>
 8007e2e:	eba0 0308 	sub.w	r3, r0, r8
 8007e32:	fa09 f303 	lsl.w	r3, r9, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	46a2      	mov	sl, r4
 8007e3c:	e7d2      	b.n	8007de4 <_svfiprintf_r+0x9c>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfbb      	ittet	lt
 8007e4a:	425b      	neglt	r3, r3
 8007e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e50:	9307      	strge	r3, [sp, #28]
 8007e52:	9307      	strlt	r3, [sp, #28]
 8007e54:	bfb8      	it	lt
 8007e56:	9204      	strlt	r2, [sp, #16]
 8007e58:	7823      	ldrb	r3, [r4, #0]
 8007e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e5c:	d10c      	bne.n	8007e78 <_svfiprintf_r+0x130>
 8007e5e:	7863      	ldrb	r3, [r4, #1]
 8007e60:	2b2a      	cmp	r3, #42	; 0x2a
 8007e62:	d135      	bne.n	8007ed0 <_svfiprintf_r+0x188>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1d1a      	adds	r2, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	9203      	str	r2, [sp, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfb8      	it	lt
 8007e70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e74:	3402      	adds	r4, #2
 8007e76:	9305      	str	r3, [sp, #20]
 8007e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f44 <_svfiprintf_r+0x1fc>
 8007e7c:	7821      	ldrb	r1, [r4, #0]
 8007e7e:	2203      	movs	r2, #3
 8007e80:	4650      	mov	r0, sl
 8007e82:	f7f8 f9bd 	bl	8000200 <memchr>
 8007e86:	b140      	cbz	r0, 8007e9a <_svfiprintf_r+0x152>
 8007e88:	2340      	movs	r3, #64	; 0x40
 8007e8a:	eba0 000a 	sub.w	r0, r0, sl
 8007e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	4303      	orrs	r3, r0
 8007e96:	3401      	adds	r4, #1
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9e:	4826      	ldr	r0, [pc, #152]	; (8007f38 <_svfiprintf_r+0x1f0>)
 8007ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ea4:	2206      	movs	r2, #6
 8007ea6:	f7f8 f9ab 	bl	8000200 <memchr>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d038      	beq.n	8007f20 <_svfiprintf_r+0x1d8>
 8007eae:	4b23      	ldr	r3, [pc, #140]	; (8007f3c <_svfiprintf_r+0x1f4>)
 8007eb0:	bb1b      	cbnz	r3, 8007efa <_svfiprintf_r+0x1b2>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	3307      	adds	r3, #7
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	3308      	adds	r3, #8
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec0:	4433      	add	r3, r6
 8007ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec4:	e767      	b.n	8007d96 <_svfiprintf_r+0x4e>
 8007ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eca:	460c      	mov	r4, r1
 8007ecc:	2001      	movs	r0, #1
 8007ece:	e7a5      	b.n	8007e1c <_svfiprintf_r+0xd4>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	3401      	adds	r4, #1
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	f04f 0c0a 	mov.w	ip, #10
 8007edc:	4620      	mov	r0, r4
 8007ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee2:	3a30      	subs	r2, #48	; 0x30
 8007ee4:	2a09      	cmp	r2, #9
 8007ee6:	d903      	bls.n	8007ef0 <_svfiprintf_r+0x1a8>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0c5      	beq.n	8007e78 <_svfiprintf_r+0x130>
 8007eec:	9105      	str	r1, [sp, #20]
 8007eee:	e7c3      	b.n	8007e78 <_svfiprintf_r+0x130>
 8007ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e7f0      	b.n	8007edc <_svfiprintf_r+0x194>
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	462a      	mov	r2, r5
 8007f00:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <_svfiprintf_r+0x1f8>)
 8007f02:	a904      	add	r1, sp, #16
 8007f04:	4638      	mov	r0, r7
 8007f06:	f3af 8000 	nop.w
 8007f0a:	1c42      	adds	r2, r0, #1
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	d1d6      	bne.n	8007ebe <_svfiprintf_r+0x176>
 8007f10:	89ab      	ldrh	r3, [r5, #12]
 8007f12:	065b      	lsls	r3, r3, #25
 8007f14:	f53f af2c 	bmi.w	8007d70 <_svfiprintf_r+0x28>
 8007f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f1a:	b01d      	add	sp, #116	; 0x74
 8007f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <_svfiprintf_r+0x1f8>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f000 f87a 	bl	8008024 <_printf_i>
 8007f30:	e7eb      	b.n	8007f0a <_svfiprintf_r+0x1c2>
 8007f32:	bf00      	nop
 8007f34:	080088b4 	.word	0x080088b4
 8007f38:	080088be 	.word	0x080088be
 8007f3c:	00000000 	.word	0x00000000
 8007f40:	08007c91 	.word	0x08007c91
 8007f44:	080088ba 	.word	0x080088ba

08007f48 <_printf_common>:
 8007f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	4699      	mov	r9, r3
 8007f50:	688a      	ldr	r2, [r1, #8]
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bfb8      	it	lt
 8007f5c:	4613      	movlt	r3, r2
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f64:	4607      	mov	r7, r0
 8007f66:	460c      	mov	r4, r1
 8007f68:	b10a      	cbz	r2, 8007f6e <_printf_common+0x26>
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	6033      	str	r3, [r6, #0]
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	0699      	lsls	r1, r3, #26
 8007f72:	bf42      	ittt	mi
 8007f74:	6833      	ldrmi	r3, [r6, #0]
 8007f76:	3302      	addmi	r3, #2
 8007f78:	6033      	strmi	r3, [r6, #0]
 8007f7a:	6825      	ldr	r5, [r4, #0]
 8007f7c:	f015 0506 	ands.w	r5, r5, #6
 8007f80:	d106      	bne.n	8007f90 <_printf_common+0x48>
 8007f82:	f104 0a19 	add.w	sl, r4, #25
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	6832      	ldr	r2, [r6, #0]
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	42ab      	cmp	r3, r5
 8007f8e:	dc26      	bgt.n	8007fde <_printf_common+0x96>
 8007f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f94:	1e13      	subs	r3, r2, #0
 8007f96:	6822      	ldr	r2, [r4, #0]
 8007f98:	bf18      	it	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	0692      	lsls	r2, r2, #26
 8007f9e:	d42b      	bmi.n	8007ff8 <_printf_common+0xb0>
 8007fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c0      	blx	r8
 8007faa:	3001      	adds	r0, #1
 8007fac:	d01e      	beq.n	8007fec <_printf_common+0xa4>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	68e5      	ldr	r5, [r4, #12]
 8007fb2:	6832      	ldr	r2, [r6, #0]
 8007fb4:	f003 0306 	and.w	r3, r3, #6
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	bf08      	it	eq
 8007fbc:	1aad      	subeq	r5, r5, r2
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	bf0c      	ite	eq
 8007fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fc8:	2500      	movne	r5, #0
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bfc4      	itt	gt
 8007fce:	1a9b      	subgt	r3, r3, r2
 8007fd0:	18ed      	addgt	r5, r5, r3
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	341a      	adds	r4, #26
 8007fd6:	42b5      	cmp	r5, r6
 8007fd8:	d11a      	bne.n	8008010 <_printf_common+0xc8>
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e008      	b.n	8007ff0 <_printf_common+0xa8>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	47c0      	blx	r8
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d103      	bne.n	8007ff4 <_printf_common+0xac>
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff4:	3501      	adds	r5, #1
 8007ff6:	e7c6      	b.n	8007f86 <_printf_common+0x3e>
 8007ff8:	18e1      	adds	r1, r4, r3
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	2030      	movs	r0, #48	; 0x30
 8007ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008002:	4422      	add	r2, r4
 8008004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800800c:	3302      	adds	r3, #2
 800800e:	e7c7      	b.n	8007fa0 <_printf_common+0x58>
 8008010:	2301      	movs	r3, #1
 8008012:	4622      	mov	r2, r4
 8008014:	4649      	mov	r1, r9
 8008016:	4638      	mov	r0, r7
 8008018:	47c0      	blx	r8
 800801a:	3001      	adds	r0, #1
 800801c:	d0e6      	beq.n	8007fec <_printf_common+0xa4>
 800801e:	3601      	adds	r6, #1
 8008020:	e7d9      	b.n	8007fd6 <_printf_common+0x8e>
	...

08008024 <_printf_i>:
 8008024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	460c      	mov	r4, r1
 800802a:	4691      	mov	r9, r2
 800802c:	7e27      	ldrb	r7, [r4, #24]
 800802e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008030:	2f78      	cmp	r7, #120	; 0x78
 8008032:	4680      	mov	r8, r0
 8008034:	469a      	mov	sl, r3
 8008036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800803a:	d807      	bhi.n	800804c <_printf_i+0x28>
 800803c:	2f62      	cmp	r7, #98	; 0x62
 800803e:	d80a      	bhi.n	8008056 <_printf_i+0x32>
 8008040:	2f00      	cmp	r7, #0
 8008042:	f000 80d8 	beq.w	80081f6 <_printf_i+0x1d2>
 8008046:	2f58      	cmp	r7, #88	; 0x58
 8008048:	f000 80a3 	beq.w	8008192 <_printf_i+0x16e>
 800804c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008054:	e03a      	b.n	80080cc <_printf_i+0xa8>
 8008056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800805a:	2b15      	cmp	r3, #21
 800805c:	d8f6      	bhi.n	800804c <_printf_i+0x28>
 800805e:	a001      	add	r0, pc, #4	; (adr r0, 8008064 <_printf_i+0x40>)
 8008060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008064:	080080bd 	.word	0x080080bd
 8008068:	080080d1 	.word	0x080080d1
 800806c:	0800804d 	.word	0x0800804d
 8008070:	0800804d 	.word	0x0800804d
 8008074:	0800804d 	.word	0x0800804d
 8008078:	0800804d 	.word	0x0800804d
 800807c:	080080d1 	.word	0x080080d1
 8008080:	0800804d 	.word	0x0800804d
 8008084:	0800804d 	.word	0x0800804d
 8008088:	0800804d 	.word	0x0800804d
 800808c:	0800804d 	.word	0x0800804d
 8008090:	080081dd 	.word	0x080081dd
 8008094:	08008101 	.word	0x08008101
 8008098:	080081bf 	.word	0x080081bf
 800809c:	0800804d 	.word	0x0800804d
 80080a0:	0800804d 	.word	0x0800804d
 80080a4:	080081ff 	.word	0x080081ff
 80080a8:	0800804d 	.word	0x0800804d
 80080ac:	08008101 	.word	0x08008101
 80080b0:	0800804d 	.word	0x0800804d
 80080b4:	0800804d 	.word	0x0800804d
 80080b8:	080081c7 	.word	0x080081c7
 80080bc:	680b      	ldr	r3, [r1, #0]
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	600a      	str	r2, [r1, #0]
 80080c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080cc:	2301      	movs	r3, #1
 80080ce:	e0a3      	b.n	8008218 <_printf_i+0x1f4>
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	6808      	ldr	r0, [r1, #0]
 80080d4:	062e      	lsls	r6, r5, #24
 80080d6:	f100 0304 	add.w	r3, r0, #4
 80080da:	d50a      	bpl.n	80080f2 <_printf_i+0xce>
 80080dc:	6805      	ldr	r5, [r0, #0]
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	da03      	bge.n	80080ec <_printf_i+0xc8>
 80080e4:	232d      	movs	r3, #45	; 0x2d
 80080e6:	426d      	negs	r5, r5
 80080e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ec:	485e      	ldr	r0, [pc, #376]	; (8008268 <_printf_i+0x244>)
 80080ee:	230a      	movs	r3, #10
 80080f0:	e019      	b.n	8008126 <_printf_i+0x102>
 80080f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080f6:	6805      	ldr	r5, [r0, #0]
 80080f8:	600b      	str	r3, [r1, #0]
 80080fa:	bf18      	it	ne
 80080fc:	b22d      	sxthne	r5, r5
 80080fe:	e7ef      	b.n	80080e0 <_printf_i+0xbc>
 8008100:	680b      	ldr	r3, [r1, #0]
 8008102:	6825      	ldr	r5, [r4, #0]
 8008104:	1d18      	adds	r0, r3, #4
 8008106:	6008      	str	r0, [r1, #0]
 8008108:	0628      	lsls	r0, r5, #24
 800810a:	d501      	bpl.n	8008110 <_printf_i+0xec>
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	e002      	b.n	8008116 <_printf_i+0xf2>
 8008110:	0669      	lsls	r1, r5, #25
 8008112:	d5fb      	bpl.n	800810c <_printf_i+0xe8>
 8008114:	881d      	ldrh	r5, [r3, #0]
 8008116:	4854      	ldr	r0, [pc, #336]	; (8008268 <_printf_i+0x244>)
 8008118:	2f6f      	cmp	r7, #111	; 0x6f
 800811a:	bf0c      	ite	eq
 800811c:	2308      	moveq	r3, #8
 800811e:	230a      	movne	r3, #10
 8008120:	2100      	movs	r1, #0
 8008122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008126:	6866      	ldr	r6, [r4, #4]
 8008128:	60a6      	str	r6, [r4, #8]
 800812a:	2e00      	cmp	r6, #0
 800812c:	bfa2      	ittt	ge
 800812e:	6821      	ldrge	r1, [r4, #0]
 8008130:	f021 0104 	bicge.w	r1, r1, #4
 8008134:	6021      	strge	r1, [r4, #0]
 8008136:	b90d      	cbnz	r5, 800813c <_printf_i+0x118>
 8008138:	2e00      	cmp	r6, #0
 800813a:	d04d      	beq.n	80081d8 <_printf_i+0x1b4>
 800813c:	4616      	mov	r6, r2
 800813e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008142:	fb03 5711 	mls	r7, r3, r1, r5
 8008146:	5dc7      	ldrb	r7, [r0, r7]
 8008148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800814c:	462f      	mov	r7, r5
 800814e:	42bb      	cmp	r3, r7
 8008150:	460d      	mov	r5, r1
 8008152:	d9f4      	bls.n	800813e <_printf_i+0x11a>
 8008154:	2b08      	cmp	r3, #8
 8008156:	d10b      	bne.n	8008170 <_printf_i+0x14c>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	07df      	lsls	r7, r3, #31
 800815c:	d508      	bpl.n	8008170 <_printf_i+0x14c>
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	6861      	ldr	r1, [r4, #4]
 8008162:	4299      	cmp	r1, r3
 8008164:	bfde      	ittt	le
 8008166:	2330      	movle	r3, #48	; 0x30
 8008168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800816c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008170:	1b92      	subs	r2, r2, r6
 8008172:	6122      	str	r2, [r4, #16]
 8008174:	f8cd a000 	str.w	sl, [sp]
 8008178:	464b      	mov	r3, r9
 800817a:	aa03      	add	r2, sp, #12
 800817c:	4621      	mov	r1, r4
 800817e:	4640      	mov	r0, r8
 8008180:	f7ff fee2 	bl	8007f48 <_printf_common>
 8008184:	3001      	adds	r0, #1
 8008186:	d14c      	bne.n	8008222 <_printf_i+0x1fe>
 8008188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800818c:	b004      	add	sp, #16
 800818e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008192:	4835      	ldr	r0, [pc, #212]	; (8008268 <_printf_i+0x244>)
 8008194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	680e      	ldr	r6, [r1, #0]
 800819c:	061f      	lsls	r7, r3, #24
 800819e:	f856 5b04 	ldr.w	r5, [r6], #4
 80081a2:	600e      	str	r6, [r1, #0]
 80081a4:	d514      	bpl.n	80081d0 <_printf_i+0x1ac>
 80081a6:	07d9      	lsls	r1, r3, #31
 80081a8:	bf44      	itt	mi
 80081aa:	f043 0320 	orrmi.w	r3, r3, #32
 80081ae:	6023      	strmi	r3, [r4, #0]
 80081b0:	b91d      	cbnz	r5, 80081ba <_printf_i+0x196>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f023 0320 	bic.w	r3, r3, #32
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	2310      	movs	r3, #16
 80081bc:	e7b0      	b.n	8008120 <_printf_i+0xfc>
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	f043 0320 	orr.w	r3, r3, #32
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	2378      	movs	r3, #120	; 0x78
 80081c8:	4828      	ldr	r0, [pc, #160]	; (800826c <_printf_i+0x248>)
 80081ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081ce:	e7e3      	b.n	8008198 <_printf_i+0x174>
 80081d0:	065e      	lsls	r6, r3, #25
 80081d2:	bf48      	it	mi
 80081d4:	b2ad      	uxthmi	r5, r5
 80081d6:	e7e6      	b.n	80081a6 <_printf_i+0x182>
 80081d8:	4616      	mov	r6, r2
 80081da:	e7bb      	b.n	8008154 <_printf_i+0x130>
 80081dc:	680b      	ldr	r3, [r1, #0]
 80081de:	6826      	ldr	r6, [r4, #0]
 80081e0:	6960      	ldr	r0, [r4, #20]
 80081e2:	1d1d      	adds	r5, r3, #4
 80081e4:	600d      	str	r5, [r1, #0]
 80081e6:	0635      	lsls	r5, r6, #24
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	d501      	bpl.n	80081f0 <_printf_i+0x1cc>
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	e002      	b.n	80081f6 <_printf_i+0x1d2>
 80081f0:	0671      	lsls	r1, r6, #25
 80081f2:	d5fb      	bpl.n	80081ec <_printf_i+0x1c8>
 80081f4:	8018      	strh	r0, [r3, #0]
 80081f6:	2300      	movs	r3, #0
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	4616      	mov	r6, r2
 80081fc:	e7ba      	b.n	8008174 <_printf_i+0x150>
 80081fe:	680b      	ldr	r3, [r1, #0]
 8008200:	1d1a      	adds	r2, r3, #4
 8008202:	600a      	str	r2, [r1, #0]
 8008204:	681e      	ldr	r6, [r3, #0]
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	2100      	movs	r1, #0
 800820a:	4630      	mov	r0, r6
 800820c:	f7f7 fff8 	bl	8000200 <memchr>
 8008210:	b108      	cbz	r0, 8008216 <_printf_i+0x1f2>
 8008212:	1b80      	subs	r0, r0, r6
 8008214:	6060      	str	r0, [r4, #4]
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	6123      	str	r3, [r4, #16]
 800821a:	2300      	movs	r3, #0
 800821c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008220:	e7a8      	b.n	8008174 <_printf_i+0x150>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	4632      	mov	r2, r6
 8008226:	4649      	mov	r1, r9
 8008228:	4640      	mov	r0, r8
 800822a:	47d0      	blx	sl
 800822c:	3001      	adds	r0, #1
 800822e:	d0ab      	beq.n	8008188 <_printf_i+0x164>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	079b      	lsls	r3, r3, #30
 8008234:	d413      	bmi.n	800825e <_printf_i+0x23a>
 8008236:	68e0      	ldr	r0, [r4, #12]
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	4298      	cmp	r0, r3
 800823c:	bfb8      	it	lt
 800823e:	4618      	movlt	r0, r3
 8008240:	e7a4      	b.n	800818c <_printf_i+0x168>
 8008242:	2301      	movs	r3, #1
 8008244:	4632      	mov	r2, r6
 8008246:	4649      	mov	r1, r9
 8008248:	4640      	mov	r0, r8
 800824a:	47d0      	blx	sl
 800824c:	3001      	adds	r0, #1
 800824e:	d09b      	beq.n	8008188 <_printf_i+0x164>
 8008250:	3501      	adds	r5, #1
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	9903      	ldr	r1, [sp, #12]
 8008256:	1a5b      	subs	r3, r3, r1
 8008258:	42ab      	cmp	r3, r5
 800825a:	dcf2      	bgt.n	8008242 <_printf_i+0x21e>
 800825c:	e7eb      	b.n	8008236 <_printf_i+0x212>
 800825e:	2500      	movs	r5, #0
 8008260:	f104 0619 	add.w	r6, r4, #25
 8008264:	e7f5      	b.n	8008252 <_printf_i+0x22e>
 8008266:	bf00      	nop
 8008268:	080088c5 	.word	0x080088c5
 800826c:	080088d6 	.word	0x080088d6

08008270 <__retarget_lock_acquire_recursive>:
 8008270:	4770      	bx	lr

08008272 <__retarget_lock_release_recursive>:
 8008272:	4770      	bx	lr

08008274 <memcpy>:
 8008274:	440a      	add	r2, r1
 8008276:	4291      	cmp	r1, r2
 8008278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800827c:	d100      	bne.n	8008280 <memcpy+0xc>
 800827e:	4770      	bx	lr
 8008280:	b510      	push	{r4, lr}
 8008282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828a:	4291      	cmp	r1, r2
 800828c:	d1f9      	bne.n	8008282 <memcpy+0xe>
 800828e:	bd10      	pop	{r4, pc}

08008290 <memmove>:
 8008290:	4288      	cmp	r0, r1
 8008292:	b510      	push	{r4, lr}
 8008294:	eb01 0402 	add.w	r4, r1, r2
 8008298:	d902      	bls.n	80082a0 <memmove+0x10>
 800829a:	4284      	cmp	r4, r0
 800829c:	4623      	mov	r3, r4
 800829e:	d807      	bhi.n	80082b0 <memmove+0x20>
 80082a0:	1e43      	subs	r3, r0, #1
 80082a2:	42a1      	cmp	r1, r4
 80082a4:	d008      	beq.n	80082b8 <memmove+0x28>
 80082a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082ae:	e7f8      	b.n	80082a2 <memmove+0x12>
 80082b0:	4402      	add	r2, r0
 80082b2:	4601      	mov	r1, r0
 80082b4:	428a      	cmp	r2, r1
 80082b6:	d100      	bne.n	80082ba <memmove+0x2a>
 80082b8:	bd10      	pop	{r4, pc}
 80082ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082c2:	e7f7      	b.n	80082b4 <memmove+0x24>

080082c4 <_realloc_r>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	4607      	mov	r7, r0
 80082c8:	4614      	mov	r4, r2
 80082ca:	460e      	mov	r6, r1
 80082cc:	b921      	cbnz	r1, 80082d8 <_realloc_r+0x14>
 80082ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082d2:	4611      	mov	r1, r2
 80082d4:	f7ff bc46 	b.w	8007b64 <_malloc_r>
 80082d8:	b922      	cbnz	r2, 80082e4 <_realloc_r+0x20>
 80082da:	f7ff fbf3 	bl	8007ac4 <_free_r>
 80082de:	4625      	mov	r5, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e4:	f000 f814 	bl	8008310 <_malloc_usable_size_r>
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d20f      	bcs.n	800830c <_realloc_r+0x48>
 80082ec:	4621      	mov	r1, r4
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7ff fc38 	bl	8007b64 <_malloc_r>
 80082f4:	4605      	mov	r5, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0f2      	beq.n	80082e0 <_realloc_r+0x1c>
 80082fa:	4631      	mov	r1, r6
 80082fc:	4622      	mov	r2, r4
 80082fe:	f7ff ffb9 	bl	8008274 <memcpy>
 8008302:	4631      	mov	r1, r6
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fbdd 	bl	8007ac4 <_free_r>
 800830a:	e7e9      	b.n	80082e0 <_realloc_r+0x1c>
 800830c:	4635      	mov	r5, r6
 800830e:	e7e7      	b.n	80082e0 <_realloc_r+0x1c>

08008310 <_malloc_usable_size_r>:
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f18      	subs	r0, r3, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfbc      	itt	lt
 800831a:	580b      	ldrlt	r3, [r1, r0]
 800831c:	18c0      	addlt	r0, r0, r3
 800831e:	4770      	bx	lr

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
