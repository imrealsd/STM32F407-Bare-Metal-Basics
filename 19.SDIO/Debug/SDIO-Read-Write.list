
SDIO-Read-Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004930  08004930  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004938  08004938  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00002160  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000216c  2000216c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d49  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002770  00000000  00000000  00030d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  000334f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f15  00000000  00000000  00034a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eaa0  00000000  00000000  00056975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b04  00000000  00000000  00065415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012cf19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bfc  00000000  00000000  0012cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048ec 	.word	0x080048ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048ec 	.word	0x080048ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0x84>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0x84>)
 80004d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0x84>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_GPIO_Init+0x84>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <MX_GPIO_Init+0x84>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_GPIO_Init+0x84>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_GPIO_Init+0x84>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <MX_GPIO_Init+0x84>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <MX_GPIO_Init+0x84>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_GPIO_Init+0x84>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <MX_GPIO_Init+0x84>)
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_GPIO_Init+0x84>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0308 	and.w	r3, r3, #8
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

	HAL_Init();
 800054c:	f000 fa16 	bl	800097c <HAL_Init>
	SystemClock_Config();
 8000550:	f000 f80a 	bl	8000568 <SystemClock_Config>
	MX_GPIO_Init();
 8000554:	f7ff ffb4 	bl	80004c0 <MX_GPIO_Init>
	MX_SDIO_SD_Init();
 8000558:	f000 f876 	bl	8000648 <MX_SDIO_SD_Init>
	MX_USART1_UART_Init();
 800055c:	f000 f96a 	bl	8000834 <MX_USART1_UART_Init>
	MX_FATFS_Init();
 8000560:	f003 ffb8 	bl	80044d4 <MX_FATFS_Init>


	while (1)
 8000564:	e7fe      	b.n	8000564 <main+0x1c>
	...

08000568 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 f9b0 	bl	80048dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80005dc:	23a8      	movs	r3, #168	; 0xa8
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fd9b 	bl	8001128 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80005f8:	f000 f820 	bl	800063c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fffc 	bl	8001618 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000626:	f000 f809 	bl	800063c <Error_Handler>
	}
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <MX_SDIO_SD_Init+0x3c>)
 8000650:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <MX_SDIO_SD_Init+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000034 	.word	0x20000034
 8000684:	40012c00 	.word	0x40012c00

08000688 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <HAL_SD_MspInit+0xc0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d14a      	bne.n	8000740 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a26      	ldr	r2, [pc, #152]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b24      	ldr	r3, [pc, #144]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a1f      	ldr	r2, [pc, #124]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_SD_MspInit+0xc4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000702:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000710:	230c      	movs	r3, #12
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <HAL_SD_MspInit+0xc8>)
 800071c:	f000 fb68 	bl	8000df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000720:	2304      	movs	r3, #4
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000730:	230c      	movs	r3, #12
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <HAL_SD_MspInit+0xcc>)
 800073c:	f000 fb58 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012c00 	.word	0x40012c00
 800074c:	40023800 	.word	0x40023800
 8000750:	40020800 	.word	0x40020800
 8000754:	40020c00 	.word	0x40020c00

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <HAL_MspInit+0x4c>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_MspInit+0x4c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x4c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x4c>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f914 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USART1_IRQHandler+0x10>)
 8000802:	f002 fad9 	bl	8002db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000b8 	.word	0x200000b8

08000810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART1_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART1_UART_Init+0x4c>)
 800086c:	f002 fa57 	bl	8002d1e <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f7ff fee1 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000b8 	.word	0x200000b8
 8000884:	40011000 	.word	0x40011000

08000888 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_UART_MspInit+0x94>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d134      	bne.n	8000914 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_UART_MspInit+0x98>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f4:	2307      	movs	r3, #7
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <HAL_UART_MspInit+0x9c>)
 8000900:	f000 fa76 	bl	8000df0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2025      	movs	r0, #37	; 0x25
 800090a:	f000 f9a8 	bl	8000c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090e:	2025      	movs	r0, #37	; 0x25
 8000910:	f000 f9c1 	bl	8000c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40011000 	.word	0x40011000
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000952:	f7ff ff5d 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f003 ff9d 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdf5 	bl	8000548 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08004940 	.word	0x08004940
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	2000216c 	.word	0x2000216c

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f94f 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fed2 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f967 	bl	8000cb2 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	f000 f92f 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	200000fc 	.word	0x200000fc

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_GetTick+0x14>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	200000fc 	.word	0x200000fc

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a78:	d005      	beq.n	8000a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_Delay+0x44>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a86:	bf00      	nop
 8000a88:	f7ff ffde 	bl	8000a48 <HAL_GetTick>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d8f7      	bhi.n	8000a88 <HAL_Delay+0x28>
  {
  }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db0b      	blt.n	8000b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 021f 	and.w	r2, r3, #31
 8000b24:	4907      	ldr	r1, [pc, #28]	; (8000b44 <__NVIC_EnableIRQ+0x38>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff29 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff3e 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff31 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffa2 	bl	8000c04 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff feb6 	bl	8000a48 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d008      	beq.n	8000cfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e052      	b.n	8000da2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0216 	bic.w	r2, r2, #22
 8000d0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <HAL_DMA_Abort+0x62>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d007      	beq.n	8000d3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0208 	bic.w	r2, r2, #8
 8000d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4c:	e013      	b.n	8000d76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d4e:	f7ff fe7b 	bl	8000a48 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d90c      	bls.n	8000d76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e015      	b.n	8000da2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e4      	bne.n	8000d4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d88:	223f      	movs	r2, #63	; 0x3f
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d004      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e00c      	b.n	8000de2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2205      	movs	r2, #5
 8000dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e16b      	b.n	80010e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 815a 	bne.w	80010de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d017      	beq.n	8000ee0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d123      	bne.n	8000f34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	220f      	movs	r2, #15
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	69b9      	ldr	r1, [r7, #24]
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0203 	and.w	r2, r3, #3
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80b4 	beq.w	80010de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b60      	ldr	r3, [pc, #384]	; (80010fc <HAL_GPIO_Init+0x30c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a5f      	ldr	r2, [pc, #380]	; (80010fc <HAL_GPIO_Init+0x30c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_GPIO_Init+0x30c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f92:	4a5b      	ldr	r2, [pc, #364]	; (8001100 <HAL_GPIO_Init+0x310>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a52      	ldr	r2, [pc, #328]	; (8001104 <HAL_GPIO_Init+0x314>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d02b      	beq.n	8001016 <HAL_GPIO_Init+0x226>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <HAL_GPIO_Init+0x318>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d025      	beq.n	8001012 <HAL_GPIO_Init+0x222>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a50      	ldr	r2, [pc, #320]	; (800110c <HAL_GPIO_Init+0x31c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d01f      	beq.n	800100e <HAL_GPIO_Init+0x21e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	; (8001110 <HAL_GPIO_Init+0x320>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x21a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_GPIO_Init+0x324>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x216>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4d      	ldr	r2, [pc, #308]	; (8001118 <HAL_GPIO_Init+0x328>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x212>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	; (800111c <HAL_GPIO_Init+0x32c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x20e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <HAL_GPIO_Init+0x330>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x20a>
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	e00e      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x228>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x228>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x228>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x310>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <HAL_GPIO_Init+0x334>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105a:	4a32      	ldr	r2, [pc, #200]	; (8001124 <HAL_GPIO_Init+0x334>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001060:	4b30      	ldr	r3, [pc, #192]	; (8001124 <HAL_GPIO_Init+0x334>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_GPIO_Init+0x334>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_GPIO_Init+0x334>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_GPIO_Init+0x334>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_GPIO_Init+0x334>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <HAL_GPIO_Init+0x334>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f ae90 	bls.w	8000e0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40013c00 	.word	0x40013c00

08001128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e264      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d075      	beq.n	8001232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001146:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00c      	beq.n	800116c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001152:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d112      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4b9d      	ldr	r3, [pc, #628]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116a:	d10b      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d05b      	beq.n	8001230 <HAL_RCC_OscConfig+0x108>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d157      	bne.n	8001230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e23f      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x74>
 800118e:	4b91      	ldr	r3, [pc, #580]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a90      	ldr	r2, [pc, #576]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e01d      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a8a      	ldr	r2, [pc, #552]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 80011c0:	4b84      	ldr	r3, [pc, #528]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a80      	ldr	r2, [pc, #512]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc32 	bl	8000a48 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fc2e 	bl	8000a48 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e204      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0xc0>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc1e 	bl	8000a48 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc1a 	bl	8000a48 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1f0      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0xe8>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d063      	beq.n	8001306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124a:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001252:	2b08      	cmp	r3, #8
 8001254:	d11c      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e1c4      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4952      	ldr	r1, [pc, #328]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	e03a      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001298:	4b4f      	ldr	r3, [pc, #316]	; (80013d8 <HAL_RCC_OscConfig+0x2b0>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fbd3 	bl	8000a48 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fbcf 	bl	8000a48 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1a5      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4940      	ldr	r1, [pc, #256]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_OscConfig+0x2b0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbb2 	bl	8000a48 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbae 	bl	8000a48 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e184      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d016      	beq.n	8001348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_RCC_OscConfig+0x2b4>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fb92 	bl	8000a48 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fb8e 	bl	8000a48 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e164      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x200>
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_OscConfig+0x2b4>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fb7b 	bl	8000a48 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fb77 	bl	8000a48 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e14d      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80a0 	beq.w	80014c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10f      	bne.n	80013b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d121      	bne.n	8001402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fb3d 	bl	8000a48 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	e011      	b.n	80013f6 <HAL_RCC_OscConfig+0x2ce>
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
 80013e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e4:	f7ff fb30 	bl	8000a48 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e106      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b85      	ldr	r3, [pc, #532]	; (800160c <HAL_RCC_OscConfig+0x4e4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x2f0>
 800140a:	4b81      	ldr	r3, [pc, #516]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a80      	ldr	r2, [pc, #512]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e01c      	b.n	8001452 <HAL_RCC_OscConfig+0x32a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001424:	4a7a      	ldr	r2, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	; 0x70
 800142c:	4b78      	ldr	r3, [pc, #480]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a77      	ldr	r2, [pc, #476]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e00b      	b.n	8001452 <HAL_RCC_OscConfig+0x32a>
 800143a:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	4a74      	ldr	r2, [pc, #464]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6713      	str	r3, [r2, #112]	; 0x70
 8001446:	4b72      	ldr	r3, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a71      	ldr	r2, [pc, #452]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145a:	f7ff faf5 	bl	8000a48 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff faf1 	bl	8000a48 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0c5      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ee      	beq.n	8001462 <HAL_RCC_OscConfig+0x33a>
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fadf 	bl	8000a48 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fadb 	bl	8000a48 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0af      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1ee      	bne.n	800148e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d105      	bne.n	80014c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b6:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 809b 	beq.w	8001602 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d05c      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d141      	bne.n	8001564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e0:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <HAL_RCC_OscConfig+0x4ec>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff faaf 	bl	8000a48 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff faab 	bl	8000a48 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e081      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	019b      	lsls	r3, r3, #6
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x4ec>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fa84 	bl	8000a48 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fa80 	bl	8000a48 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e056      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x41c>
 8001562:	e04e      	b.n	8001602 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x4ec>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fa6d 	bl	8000a48 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff fa69 	bl	8000a48 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e03f      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x44a>
 8001590:	e037      	b.n	8001602 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e032      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d028      	beq.n	80015fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d121      	bne.n	80015fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11a      	bne.n	80015fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ce:	4013      	ands	r3, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d111      	bne.n	80015fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40007000 	.word	0x40007000
 8001610:	40023800 	.word	0x40023800
 8001614:	42470060 	.word	0x42470060

08001618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0cc      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d90c      	bls.n	8001654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b8      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a58      	ldr	r2, [pc, #352]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	494d      	ldr	r1, [pc, #308]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d044      	beq.n	8001738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b47      	ldr	r3, [pc, #284]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e067      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4934      	ldr	r1, [pc, #208]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001708:	f7ff f99e 	bl	8000a48 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f99a 	bl	8000a48 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e04f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d20c      	bcs.n	8001760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e032      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	490e      	ldr	r1, [pc, #56]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179e:	f000 f821 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f8fe 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00
 80017d4:	40023800 	.word	0x40023800
 80017d8:	08004904 	.word	0x08004904
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017fc:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d00d      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x40>
 8001808:	2b08      	cmp	r3, #8
 800180a:	f200 80bd 	bhi.w	8001988 <HAL_RCC_GetSysClockFreq+0x1a4>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x34>
 8001812:	2b04      	cmp	r3, #4
 8001814:	d003      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x3a>
 8001816:	e0b7      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800181a:	60bb      	str	r3, [r7, #8]
       break;
 800181c:	e0b7      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001820:	60bb      	str	r3, [r7, #8]
      break;
 8001822:	e0b4      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001824:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182e:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d04d      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	461a      	mov	r2, r3
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	ea02 0800 	and.w	r8, r2, r0
 8001852:	ea03 0901 	and.w	r9, r3, r1
 8001856:	4640      	mov	r0, r8
 8001858:	4649      	mov	r1, r9
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	014b      	lsls	r3, r1, #5
 8001864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001868:	0142      	lsls	r2, r0, #5
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	ebb0 0008 	subs.w	r0, r0, r8
 8001872:	eb61 0109 	sbc.w	r1, r1, r9
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001884:	0182      	lsls	r2, r0, #6
 8001886:	1a12      	subs	r2, r2, r0
 8001888:	eb63 0301 	sbc.w	r3, r3, r1
 800188c:	f04f 0000 	mov.w	r0, #0
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	00d9      	lsls	r1, r3, #3
 8001896:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800189a:	00d0      	lsls	r0, r2, #3
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	eb12 0208 	adds.w	r2, r2, r8
 80018a4:	eb43 0309 	adc.w	r3, r3, r9
 80018a8:	f04f 0000 	mov.w	r0, #0
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	0259      	lsls	r1, r3, #9
 80018b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018b6:	0250      	lsls	r0, r2, #9
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f7fe fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e04a      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	461a      	mov	r2, r3
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	ea02 0400 	and.w	r4, r2, r0
 80018ee:	ea03 0501 	and.w	r5, r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	014b      	lsls	r3, r1, #5
 8001900:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001904:	0142      	lsls	r2, r0, #5
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	1b00      	subs	r0, r0, r4
 800190c:	eb61 0105 	sbc.w	r1, r1, r5
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	018b      	lsls	r3, r1, #6
 800191a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800191e:	0182      	lsls	r2, r0, #6
 8001920:	1a12      	subs	r2, r2, r0
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	00d9      	lsls	r1, r3, #3
 8001930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001934:	00d0      	lsls	r0, r2, #3
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	1912      	adds	r2, r2, r4
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	0299      	lsls	r1, r3, #10
 800194a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800194e:	0290      	lsls	r0, r2, #10
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f7fe fc32 	bl	80001c8 <__aeabi_uldivmod>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4613      	mov	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	3301      	adds	r3, #1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	e002      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800198a:	60bb      	str	r3, [r7, #8]
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	68bb      	ldr	r3, [r7, #8]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	007a1200 	.word	0x007a1200

080019a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08004914 	.word	0x08004914

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019ec:	f7ff ffdc 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0b5b      	lsrs	r3, r3, #13
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08004914 	.word	0x08004914

08001a10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e022      	b.n	8001a68 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe fe27 	bl	8000688 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f814 	bl	8001a70 <HAL_SD_InitCard>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00a      	b.n	8001a68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001a8c:	2376      	movs	r3, #118	; 0x76
 8001a8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681d      	ldr	r5, [r3, #0]
 8001a94:	466c      	mov	r4, sp
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f001 ff9f 	bl	80039ec <SDIO_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04c      	b.n	8001b5a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_SD_InitCard+0xf4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 ffd7 	bl	8003a7e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_SD_InitCard+0xf4>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 ff02 	bl	80028e0 <SD_PowerON>
 8001adc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e02e      	b.n	8001b5a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fe23 	bl	8002748 <SD_InitCard>
 8001b02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e01b      	b.n	8001b5a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 f83a 	bl	8003ba4 <SDMMC_CmdBlockLength>
 8001b30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00f      	beq.n	8001b58 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_SD_InitCard+0xf8>)
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	422580a0 	.word	0x422580a0
 8001b68:	004005ff 	.word	0x004005ff

08001b6c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b092      	sub	sp, #72	; 0x48
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001b7a:	f7fe ff65 	bl	8000a48 <HAL_GetTick>
 8001b7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1bd      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	f040 81b0 	bne.w	8001f0c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	441a      	add	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d907      	bls.n	8001bd0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e1a4      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d002      	beq.n	8001bee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001bfa:	2390      	movs	r3, #144	; 0x90
 8001bfc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f107 0214 	add.w	r2, r7, #20
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 ff99 	bl	8003b4c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d90a      	bls.n	8001c36 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2202      	movs	r2, #2
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fffd 	bl	8003c2c <SDMMC_CmdReadMultiBlock>
 8001c32:	6478      	str	r0, [r7, #68]	; 0x44
 8001c34:	e009      	b.n	8001c4a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 ffd0 	bl	8003be8 <SDMMC_CmdReadSingleBlock>
 8001c48:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d012      	beq.n	8001c76 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e151      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001c7a:	e061      	b.n	8001d40 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03c      	beq.n	8001d04 <HAL_SD_ReadBlocks+0x198>
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d039      	beq.n	8001d04 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
 8001c94:	e033      	b.n	8001cfe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fed1 	bl	8003a42 <SDIO_ReadFIFO>
 8001ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	3301      	adds	r3, #1
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	3301      	adds	r3, #1
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cee:	3301      	adds	r3, #1
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8001cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d00:	2b07      	cmp	r3, #7
 8001d02:	d9c8      	bls.n	8001c96 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001d04:	f7fe fea0 	bl	8000a48 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d902      	bls.n	8001d1a <HAL_SD_ReadBlocks+0x1ae>
 8001d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d112      	bne.n	8001d40 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a48      	ldr	r2, [pc, #288]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0ec      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	f240 332a 	movw	r3, #810	; 0x32a
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d095      	beq.n	8001c7c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d022      	beq.n	8001da4 <HAL_SD_ReadBlocks+0x238>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d91f      	bls.n	8001da4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d01b      	beq.n	8001da4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 ffc1 	bl	8003cf8 <SDMMC_CmdStopTransfer>
 8001d76:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ba      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	f043 0208 	orr.w	r2, r3, #8
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0a0      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e086      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_SD_ReadBlocks+0x2d4>)
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e06c      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
 8001e40:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 fdfa 	bl	8003a42 <SDIO_ReadFIFO>
 8001e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e56:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	3b01      	subs	r3, #1
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	3301      	adds	r3, #1
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e76:	3b01      	subs	r3, #1
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	3301      	adds	r3, #1
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	0e1b      	lsrs	r3, r3, #24
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e98:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001ea6:	f7fe fdcf 	bl	8000a48 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d902      	bls.n	8001ebc <HAL_SD_ReadBlocks+0x350>
 8001eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d112      	bne.n	8001ee2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_SD_ReadBlocks+0x3b8>)
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e01b      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_SD_ReadBlocks+0x38a>
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1a6      	bne.n	8001e44 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f240 523a 	movw	r2, #1338	; 0x53a
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e006      	b.n	8001f1a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3748      	adds	r7, #72	; 0x48
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	004005ff 	.word	0x004005ff

08001f28 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b092      	sub	sp, #72	; 0x48
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001f36:	f7fe fd87 	bl	8000a48 <HAL_GetTick>
 8001f3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e166      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 8159 	bne.w	800221a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	441a      	add	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d907      	bls.n	8001f8c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e14d      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d002      	beq.n	8001faa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	025b      	lsls	r3, r3, #9
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001fb6:	2390      	movs	r3, #144	; 0x90
 8001fb8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f107 0218 	add.w	r2, r7, #24
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fdbb 	bl	8003b4c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d90a      	bls.n	8001ff2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 fe63 	bl	8003cb4 <SDMMC_CmdWriteMultiBlock>
 8001fee:	6478      	str	r0, [r7, #68]	; 0x44
 8001ff0:	e009      	b.n	8002006 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fe36 	bl	8003c70 <SDMMC_CmdWriteSingleBlock>
 8002004:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a87      	ldr	r2, [pc, #540]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0fa      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002036:	e065      	b.n	8002104 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d040      	beq.n	80020c8 <HAL_SD_WriteBlocks+0x1a0>
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d03d      	beq.n	80020c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800204c:	2300      	movs	r3, #0
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
 8002050:	e037      	b.n	80020c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	3301      	adds	r3, #1
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800205e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002060:	3b01      	subs	r3, #1
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	021a      	lsls	r2, r3, #8
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	3301      	adds	r3, #1
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002078:	3b01      	subs	r3, #1
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208a:	3301      	adds	r3, #1
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002090:	3b01      	subs	r3, #1
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	061a      	lsls	r2, r3, #24
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	3301      	adds	r3, #1
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	3b01      	subs	r3, #1
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f107 0214 	add.w	r2, r7, #20
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 fcd0 	bl	8003a5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	3301      	adds	r3, #1
 80020c0:	643b      	str	r3, [r7, #64]	; 0x40
 80020c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d9c4      	bls.n	8002052 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80020c8:	f7fe fcbe 	bl	8000a48 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d902      	bls.n	80020de <HAL_SD_WriteBlocks+0x1b6>
 80020d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d112      	bne.n	8002104 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a53      	ldr	r2, [pc, #332]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e091      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	f240 331a 	movw	r3, #794	; 0x31a
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d091      	beq.n	8002038 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d022      	beq.n	8002168 <HAL_SD_WriteBlocks+0x240>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d91f      	bls.n	8002168 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	2b03      	cmp	r3, #3
 800212e:	d01b      	beq.n	8002168 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f001 fddf 	bl	8003cf8 <SDMMC_CmdStopTransfer>
 800213a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	2b00      	cmp	r3, #0
 8002140:	d012      	beq.n	8002168 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 8002148:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e05f      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d012      	beq.n	800219c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	f043 0208 	orr.w	r2, r3, #8
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e045      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d012      	beq.n	80021d0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a20      	ldr	r2, [pc, #128]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e02b      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_SD_WriteBlocks+0x308>)
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e011      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f240 523a 	movw	r2, #1338	; 0x53a
 800220c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e006      	b.n	8002228 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
  }
}
 8002228:	4618      	mov	r0, r3
 800222a:	3748      	adds	r7, #72	; 0x48
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	004005ff 	.word	0x004005ff

08002234 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002242:	0f9b      	lsrs	r3, r3, #30
 8002244:	b2da      	uxtb	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	b2da      	uxtb	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002260:	0e1b      	lsrs	r3, r3, #24
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	b2da      	uxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	b2da      	uxtb	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	b2da      	uxtb	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228a:	b2da      	uxtb	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002294:	0d1b      	lsrs	r3, r3, #20
 8002296:	b29a      	uxth	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b2:	0bdb      	lsrs	r3, r3, #15
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c4:	0b9b      	lsrs	r3, r3, #14
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d6:	0b5b      	lsrs	r3, r3, #13
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022e8:	0b1b      	lsrs	r3, r3, #12
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	2b00      	cmp	r3, #0
 8002302:	d163      	bne.n	80023cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002308:	009a      	lsls	r2, r3, #2
 800230a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800230e:	4013      	ands	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002314:	0f92      	lsrs	r2, r2, #30
 8002316:	431a      	orrs	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002320:	0edb      	lsrs	r3, r3, #27
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	b2da      	uxtb	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002332:	0e1b      	lsrs	r3, r3, #24
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	b2da      	uxtb	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	b2da      	uxtb	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002356:	0c9b      	lsrs	r3, r3, #18
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	b2da      	uxtb	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002368:	0bdb      	lsrs	r3, r3, #15
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	b2da      	uxtb	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	3302      	adds	r3, #2
 800238c:	2201      	movs	r2, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	7a1b      	ldrb	r3, [r3, #8]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023b8:	0a52      	lsrs	r2, r2, #9
 80023ba:	fb02 f203 	mul.w	r2, r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c8:	661a      	str	r2, [r3, #96]	; 0x60
 80023ca:	e031      	b.n	8002430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d11d      	bne.n	8002410 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	3301      	adds	r3, #1
 80023f0:	029a      	lsls	r2, r3, #10
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002404:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	661a      	str	r2, [r3, #96]	; 0x60
 800240e:	e00f      	b.n	8002430 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_SD_GetCardCSD+0x344>)
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e09d      	b.n	800256c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	0b9b      	lsrs	r3, r3, #14
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002446:	09db      	lsrs	r3, r3, #7
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800244e:	b2da      	uxtb	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245e:	b2da      	uxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	0fdb      	lsrs	r3, r3, #31
 800246a:	b2da      	uxtb	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	0f5b      	lsrs	r3, r3, #29
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	b2da      	uxtb	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	0d9b      	lsrs	r3, r3, #22
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	0d5b      	lsrs	r3, r3, #21
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	0c1b      	lsrs	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	0bdb      	lsrs	r3, r3, #15
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	0b9b      	lsrs	r3, r3, #14
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	0b5b      	lsrs	r3, r3, #13
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	0b1b      	lsrs	r3, r3, #12
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	0a9b      	lsrs	r3, r3, #10
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	b2da      	uxtb	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800255a:	b2da      	uxtb	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	004005ff 	.word	0x004005ff

0800257c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af04      	add	r7, sp, #16
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d02e      	beq.n	8002652 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fa:	d106      	bne.n	800260a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
 8002608:	e029      	b.n	800265e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	d10a      	bne.n	8002628 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa1a 	bl	8002a4c <SD_WideBus_Enable>
 8002618:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
 8002626:	e01a      	b.n	800265e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa57 	bl	8002ae2 <SD_WideBus_Disable>
 8002634:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
 8002642:	e00c      	b.n	800265e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
 8002650:	e005      	b.n	800265e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <HAL_SD_ConfigWideBusOperation+0x130>)
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800267c:	e01f      	b.n	80026be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681d      	ldr	r5, [r3, #0]
 80026a4:	466c      	mov	r4, sp
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b8:	4628      	mov	r0, r5
 80026ba:	f001 f997 	bl	80039ec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fa6c 	bl	8003ba4 <SDMMC_CmdBlockLength>
 80026cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_SD_ConfigWideBusOperation+0x130>)
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bdb0      	pop	{r4, r5, r7, pc}
 8002702:	bf00      	nop
 8002704:	004005ff 	.word	0x004005ff

08002708 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f96e 	bl	80029fc <SD_SendStatus>
 8002720:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	0a5b      	lsrs	r3, r3, #9
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800273e:	693b      	ldr	r3, [r7, #16]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b094      	sub	sp, #80	; 0x50
 800274c:	af04      	add	r7, sp, #16
 800274e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f001 f99f 	bl	8003a9c <SDIO_GetPowerState>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002764:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002768:	e0b6      	b.n	80028d8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	2b03      	cmp	r3, #3
 8002770:	d02f      	beq.n	80027d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fbc8 	bl	8003f0c <SDMMC_CmdSendCID>
 800277c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SD_InitCard+0x40>
    {
      return errorstate;
 8002784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002786:	e0a7      	b.n	80028d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f9c9 	bl	8003b26 <SDIO_GetResponse>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2104      	movs	r1, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f9c0 	bl	8003b26 <SDIO_GetResponse>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2108      	movs	r1, #8
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f9b7 	bl	8003b26 <SDIO_GetResponse>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	210c      	movs	r1, #12
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f9ae 	bl	8003b26 <SDIO_GetResponse>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d00d      	beq.n	80027f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f107 020e 	add.w	r2, r7, #14
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fbce 	bl	8003f86 <SDMMC_CmdSetRelAdd>
 80027ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	e070      	b.n	80028d8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d036      	beq.n	800286c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f001 fb98 	bl	8003f48 <SDMMC_CmdSendCSD>
 8002818:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	e059      	b.n	80028d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f001 f97b 	bl	8003b26 <SDIO_GetResponse>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2104      	movs	r1, #4
 800283c:	4618      	mov	r0, r3
 800283e:	f001 f972 	bl	8003b26 <SDIO_GetResponse>
 8002842:	4602      	mov	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2108      	movs	r1, #8
 800284e:	4618      	mov	r0, r3
 8002850:	f001 f969 	bl	8003b26 <SDIO_GetResponse>
 8002854:	4602      	mov	r2, r0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	210c      	movs	r1, #12
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f960 	bl	8003b26 <SDIO_GetResponse>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2104      	movs	r1, #4
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f957 	bl	8003b26 <SDIO_GetResponse>
 8002878:	4603      	mov	r3, r0
 800287a:	0d1a      	lsrs	r2, r3, #20
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff fcd4 	bl	8002234 <HAL_SD_GetCardCSD>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002896:	e01f      	b.n	80028d8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	461a      	mov	r2, r3
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	4608      	mov	r0, r1
 80028aa:	f001 fa47 	bl	8003d3c <SDMMC_CmdSelDesel>
 80028ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SD_InitCard+0x172>
  {
    return errorstate;
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	e00e      	b.n	80028d8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681d      	ldr	r5, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	466c      	mov	r4, sp
 80028c2:	f103 0210 	add.w	r2, r3, #16
 80028c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80028c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028cc:	3304      	adds	r3, #4
 80028ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d0:	4628      	mov	r0, r5
 80028d2:	f001 f88b 	bl	80039ec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3740      	adds	r7, #64	; 0x40
 80028dc:	46bd      	mov	sp, r7
 80028de:	bdb0      	pop	{r4, r5, r7, pc}

080028e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fa42 	bl	8003d82 <SDMMC_CmdGoIdleState>
 80028fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	e072      	b.n	80029f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fa55 	bl	8003dbe <SDMMC_CmdOperCond>
 8002914:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f001 fa2b 	bl	8003d82 <SDMMC_CmdGoIdleState>
 800292c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <SD_PowerON+0x5e>
    {
      return errorstate;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	e05b      	b.n	80029f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	2b01      	cmp	r3, #1
 8002944:	d137      	bne.n	80029b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f001 fa55 	bl	8003dfc <SDMMC_CmdAppCommand>
 8002952:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d02d      	beq.n	80029b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800295a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800295e:	e047      	b.n	80029f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f001 fa48 	bl	8003dfc <SDMMC_CmdAppCommand>
 800296c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <SD_PowerON+0x98>
    {
      return errorstate;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	e03b      	b.n	80029f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	491e      	ldr	r1, [pc, #120]	; (80029f8 <SD_PowerON+0x118>)
 800297e:	4618      	mov	r0, r3
 8002980:	f001 fa5e 	bl	8003e40 <SDMMC_CmdAppOperCommand>
 8002984:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800298c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002990:	e02e      	b.n	80029f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f8c4 	bl	8003b26 <SDIO_GetResponse>
 800299e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	0fdb      	lsrs	r3, r3, #31
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <SD_PowerON+0xcc>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <SD_PowerON+0xce>
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

    count++;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80029bc:	4293      	cmp	r3, r2
 80029be:	d802      	bhi.n	80029c6 <SD_PowerON+0xe6>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0cc      	beq.n	8002960 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d902      	bls.n	80029d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80029d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029d4:	e00c      	b.n	80029f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
 80029e6:	e002      	b.n	80029ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	c1100000 	.word	0xc1100000

080029fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002a0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a10:	e018      	b.n	8002a44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f001 fad2 	bl	8003fc8 <SDMMC_CmdSendStatus>
 8002a24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	e009      	b.n	8002a44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 f875 	bl	8003b26 <SDIO_GetResponse>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f85f 	bl	8003b26 <SDIO_GetResponse>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a72:	d102      	bne.n	8002a7a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a78:	e02f      	b.n	8002ada <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f879 	bl	8002b78 <SD_FindSCR>
 8002a86:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	e023      	b.n	8002ada <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f001 f9a7 	bl	8003dfc <SDMMC_CmdAppCommand>
 8002aae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e00f      	b.n	8002ada <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 f9e0 	bl	8003e86 <SDMMC_CmdBusWidth>
 8002ac6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	e003      	b.n	8002ada <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e001      	b.n	8002ada <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ad6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f814 	bl	8003b26 <SDIO_GetResponse>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b08:	d102      	bne.n	8002b10 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b0e:	e02f      	b.n	8002b70 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f82e 	bl	8002b78 <SD_FindSCR>
 8002b1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	e023      	b.n	8002b70 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01c      	beq.n	8002b6c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f001 f95c 	bl	8003dfc <SDMMC_CmdAppCommand>
 8002b44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	e00f      	b.n	8002b70 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f995 	bl	8003e86 <SDMMC_CmdBusWidth>
 8002b5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	e003      	b.n	8002b70 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e001      	b.n	8002b70 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b08f      	sub	sp, #60	; 0x3c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002b82:	f7fd ff61 	bl	8000a48 <HAL_GetTick>
 8002b86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2108      	movs	r1, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 f800 	bl	8003ba4 <SDMMC_CmdBlockLength>
 8002ba4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	e0b2      	b.n	8002d16 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f001 f91d 	bl	8003dfc <SDMMC_CmdAppCommand>
 8002bc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SD_FindSCR+0x56>
  {
    return errorstate;
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	e0a3      	b.n	8002d16 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002bd8:	2330      	movs	r3, #48	; 0x30
 8002bda:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f107 0210 	add.w	r2, r7, #16
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 ffaa 	bl	8003b4c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f964 	bl	8003eca <SDMMC_CmdSendSCR>
 8002c02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02a      	beq.n	8002c60 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	e083      	b.n	8002d16 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00f      	beq.n	8002c3c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	f107 0208 	add.w	r2, r7, #8
 8002c28:	18d4      	adds	r4, r2, r3
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	f000 ff09 	bl	8003a42 <SDIO_ReadFIFO>
 8002c30:	4603      	mov	r3, r0
 8002c32:	6023      	str	r3, [r4, #0]
      index++;
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	3301      	adds	r3, #1
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3a:	e006      	b.n	8002c4a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002c4a:	f7fd fefd 	bl	8000a48 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d102      	bne.n	8002c60 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002c5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c5e:	e05a      	b.n	8002d16 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0cf      	beq.n	8002c0e <SD_FindSCR+0x96>
 8002c6e:	e000      	b.n	8002c72 <SD_FindSCR+0xfa>
      break;
 8002c70:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	e044      	b.n	8002d16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e037      	b.n	8002d16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e02a      	b.n	8002d16 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	061a      	lsls	r2, r3, #24
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cd6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002ce0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0e1b      	lsrs	r3, r3, #24
 8002ce6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	601a      	str	r2, [r3, #0]
    scr++;
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	3304      	adds	r3, #4
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	061a      	lsls	r2, r3, #24
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002d08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0e1b      	lsrs	r3, r3, #24
 8002d0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	373c      	adds	r7, #60	; 0x3c
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}

08002d1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e03f      	b.n	8002db0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd fd9f 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2224      	movs	r2, #36	; 0x24
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fc7a 	bl	800365c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0ba      	sub	sp, #232	; 0xe8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_UART_IRQHandler+0x66>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fb65 	bl	80034e6 <UART_Receive_IT>
      return;
 8002e1c:	e256      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80de 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x22c>
 8002e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80d1 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xae>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_UART_IRQHandler+0xd2>
 8002e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xf6>
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d011      	beq.n	8002ede <HAL_UART_IRQHandler+0x126>
 8002eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0208 	orr.w	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 81ed 	beq.w	80032c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_UART_IRQHandler+0x14e>
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 faf0 	bl	80034e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_UART_IRQHandler+0x17a>
 8002f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04f      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9f8 	bl	8003328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d141      	bne.n	8002fca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1d9      	bne.n	8002f46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d013      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a7d      	ldr	r2, [pc, #500]	; (8003194 <HAL_UART_IRQHandler+0x3dc>)
 8002fa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd feff 	bl	8000daa <HAL_DMA_Abort_IT>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	e00e      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f99a 	bl	80032fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f996 	bl	80032fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e006      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f992 	bl	80032fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fde:	e170      	b.n	80032c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	bf00      	nop
    return;
 8002fe2:	e16e      	b.n	80032c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 814a 	bne.w	8003282 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8143 	beq.w	8003282 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 813c 	beq.w	8003282 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	f040 80b4 	bne.w	8003198 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800303c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8140 	beq.w	80032c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800304a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800304e:	429a      	cmp	r2, r3
 8003050:	f080 8139 	bcs.w	80032c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800305a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	f000 8088 	beq.w	800317a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800309a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1d9      	bne.n	800306a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e1      	bne.n	80030b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003116:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003118:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800311c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e3      	bne.n	80030f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800314a:	f023 0310 	bic.w	r3, r3, #16
 800314e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800315c:	65ba      	str	r2, [r7, #88]	; 0x58
 800315e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e3      	bne.n	8003138 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fda8 	bl	8000cca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003182:	b29b      	uxth	r3, r3
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	4619      	mov	r1, r3
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8c0 	bl	8003310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003190:	e099      	b.n	80032c6 <HAL_UART_IRQHandler+0x50e>
 8003192:	bf00      	nop
 8003194:	080033ef 	.word	0x080033ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 808b 	beq.w	80032ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8086 	beq.w	80032ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031e2:	647a      	str	r2, [r7, #68]	; 0x44
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e3      	bne.n	80031be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3314      	adds	r3, #20
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	623b      	str	r3, [r7, #32]
   return(result);
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3314      	adds	r3, #20
 8003216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800321a:	633a      	str	r2, [r7, #48]	; 0x30
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e3      	bne.n	80031f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	e853 3f00 	ldrex	r3, [r3]
 800324a:	60fb      	str	r3, [r7, #12]
   return(result);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0310 	bic.w	r3, r3, #16
 8003252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003260:	61fa      	str	r2, [r7, #28]
 8003262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	69b9      	ldr	r1, [r7, #24]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	617b      	str	r3, [r7, #20]
   return(result);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e3      	bne.n	800323c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f848 	bl	8003310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003280:	e023      	b.n	80032ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_UART_IRQHandler+0x4ea>
 800328e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8bb 	bl	8003416 <UART_Transmit_IT>
    return;
 80032a0:	e014      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <HAL_UART_IRQHandler+0x514>
 80032ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8fb 	bl	80034b6 <UART_EndTransmit_IT>
    return;
 80032c0:	e004      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
    return;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
      return;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
      return;
 80032ca:	bf00      	nop
  }
}
 80032cc:	37e8      	adds	r7, #232	; 0xe8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b095      	sub	sp, #84	; 0x54
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003350:	643a      	str	r2, [r7, #64]	; 0x40
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e5      	bne.n	8003330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	61fb      	str	r3, [r7, #28]
   return(result);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e5      	bne.n	8003364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b01      	cmp	r3, #1
 800339e:	d119      	bne.n	80033d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f023 0310 	bic.w	r3, r3, #16
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c0:	61ba      	str	r2, [r7, #24]
 80033c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	613b      	str	r3, [r7, #16]
   return(result);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e5      	bne.n	80033a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e2:	bf00      	nop
 80033e4:	3754      	adds	r7, #84	; 0x54
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff77 	bl	80032fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b21      	cmp	r3, #33	; 0x21
 8003428:	d13e      	bne.n	80034a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d114      	bne.n	800345e <UART_Transmit_IT+0x48>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	621a      	str	r2, [r3, #32]
 800345c:	e008      	b.n	8003470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6211      	str	r1, [r2, #32]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4619      	mov	r1, r3
 800347e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fefc 	bl	80032d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b08c      	sub	sp, #48	; 0x30
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b22      	cmp	r3, #34	; 0x22
 80034f8:	f040 80ab 	bne.w	8003652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d117      	bne.n	8003536 <UART_Receive_IT+0x50>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	b29a      	uxth	r2, r3
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
 8003534:	e026      	b.n	8003584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d007      	beq.n	800355a <UART_Receive_IT+0x74>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <UART_Receive_IT+0x82>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e008      	b.n	800357a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	b2da      	uxtb	r2, r3
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4619      	mov	r1, r3
 8003592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003594:	2b00      	cmp	r3, #0
 8003596:	d15a      	bne.n	800364e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0220 	bic.w	r2, r2, #32
 80035a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d135      	bne.n	8003644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	613b      	str	r3, [r7, #16]
   return(result);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f023 0310 	bic.w	r3, r3, #16
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	623a      	str	r2, [r7, #32]
 8003600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	69f9      	ldr	r1, [r7, #28]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	61bb      	str	r3, [r7, #24]
   return(result);
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b10      	cmp	r3, #16
 800361e:	d10a      	bne.n	8003636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fe67 	bl	8003310 <HAL_UARTEx_RxEventCallback>
 8003642:	e002      	b.n	800364a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff fe4f 	bl	80032e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e002      	b.n	8003654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	3730      	adds	r7, #48	; 0x30
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003660:	b09f      	sub	sp, #124	; 0x7c
 8003662:	af00      	add	r7, sp, #0
 8003664:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	68d9      	ldr	r1, [r3, #12]
 8003674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	ea40 0301 	orr.w	r3, r0, r1
 800367c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	431a      	orrs	r2, r3
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4313      	orrs	r3, r2
 8003694:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036a0:	f021 010c 	bic.w	r1, r1, #12
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036aa:	430b      	orrs	r3, r1
 80036ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ba:	6999      	ldr	r1, [r3, #24]
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	ea40 0301 	orr.w	r3, r0, r1
 80036c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4bc5      	ldr	r3, [pc, #788]	; (80039e0 <UART_SetConfig+0x384>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d004      	beq.n	80036da <UART_SetConfig+0x7e>
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4bc3      	ldr	r3, [pc, #780]	; (80039e4 <UART_SetConfig+0x388>)
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d103      	bne.n	80036e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036da:	f7fe f985 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 80036de:	6778      	str	r0, [r7, #116]	; 0x74
 80036e0:	e002      	b.n	80036e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036e2:	f7fe f96d 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 80036e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f0:	f040 80b6 	bne.w	8003860 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f6:	461c      	mov	r4, r3
 80036f8:	f04f 0500 	mov.w	r5, #0
 80036fc:	4622      	mov	r2, r4
 80036fe:	462b      	mov	r3, r5
 8003700:	1891      	adds	r1, r2, r2
 8003702:	6439      	str	r1, [r7, #64]	; 0x40
 8003704:	415b      	adcs	r3, r3
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
 8003708:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800370c:	1912      	adds	r2, r2, r4
 800370e:	eb45 0303 	adc.w	r3, r5, r3
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	00d9      	lsls	r1, r3, #3
 800371c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003720:	00d0      	lsls	r0, r2, #3
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	1911      	adds	r1, r2, r4
 8003728:	6639      	str	r1, [r7, #96]	; 0x60
 800372a:	416b      	adcs	r3, r5
 800372c:	667b      	str	r3, [r7, #100]	; 0x64
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	461a      	mov	r2, r3
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	1891      	adds	r1, r2, r2
 800373a:	63b9      	str	r1, [r7, #56]	; 0x38
 800373c:	415b      	adcs	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003744:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003748:	f7fc fd3e 	bl	80001c8 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4ba5      	ldr	r3, [pc, #660]	; (80039e8 <UART_SetConfig+0x38c>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011e      	lsls	r6, r3, #4
 800375a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800375c:	461c      	mov	r4, r3
 800375e:	f04f 0500 	mov.w	r5, #0
 8003762:	4622      	mov	r2, r4
 8003764:	462b      	mov	r3, r5
 8003766:	1891      	adds	r1, r2, r2
 8003768:	6339      	str	r1, [r7, #48]	; 0x30
 800376a:	415b      	adcs	r3, r3
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003772:	1912      	adds	r2, r2, r4
 8003774:	eb45 0303 	adc.w	r3, r5, r3
 8003778:	f04f 0000 	mov.w	r0, #0
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	00d9      	lsls	r1, r3, #3
 8003782:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003786:	00d0      	lsls	r0, r2, #3
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	1911      	adds	r1, r2, r4
 800378e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003790:	416b      	adcs	r3, r5
 8003792:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	461a      	mov	r2, r3
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	1891      	adds	r1, r2, r2
 80037a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80037a2:	415b      	adcs	r3, r3
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037ae:	f7fc fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <UART_SetConfig+0x38c>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a87      	ldr	r2, [pc, #540]	; (80039e8 <UART_SetConfig+0x38c>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037d8:	441e      	add	r6, r3
 80037da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037dc:	4618      	mov	r0, r3
 80037de:	f04f 0100 	mov.w	r1, #0
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	1894      	adds	r4, r2, r2
 80037e8:	623c      	str	r4, [r7, #32]
 80037ea:	415b      	adcs	r3, r3
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037f2:	1812      	adds	r2, r2, r0
 80037f4:	eb41 0303 	adc.w	r3, r1, r3
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	f04f 0500 	mov.w	r5, #0
 8003800:	00dd      	lsls	r5, r3, #3
 8003802:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003806:	00d4      	lsls	r4, r2, #3
 8003808:	4622      	mov	r2, r4
 800380a:	462b      	mov	r3, r5
 800380c:	1814      	adds	r4, r2, r0
 800380e:	653c      	str	r4, [r7, #80]	; 0x50
 8003810:	414b      	adcs	r3, r1
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	1891      	adds	r1, r2, r2
 8003820:	61b9      	str	r1, [r7, #24]
 8003822:	415b      	adcs	r3, r3
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800382e:	f7fc fccb 	bl	80001c8 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b6c      	ldr	r3, [pc, #432]	; (80039e8 <UART_SetConfig+0x38c>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <UART_SetConfig+0x38c>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 0207 	and.w	r2, r3, #7
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4432      	add	r2, r6
 800385c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800385e:	e0b9      	b.n	80039d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003862:	461c      	mov	r4, r3
 8003864:	f04f 0500 	mov.w	r5, #0
 8003868:	4622      	mov	r2, r4
 800386a:	462b      	mov	r3, r5
 800386c:	1891      	adds	r1, r2, r2
 800386e:	6139      	str	r1, [r7, #16]
 8003870:	415b      	adcs	r3, r3
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003878:	1912      	adds	r2, r2, r4
 800387a:	eb45 0303 	adc.w	r3, r5, r3
 800387e:	f04f 0000 	mov.w	r0, #0
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	00d9      	lsls	r1, r3, #3
 8003888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800388c:	00d0      	lsls	r0, r2, #3
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	eb12 0804 	adds.w	r8, r2, r4
 8003896:	eb43 0905 	adc.w	r9, r3, r5
 800389a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4618      	mov	r0, r3
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	008b      	lsls	r3, r1, #2
 80038ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038b2:	0082      	lsls	r2, r0, #2
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fc86 	bl	80001c8 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <UART_SetConfig+0x38c>)
 80038c2:	fba3 2302 	umull	r2, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	011e      	lsls	r6, r3, #4
 80038ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038cc:	4618      	mov	r0, r3
 80038ce:	f04f 0100 	mov.w	r1, #0
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	1894      	adds	r4, r2, r2
 80038d8:	60bc      	str	r4, [r7, #8]
 80038da:	415b      	adcs	r3, r3
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e2:	1812      	adds	r2, r2, r0
 80038e4:	eb41 0303 	adc.w	r3, r1, r3
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	f04f 0500 	mov.w	r5, #0
 80038f0:	00dd      	lsls	r5, r3, #3
 80038f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038f6:	00d4      	lsls	r4, r2, #3
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	1814      	adds	r4, r2, r0
 80038fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003900:	414b      	adcs	r3, r1
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	008b      	lsls	r3, r1, #2
 8003918:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800391c:	0082      	lsls	r2, r0, #2
 800391e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003922:	f7fc fc51 	bl	80001c8 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <UART_SetConfig+0x38c>)
 800392c:	fba3 1302 	umull	r1, r3, r3, r2
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	2164      	movs	r1, #100	; 0x64
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	3332      	adds	r3, #50	; 0x32
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <UART_SetConfig+0x38c>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394a:	441e      	add	r6, r3
 800394c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800394e:	4618      	mov	r0, r3
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	1894      	adds	r4, r2, r2
 800395a:	603c      	str	r4, [r7, #0]
 800395c:	415b      	adcs	r3, r3
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003964:	1812      	adds	r2, r2, r0
 8003966:	eb41 0303 	adc.w	r3, r1, r3
 800396a:	f04f 0400 	mov.w	r4, #0
 800396e:	f04f 0500 	mov.w	r5, #0
 8003972:	00dd      	lsls	r5, r3, #3
 8003974:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003978:	00d4      	lsls	r4, r2, #3
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	eb12 0a00 	adds.w	sl, r2, r0
 8003982:	eb43 0b01 	adc.w	fp, r3, r1
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800399e:	0082      	lsls	r2, r0, #2
 80039a0:	4650      	mov	r0, sl
 80039a2:	4659      	mov	r1, fp
 80039a4:	f7fc fc10 	bl	80001c8 <__aeabi_uldivmod>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <UART_SetConfig+0x38c>)
 80039ae:	fba3 1302 	umull	r1, r3, r3, r2
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	2164      	movs	r1, #100	; 0x64
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <UART_SetConfig+0x38c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4432      	add	r2, r6
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	377c      	adds	r7, #124	; 0x7c
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039de:	bf00      	nop
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	51eb851f 	.word	0x51eb851f

080039ec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 001c 	add.w	r0, r7, #28
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003a02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003a04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003a06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003a0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003a0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003a12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003a16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003a26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	b004      	add	sp, #16
 8003a40:	4770      	bx	lr

08003a42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003a8c:	2002      	movs	r0, #2
 8003a8e:	f7fc ffe7 	bl	8000a60 <HAL_Delay>
  
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ad6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003adc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003ae2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003af2:	f023 030f 	bic.w	r3, r3, #15
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	b2db      	uxtb	r3, r3
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3314      	adds	r3, #20
 8003b34:	461a      	mov	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
}  
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b72:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003b78:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003b7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0

}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bc4:	f107 0308 	add.w	r3, r7, #8
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff74 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa44 	bl	8004064 <SDMMC_GetCmdResp1>
 8003bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bde:	69fb      	ldr	r3, [r7, #28]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003bf6:	2311      	movs	r3, #17
 8003bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bfa:	2340      	movs	r3, #64	; 0x40
 8003bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c08:	f107 0308 	add.w	r3, r7, #8
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ff52 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	2111      	movs	r1, #17
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa22 	bl	8004064 <SDMMC_GetCmdResp1>
 8003c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c22:	69fb      	ldr	r3, [r7, #28]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003c3a:	2312      	movs	r3, #18
 8003c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff30 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	2112      	movs	r1, #18
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa00 	bl	8004064 <SDMMC_GetCmdResp1>
 8003c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c66:	69fb      	ldr	r3, [r7, #28]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003c7e:	2318      	movs	r3, #24
 8003c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c82:	2340      	movs	r3, #64	; 0x40
 8003c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff0e 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	2118      	movs	r1, #24
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9de 	bl	8004064 <SDMMC_GetCmdResp1>
 8003ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003caa:	69fb      	ldr	r3, [r7, #28]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003cc2:	2319      	movs	r3, #25
 8003cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff feec 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	2119      	movs	r1, #25
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f9bc 	bl	8004064 <SDMMC_GetCmdResp1>
 8003cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cee:	69fb      	ldr	r3, [r7, #28]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003d04:	230c      	movs	r3, #12
 8003d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d08:	2340      	movs	r3, #64	; 0x40
 8003d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fecb 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <SDMMC_CmdStopTransfer+0x40>)
 8003d24:	210c      	movs	r1, #12
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f99c 	bl	8004064 <SDMMC_GetCmdResp1>
 8003d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	05f5e100 	.word	0x05f5e100

08003d3c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fea7 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	2107      	movs	r1, #7
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f977 	bl	8004064 <SDMMC_GetCmdResp1>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b088      	sub	sp, #32
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe86 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f92d 	bl	800400c <SDMMC_GetCmdError>
 8003db2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003db4:	69fb      	ldr	r3, [r7, #28]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b088      	sub	sp, #32
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003dc6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003dcc:	2308      	movs	r3, #8
 8003dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ddc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fe67 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fb24 	bl	8004438 <SDMMC_GetCmdResp7>
 8003df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003df2:	69fb      	ldr	r3, [r7, #28]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003e0a:	2337      	movs	r3, #55	; 0x37
 8003e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e1c:	f107 0308 	add.w	r3, r7, #8
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fe48 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	2137      	movs	r1, #55	; 0x37
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f918 	bl	8004064 <SDMMC_GetCmdResp1>
 8003e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e36:	69fb      	ldr	r3, [r7, #28]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003e56:	2329      	movs	r3, #41	; 0x29
 8003e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e5a:	2340      	movs	r3, #64	; 0x40
 8003e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e68:	f107 0308 	add.w	r3, r7, #8
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fe22 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fa2b 	bl	80042d0 <SDMMC_GetCmdResp3>
 8003e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003e94:	2306      	movs	r3, #6
 8003e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ea6:	f107 0308 	add.w	r3, r7, #8
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fe03 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	2106      	movs	r1, #6
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f8d3 	bl	8004064 <SDMMC_GetCmdResp1>
 8003ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8003ed6:	2333      	movs	r3, #51	; 0x33
 8003ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fde2 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	2133      	movs	r1, #51	; 0x33
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8b2 	bl	8004064 <SDMMC_GetCmdResp1>
 8003f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f02:	69fb      	ldr	r3, [r7, #28]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f1c:	23c0      	movs	r3, #192	; 0xc0
 8003f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f2a:	f107 0308 	add.w	r3, r7, #8
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff fdc1 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f982 	bl	8004240 <SDMMC_GetCmdResp2>
 8003f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003f56:	2309      	movs	r3, #9
 8003f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003f5a:	23c0      	movs	r3, #192	; 0xc0
 8003f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fda2 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f963 	bl	8004240 <SDMMC_GetCmdResp2>
 8003f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003f94:	2303      	movs	r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f98:	2340      	movs	r3, #64	; 0x40
 8003f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4619      	mov	r1, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fd83 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f9c8 	bl	800434c <SDMMC_GetCmdResp6>
 8003fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003fd6:	230d      	movs	r3, #13
 8003fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe8:	f107 0308 	add.w	r3, r7, #8
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fd62 	bl	8003ab8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	210d      	movs	r1, #13
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f832 	bl	8004064 <SDMMC_GetCmdResp1>
 8004000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004002:	69fb      	ldr	r3, [r7, #28]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <SDMMC_GetCmdError+0x50>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <SDMMC_GetCmdError+0x54>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a5b      	lsrs	r3, r3, #9
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	60fa      	str	r2, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004038:	e009      	b.n	800404e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f1      	beq.n	800402a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	22c5      	movs	r2, #197	; 0xc5
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000000 	.word	0x20000000
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	460b      	mov	r3, r1
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004072:	4b70      	ldr	r3, [pc, #448]	; (8004234 <SDMMC_GetCmdResp1+0x1d0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a70      	ldr	r2, [pc, #448]	; (8004238 <SDMMC_GetCmdResp1+0x1d4>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0a5a      	lsrs	r2, r3, #9
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	1e5a      	subs	r2, r3, #1
 800408a:	61fa      	str	r2, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004094:	e0c9      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ef      	beq.n	8004086 <SDMMC_GetCmdResp1+0x22>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ea      	bne.n	8004086 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2204      	movs	r2, #4
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040c2:	2304      	movs	r3, #4
 80040c4:	e0b1      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0a6      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	22c5      	movs	r2, #197	; 0xc5
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fd12 	bl	8003b0c <SDIO_GetCommandResponse>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	7afb      	ldrb	r3, [r7, #11]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d001      	beq.n	80040f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e099      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80040f6:	2100      	movs	r1, #0
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff fd14 	bl	8003b26 <SDIO_GetResponse>
 80040fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4b4e      	ldr	r3, [pc, #312]	; (800423c <SDMMC_GetCmdResp1+0x1d8>)
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800410a:	2300      	movs	r3, #0
 800410c:	e08d      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da02      	bge.n	800411a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004118:	e087      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004124:	2340      	movs	r3, #64	; 0x40
 8004126:	e080      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	e079      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004144:	e071      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004154:	e069      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004164:	e061      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004174:	e059      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004184:	e051      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004194:	e049      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80041a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a4:	e041      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80041b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b4:	e039      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80041c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041c4:	e031      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80041d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041d4:	e029      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80041e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80041e4:	e021      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80041f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041f4:	e019      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004204:	e011      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004214:	e009      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004220:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004224:	e001      	b.n	800422a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000
 8004238:	10624dd3 	.word	0x10624dd3
 800423c:	fdffe008 	.word	0xfdffe008

08004240 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <SDMMC_GetCmdResp2+0x88>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <SDMMC_GetCmdResp2+0x8c>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0a5b      	lsrs	r3, r3, #9
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	60fa      	str	r2, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800426c:	e026      	b.n	80042bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ef      	beq.n	800425e <SDMMC_GetCmdResp2+0x1e>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ea      	bne.n	800425e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800429a:	2304      	movs	r3, #4
 800429c:	e00e      	b.n	80042bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e003      	b.n	80042bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	22c5      	movs	r2, #197	; 0xc5
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000000 	.word	0x20000000
 80042cc:	10624dd3 	.word	0x10624dd3

080042d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042d8:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <SDMMC_GetCmdResp3+0x74>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <SDMMC_GetCmdResp3+0x78>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a5b      	lsrs	r3, r3, #9
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80042f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042fc:	e01b      	b.n	8004336 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ef      	beq.n	80042ee <SDMMC_GetCmdResp3+0x1e>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ea      	bne.n	80042ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800432a:	2304      	movs	r3, #4
 800432c:	e003      	b.n	8004336 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	22c5      	movs	r2, #197	; 0xc5
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000000 	.word	0x20000000
 8004348:	10624dd3 	.word	0x10624dd3

0800434c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	460b      	mov	r3, r1
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800435a:	4b35      	ldr	r3, [pc, #212]	; (8004430 <SDMMC_GetCmdResp6+0xe4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a35      	ldr	r2, [pc, #212]	; (8004434 <SDMMC_GetCmdResp6+0xe8>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d102      	bne.n	8004380 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800437a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800437e:	e052      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ef      	beq.n	8004370 <SDMMC_GetCmdResp6+0x24>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ea      	bne.n	8004370 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2204      	movs	r2, #4
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80043ac:	2304      	movs	r3, #4
 80043ae:	e03a      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02f      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fba0 	bl	8003b0c <SDIO_GetCommandResponse>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d001      	beq.n	80043da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e025      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22c5      	movs	r2, #197	; 0xc5
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80043e0:	2100      	movs	r1, #0
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fb9f 	bl	8003b26 <SDIO_GetResponse>
 80043e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80043fe:	2300      	movs	r3, #0
 8004400:	e011      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800440c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004410:	e009      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800441c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004420:	e001      	b.n	8004426 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000
 8004434:	10624dd3 	.word	0x10624dd3

08004438 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <SDMMC_GetCmdResp7+0x94>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <SDMMC_GetCmdResp7+0x98>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004464:	e02c      	b.n	80044c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ef      	beq.n	8004456 <SDMMC_GetCmdResp7+0x1e>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ea      	bne.n	8004456 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2204      	movs	r2, #4
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004492:	2304      	movs	r3, #4
 8004494:	e014      	b.n	80044c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e009      	b.n	80044c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2240      	movs	r2, #64	; 0x40
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
  
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20000000 	.word	0x20000000
 80044d0:	10624dd3 	.word	0x10624dd3

080044d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <MX_FATFS_Init+0x18>)
 80044da:	4805      	ldr	r0, [pc, #20]	; (80044f0 <MX_FATFS_Init+0x1c>)
 80044dc:	f000 f9ca 	bl	8004874 <FATFS_LinkDriver>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <MX_FATFS_Init+0x20>)
 80044e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044e8:	bf00      	nop
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000104 	.word	0x20000104
 80044f0:	0800491c 	.word	0x0800491c
 80044f4:	20000100 	.word	0x20000100

080044f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004502:	f000 f879 	bl	80045f8 <BSP_SD_IsDetected>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d001      	beq.n	8004510 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e012      	b.n	8004536 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004510:	480b      	ldr	r0, [pc, #44]	; (8004540 <BSP_SD_Init+0x48>)
 8004512:	f7fd fa7d 	bl	8001a10 <HAL_SD_Init>
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004524:	4806      	ldr	r0, [pc, #24]	; (8004540 <BSP_SD_Init+0x48>)
 8004526:	f7fe f855 	bl	80025d4 <HAL_SD_ConfigWideBusOperation>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004534:	79fb      	ldrb	r3, [r7, #7]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000034 	.word	0x20000034

08004544 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	4806      	ldr	r0, [pc, #24]	; (800457c <BSP_SD_ReadBlocks+0x38>)
 8004562:	f7fd fb03 	bl	8001b6c <HAL_SD_ReadBlocks>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000034 	.word	0x20000034

08004580 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4806      	ldr	r0, [pc, #24]	; (80045b8 <BSP_SD_WriteBlocks+0x38>)
 800459e:	f7fd fcc3 	bl	8001f28 <HAL_SD_WriteBlocks>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000034 	.word	0x20000034

080045bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <BSP_SD_GetCardState+0x1c>)
 80045c2:	f7fe f8a1 	bl	8002708 <HAL_SD_GetCardState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000034 	.word	0x20000034

080045dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4803      	ldr	r0, [pc, #12]	; (80045f4 <BSP_SD_GetCardInfo+0x18>)
 80045e8:	f7fd ffc8 	bl	800257c <HAL_SD_GetCardInfo>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000034 	.word	0x20000034

080045f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80045fe:	2301      	movs	r3, #1
 8004600:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <SD_CheckStatus+0x38>)
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004624:	f7ff ffca 	bl	80045bc <BSP_SD_GetCardState>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d107      	bne.n	800463e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <SD_CheckStatus+0x38>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <SD_CheckStatus+0x38>)
 800463c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <SD_CheckStatus+0x38>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000009 	.word	0x20000009

08004650 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <SD_initialize+0x38>)
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004660:	f7ff ff4a 	bl	80044f8 <BSP_SD_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ffd1 	bl	8004614 <SD_CheckStatus>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SD_initialize+0x38>)
 8004678:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800467a:	4b03      	ldr	r3, [pc, #12]	; (8004688 <SD_initialize+0x38>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000009 	.word	0x20000009

0800468c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ffbb 	bl	8004614 <SD_CheckStatus>
 800469e:	4603      	mov	r3, r0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	68b8      	ldr	r0, [r7, #8]
 80046c6:	f7ff ff3d 	bl	8004544 <BSP_SD_ReadBlocks>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80046d0:	bf00      	nop
 80046d2:	f7ff ff73 	bl	80045bc <BSP_SD_GetCardState>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1fa      	bne.n	80046d2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b086      	sub	sp, #24
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7ff ff3a 	bl	8004580 <BSP_SD_WriteBlocks>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004712:	bf00      	nop
 8004714:	f7ff ff52 	bl	80045bc <BSP_SD_GetCardState>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1fa      	bne.n	8004714 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	603a      	str	r2, [r7, #0]
 8004736:	71fb      	strb	r3, [r7, #7]
 8004738:	460b      	mov	r3, r1
 800473a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004742:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <SD_ioctl+0xac>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <SD_ioctl+0x28>
 8004750:	2303      	movs	r3, #3
 8004752:	e03c      	b.n	80047ce <SD_ioctl+0xa2>

  switch (cmd)
 8004754:	79bb      	ldrb	r3, [r7, #6]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d834      	bhi.n	80047c4 <SD_ioctl+0x98>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <SD_ioctl+0x34>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004771 	.word	0x08004771
 8004764:	08004779 	.word	0x08004779
 8004768:	08004791 	.word	0x08004791
 800476c:	080047ab 	.word	0x080047ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004776:	e028      	b.n	80047ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff2d 	bl	80045dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800478e:	e01c      	b.n	80047ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff21 	bl	80045dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	b29a      	uxth	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80047a8:	e00f      	b.n	80047ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff14 	bl	80045dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	0a5a      	lsrs	r2, r3, #9
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80047c2:	e002      	b.n	80047ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80047ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3730      	adds	r7, #48	; 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000009 	.word	0x20000009

080047dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80047f2:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 80047f4:	7a5b      	ldrb	r3, [r3, #9]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d131      	bne.n	8004860 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 80047fe:	7a5b      	ldrb	r3, [r3, #9]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 800480c:	7a5b      	ldrb	r3, [r3, #9]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 800481c:	7a5b      	ldrb	r3, [r3, #9]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 8004824:	4413      	add	r3, r2
 8004826:	79fa      	ldrb	r2, [r7, #7]
 8004828:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 800482c:	7a5b      	ldrb	r3, [r3, #9]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	b2d1      	uxtb	r1, r2
 8004834:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <FATFS_LinkDriverEx+0x94>)
 8004836:	7251      	strb	r1, [r2, #9]
 8004838:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800483a:	7dbb      	ldrb	r3, [r7, #22]
 800483c:	3330      	adds	r3, #48	; 0x30
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	3301      	adds	r3, #1
 8004848:	223a      	movs	r2, #58	; 0x3a
 800484a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3302      	adds	r3, #2
 8004850:	222f      	movs	r2, #47	; 0x2f
 8004852:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	3303      	adds	r3, #3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000028 	.word	0x20000028

08004874 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800487e:	2200      	movs	r2, #0
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ffaa 	bl	80047dc <FATFS_LinkDriverEx>
 8004888:	4603      	mov	r3, r0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4d0d      	ldr	r5, [pc, #52]	; (80048cc <__libc_init_array+0x38>)
 8004898:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489a:	1b64      	subs	r4, r4, r5
 800489c:	10a4      	asrs	r4, r4, #2
 800489e:	2600      	movs	r6, #0
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	4d0b      	ldr	r5, [pc, #44]	; (80048d4 <__libc_init_array+0x40>)
 80048a6:	4c0c      	ldr	r4, [pc, #48]	; (80048d8 <__libc_init_array+0x44>)
 80048a8:	f000 f820 	bl	80048ec <_init>
 80048ac:	1b64      	subs	r4, r4, r5
 80048ae:	10a4      	asrs	r4, r4, #2
 80048b0:	2600      	movs	r6, #0
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08004938 	.word	0x08004938
 80048d0:	08004938 	.word	0x08004938
 80048d4:	08004938 	.word	0x08004938
 80048d8:	0800493c 	.word	0x0800493c

080048dc <memset>:
 80048dc:	4402      	add	r2, r0
 80048de:	4603      	mov	r3, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <_init>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr

080048f8 <_fini>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr
